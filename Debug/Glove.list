
Glove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003104  08003104  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800310c  0800310c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00013110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000048  0800315c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800315c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f6b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014b6  00000000  00000000  00028fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  0002ab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002064d  00000000  00000000  0002b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000661b  00000000  00000000  0004b795  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1ff7  00000000  00000000  00051db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113da7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a58  00000000  00000000  00113e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bb8 	.word	0x08002bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08002bb8 	.word	0x08002bb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <ILI9341_SendCommand+0x54>)
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <ILI9341_SendCommand+0x58>)
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	2200      	movs	r2, #0
 80004f0:	4619      	mov	r1, r3
 80004f2:	f001 fc9d 	bl	8001e30 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <ILI9341_SendCommand+0x5c>)
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <ILI9341_SendCommand+0x60>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	f001 fc95 	bl	8001e30 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000506:	f107 010f 	add.w	r1, r7, #15
 800050a:	2305      	movs	r3, #5
 800050c:	2201      	movs	r2, #1
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <ILI9341_SendCommand+0x64>)
 8000510:	f002 f93a 	bl	8002788 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <ILI9341_SendCommand+0x5c>)
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <ILI9341_SendCommand+0x60>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	4619      	mov	r1, r3
 8000520:	f001 fc86 	bl	8001e30 <HAL_GPIO_WritePin>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000c8 	.word	0x200000c8
 8000530:	200000cc 	.word	0x200000cc
 8000534:	200000c0 	.word	0x200000c0
 8000538:	200000c4 	.word	0x200000c4
 800053c:	20000068 	.word	0x20000068

08000540 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <ILI9341_SendData+0x54>)
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <ILI9341_SendData+0x58>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	2201      	movs	r2, #1
 8000558:	4619      	mov	r1, r3
 800055a:	f001 fc69 	bl	8001e30 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <ILI9341_SendData+0x5c>)
 8000560:	6818      	ldr	r0, [r3, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <ILI9341_SendData+0x60>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f001 fc61 	bl	8001e30 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800056e:	f107 010f 	add.w	r1, r7, #15
 8000572:	2305      	movs	r3, #5
 8000574:	2201      	movs	r2, #1
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <ILI9341_SendData+0x64>)
 8000578:	f002 f906 	bl	8002788 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <ILI9341_SendData+0x5c>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <ILI9341_SendData+0x60>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	f001 fc52 	bl	8001e30 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000c8 	.word	0x200000c8
 8000598:	200000cc 	.word	0x200000cc
 800059c:	200000c0 	.word	0x200000c0
 80005a0:	200000c4 	.word	0x200000c4
 80005a4:	20000068 	.word	0x20000068

080005a8 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4604      	mov	r4, r0
 80005b0:	4608      	mov	r0, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	4623      	mov	r3, r4
 80005b8:	80fb      	strh	r3, [r7, #6]
 80005ba:	4603      	mov	r3, r0
 80005bc:	80bb      	strh	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	807b      	strh	r3, [r7, #2]
 80005c2:	4613      	mov	r3, r2
 80005c4:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80005c6:	202a      	movs	r0, #42	; 0x2a
 80005c8:	f7ff ff86 	bl	80004d8 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	0a1b      	lsrs	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffb3 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffae 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffa7 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffa2 	bl	8000540 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80005fc:	202b      	movs	r0, #43	; 0x2b
 80005fe:	f7ff ff6b 	bl	80004d8 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	b29b      	uxth	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff98 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000610:	88bb      	ldrh	r3, [r7, #4]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff93 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800061a:	883b      	ldrh	r3, [r7, #0]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	b29b      	uxth	r3, r3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff8c 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000628:	883b      	ldrh	r3, [r7, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff87 	bl	8000540 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000632:	202c      	movs	r0, #44	; 0x2c
 8000634:	f7ff ff50 	bl	80004d8 <ILI9341_SendCommand>
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4613      	mov	r3, r2
 800064e:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000650:	2258      	movs	r2, #88	; 0x58
 8000652:	68f9      	ldr	r1, [r7, #12]
 8000654:	4853      	ldr	r0, [pc, #332]	; (80007a4 <ILI9341_Init+0x164>)
 8000656:	f002 fa9b 	bl	8002b90 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 800065a:	4a53      	ldr	r2, [pc, #332]	; (80007a8 <ILI9341_Init+0x168>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000660:	4a52      	ldr	r2, [pc, #328]	; (80007ac <ILI9341_Init+0x16c>)
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000666:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <ILI9341_Init+0x170>)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 800066c:	4a51      	ldr	r2, [pc, #324]	; (80007b4 <ILI9341_Init+0x174>)
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000672:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <ILI9341_Init+0x168>)
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <ILI9341_Init+0x16c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	f001 fbd7 	bl	8001e30 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000682:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <ILI9341_Init+0x178>)
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000688:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <ILI9341_Init+0x17c>)
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800068e:	8c3b      	ldrh	r3, [r7, #32]
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	69f8      	ldr	r0, [r7, #28]
 8000696:	f001 fbcb 	bl	8001e30 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff ff1c 	bl	80004d8 <ILI9341_SendCommand>
   HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f001 f923 	bl	80018ec <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80006a6:	2028      	movs	r0, #40	; 0x28
 80006a8:	f7ff ff16 	bl	80004d8 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80006ac:	20c0      	movs	r0, #192	; 0xc0
 80006ae:	f7ff ff13 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80006b2:	2026      	movs	r0, #38	; 0x26
 80006b4:	f7ff ff44 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80006b8:	20c1      	movs	r0, #193	; 0xc1
 80006ba:	f7ff ff0d 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80006be:	2011      	movs	r0, #17
 80006c0:	f7ff ff3e 	bl	8000540 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80006c4:	20c5      	movs	r0, #197	; 0xc5
 80006c6:	f7ff ff07 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80006ca:	2035      	movs	r0, #53	; 0x35
 80006cc:	f7ff ff38 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80006d0:	203e      	movs	r0, #62	; 0x3e
 80006d2:	f7ff ff35 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80006d6:	20c7      	movs	r0, #199	; 0xc7
 80006d8:	f7ff fefe 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80006dc:	20be      	movs	r0, #190	; 0xbe
 80006de:	f7ff ff2f 	bl	8000540 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80006e2:	2036      	movs	r0, #54	; 0x36
 80006e4:	f7ff fef8 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80006e8:	2048      	movs	r0, #72	; 0x48
 80006ea:	f7ff ff29 	bl	8000540 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80006ee:	203a      	movs	r0, #58	; 0x3a
 80006f0:	f7ff fef2 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80006f4:	2055      	movs	r0, #85	; 0x55
 80006f6:	f7ff ff23 	bl	8000540 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80006fa:	20b1      	movs	r0, #177	; 0xb1
 80006fc:	f7ff feec 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff1d 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000706:	201f      	movs	r0, #31
 8000708:	f7ff ff1a 	bl	8000540 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 800070c:	202a      	movs	r0, #42	; 0x2a
 800070e:	f7ff fee3 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000712:	2000      	movs	r0, #0
 8000714:	f7ff ff14 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff11 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff0e 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000724:	20ef      	movs	r0, #239	; 0xef
 8000726:	f7ff ff0b 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800072a:	202b      	movs	r0, #43	; 0x2b
 800072c:	f7ff fed4 	bl	80004d8 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff ff05 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff ff02 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff feff 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000742:	203f      	movs	r0, #63	; 0x3f
 8000744:	f7ff fefc 	bl	8000540 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000748:	2034      	movs	r0, #52	; 0x34
 800074a:	f7ff fec5 	bl	80004d8 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 800074e:	20b7      	movs	r0, #183	; 0xb7
 8000750:	f7ff fec2 	bl	80004d8 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000754:	2007      	movs	r0, #7
 8000756:	f7ff fef3 	bl	8000540 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800075a:	20b6      	movs	r0, #182	; 0xb6
 800075c:	f7ff febc 	bl	80004d8 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000760:	200a      	movs	r0, #10
 8000762:	f7ff feed 	bl	8000540 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000766:	2082      	movs	r0, #130	; 0x82
 8000768:	f7ff feea 	bl	8000540 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 800076c:	2027      	movs	r0, #39	; 0x27
 800076e:	f7ff fee7 	bl	8000540 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fee4 	bl	8000540 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000778:	2011      	movs	r0, #17
 800077a:	f7ff fead 	bl	80004d8 <ILI9341_SendCommand>
   HAL_Delay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f001 f8b4 	bl	80018ec <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000784:	2029      	movs	r0, #41	; 0x29
 8000786:	f7ff fea7 	bl	80004d8 <ILI9341_SendCommand>
   HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f001 f8ae 	bl	80018ec <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000790:	202c      	movs	r0, #44	; 0x2c
 8000792:	f7ff fea1 	bl	80004d8 <ILI9341_SendCommand>
   HAL_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f001 f8a8 	bl	80018ec <HAL_Delay>
 }
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000068 	.word	0x20000068
 80007a8:	200000c0 	.word	0x200000c0
 80007ac:	200000c4 	.word	0x200000c4
 80007b0:	200000c8 	.word	0x200000c8
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	200000d0 	.word	0x200000d0
 80007bc:	200000d4 	.word	0x200000d4

080007c0 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
 80007ca:	460b      	mov	r3, r1
 80007cc:	80bb      	strh	r3, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	88b9      	ldrh	r1, [r7, #4]
 80007d8:	88f8      	ldrh	r0, [r7, #6]
 80007da:	f7ff fee5 	bl	80005a8 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff feaa 	bl	8000540 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fea5 	bl	8000540 <ILI9341_SendData>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 800080a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800080e:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8000810:	23ff      	movs	r3, #255	; 0xff
 8000812:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <ILI9341_Fill+0x80>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d003      	beq.n	8000824 <ILI9341_Fill+0x24>
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <ILI9341_Fill+0x80>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d107      	bne.n	8000834 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000824:	f240 133f 	movw	r3, #319	; 0x13f
 8000828:	22ef      	movs	r2, #239	; 0xef
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff febb 	bl	80005a8 <ILI9341_SetCursorPosition>
 8000832:	e00e      	b.n	8000852 <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <ILI9341_Fill+0x80>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d003      	beq.n	8000844 <ILI9341_Fill+0x44>
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <ILI9341_Fill+0x80>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d116      	bne.n	8000872 <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000844:	23ef      	movs	r3, #239	; 0xef
 8000846:	f240 123f 	movw	r2, #319	; 0x13f
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff feab 	bl	80005a8 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 8000852:	e00e      	b.n	8000872 <ILI9341_Fill+0x72>
			n--;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3b01      	subs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b29b      	uxth	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fe6c 	bl	8000540 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe67 	bl	8000540 <ILI9341_SendData>
	while (n) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1ed      	bne.n	8000854 <ILI9341_Fill+0x54>
	}
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000

08000884 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
 8000890:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	3301      	adds	r3, #1
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	1a8a      	subs	r2, r1, r2
 80008a0:	3201      	adds	r2, #1
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80008ae:	d902      	bls.n	80008b6 <ILI9341_Fill_Rect+0x32>
 80008b0:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80008b4:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	b298      	uxth	r0, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	b299      	uxth	r1, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	f7ff fe6f 	bl	80005a8 <ILI9341_SetCursorPosition>
	while (n) {
 80008ca:	e00e      	b.n	80008ea <ILI9341_Fill_Rect+0x66>
			n--;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80008d2:	8c3b      	ldrh	r3, [r7, #32]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe30 	bl	8000540 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80008e0:	8c3b      	ldrh	r3, [r7, #32]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe2b 	bl	8000540 <ILI9341_SendData>
	while (n) {
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1ed      	bne.n	80008cc <ILI9341_Fill_Rect+0x48>
	}
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4623      	mov	r3, r4
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4603      	mov	r3, r0
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
 8000912:	4613      	mov	r3, r2
 8000914:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	f1c3 0301 	rsb	r3, r3, #1
 800091c:	b29b      	uxth	r3, r3
 800091e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	461a      	mov	r2, r3
 8000928:	03d2      	lsls	r2, r2, #15
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8000936:	887b      	ldrh	r3, [r7, #2]
 8000938:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 800093a:	e083      	b.n	8000a44 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800093c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0e      	blt.n	8000962 <fillCircleHelper+0x6a>
      y--;
 8000944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3b01      	subs	r3, #1
 800094c:	b29b      	uxth	r3, r3
 800094e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8000950:	8a7b      	ldrh	r3, [r7, #18]
 8000952:	3302      	adds	r3, #2
 8000954:	b29b      	uxth	r3, r3
 8000956:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8000958:	8afa      	ldrh	r2, [r7, #22]
 800095a:	8a7b      	ldrh	r3, [r7, #18]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8000962:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800096e:	8abb      	ldrh	r3, [r7, #20]
 8000970:	3302      	adds	r3, #2
 8000972:	b29b      	uxth	r3, r3
 8000974:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8000976:	8afa      	ldrh	r2, [r7, #22]
 8000978:	8abb      	ldrh	r3, [r7, #20]
 800097a:	4413      	add	r3, r2
 800097c:	b29b      	uxth	r3, r3
 800097e:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8000980:	787b      	ldrb	r3, [r7, #1]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d02b      	beq.n	80009e2 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800098a:	88fa      	ldrh	r2, [r7, #6]
 800098c:	8a3b      	ldrh	r3, [r7, #16]
 800098e:	4413      	add	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	b218      	sxth	r0, r3
 8000994:	88ba      	ldrh	r2, [r7, #4]
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	b219      	sxth	r1, r3
 800099e:	89fb      	ldrh	r3, [r7, #14]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009a6:	4413      	add	r3, r2
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3301      	adds	r3, #1
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009b2:	f000 f91f 	bl	8000bf4 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80009b6:	88fa      	ldrh	r2, [r7, #6]
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	4413      	add	r3, r2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b218      	sxth	r0, r3
 80009c0:	88ba      	ldrh	r2, [r7, #4]
 80009c2:	8a3b      	ldrh	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b219      	sxth	r1, r3
 80009ca:	8a3b      	ldrh	r3, [r7, #16]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80009d2:	4413      	add	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	3301      	adds	r3, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b21a      	sxth	r2, r3
 80009dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80009de:	f000 f909 	bl	8000bf4 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 80009e2:	787b      	ldrb	r3, [r7, #1]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d02b      	beq.n	8000a44 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	8a3b      	ldrh	r3, [r7, #16]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b218      	sxth	r0, r3
 80009f6:	88ba      	ldrh	r2, [r7, #4]
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b219      	sxth	r1, r3
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a08:	4413      	add	r3, r2
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a14:	f000 f8ee 	bl	8000bf4 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000a18:	88fa      	ldrh	r2, [r7, #6]
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b218      	sxth	r0, r3
 8000a22:	88ba      	ldrh	r2, [r7, #4]
 8000a24:	8a3b      	ldrh	r3, [r7, #16]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b219      	sxth	r1, r3
 8000a2c:	8a3b      	ldrh	r3, [r7, #16]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a34:	4413      	add	r3, r2
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a40:	f000 f8d8 	bl	8000bf4 <ILI9341_drawFastVLine>
  while (x<y) {
 8000a44:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f6ff af75 	blt.w	800093c <fillCircleHelper+0x44>
    }
  }
}
 8000a52:	bf00      	nop
 8000a54:	371c      	adds	r7, #28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}

08000a5a <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000a5a:	b590      	push	{r4, r7, lr}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	4604      	mov	r4, r0
 8000a62:	4608      	mov	r0, r1
 8000a64:	4611      	mov	r1, r2
 8000a66:	461a      	mov	r2, r3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	80bb      	strh	r3, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
 8000a74:	4613      	mov	r3, r2
 8000a76:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 8000a78:	88ba      	ldrh	r2, [r7, #4]
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b219      	sxth	r1, r3
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	883b      	ldrh	r3, [r7, #0]
 8000a90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a94:	f000 f8ae 	bl	8000bf4 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8000a98:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aa0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2303      	movs	r3, #3
 8000aae:	f7ff ff23 	bl	80008f8 <fillCircleHelper>
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b089      	sub	sp, #36	; 0x24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4623      	mov	r3, r4
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4603      	mov	r3, r0
 8000ace:	80bb      	strh	r3, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000ad8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000adc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ae6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000aea:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af2:	1acb      	subs	r3, r1, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bfb8      	it	lt
 8000af8:	425b      	neglt	r3, r3
 8000afa:	429a      	cmp	r2, r3
 8000afc:	bfcc      	ite	gt
 8000afe:	2301      	movgt	r3, #1
 8000b00:	2300      	movle	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000b06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	833b      	strh	r3, [r7, #24]
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	8b3b      	ldrh	r3, [r7, #24]
 8000b18:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	82fb      	strh	r3, [r7, #22]
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	807b      	strh	r3, [r7, #2]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dd0b      	ble.n	8000b4a <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	82bb      	strh	r3, [r7, #20]
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	8abb      	ldrh	r3, [r7, #20]
 8000b3c:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	827b      	strh	r3, [r7, #18]
 8000b42:	883b      	ldrh	r3, [r7, #0]
 8000b44:	80bb      	strh	r3, [r7, #4]
 8000b46:	8a7b      	ldrh	r3, [r7, #18]
 8000b48:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000b54:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000b66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b6a:	0fda      	lsrs	r2, r3, #31
 8000b6c:	4413      	add	r3, r2
 8000b6e:	105b      	asrs	r3, r3, #1
 8000b70:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000b72:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	da02      	bge.n	8000b84 <ILI9341_drawLine+0xca>
    ystep = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	83bb      	strh	r3, [r7, #28]
 8000b82:	e02d      	b.n	8000be0 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 8000b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b88:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 8000b8a:	e029      	b.n	8000be0 <ILI9341_drawLine+0x126>
    if (steep) {
 8000b8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	88f9      	ldrh	r1, [r7, #6]
 8000b98:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe10 	bl	80007c0 <ILI9341_DrawPixel>
 8000ba0:	e005      	b.n	8000bae <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	88b9      	ldrh	r1, [r7, #4]
 8000ba6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe09 	bl	80007c0 <ILI9341_DrawPixel>
    }
    err -= dy;
 8000bae:	8bfa      	ldrh	r2, [r7, #30]
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000bb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	da09      	bge.n	8000bd4 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	8bbb      	ldrh	r3, [r7, #28]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000bca:	8bfa      	ldrh	r2, [r7, #30]
 8000bcc:	8a3b      	ldrh	r3, [r7, #16]
 8000bce:	4413      	add	r3, r2
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000be4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	ddcf      	ble.n	8000b8c <ILI9341_drawLine+0xd2>
    }
  }
}	
 8000bec:	bf00      	nop
 8000bee:	3724      	adds	r7, #36	; 0x24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	887b      	ldrh	r3, [r7, #2]
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b21c      	sxth	r4, r3
 8000c20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c2c:	883b      	ldrh	r3, [r7, #0]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	4623      	mov	r3, r4
 8000c32:	f7ff ff42 	bl	8000aba <ILI9341_drawLine>
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
	...

08000c40 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4604      	mov	r4, r0
 8000c48:	4608      	mov	r0, r1
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4623      	mov	r3, r4
 8000c50:	80fb      	strh	r3, [r7, #6]
 8000c52:	4603      	mov	r3, r0
 8000c54:	80bb      	strh	r3, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000c5e:	4b9a      	ldr	r3, [pc, #616]	; (8000ec8 <ILI9341_drawChar+0x288>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <ILI9341_drawChar+0x2e>
 8000c66:	4b98      	ldr	r3, [pc, #608]	; (8000ec8 <ILI9341_drawChar+0x288>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d121      	bne.n	8000cb2 <ILI9341_drawChar+0x72>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c72:	2bef      	cmp	r3, #239	; 0xef
 8000c74:	f300 8121 	bgt.w	8000eba <ILI9341_drawChar+0x27a>
 8000c78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c80:	f280 811b 	bge.w	8000eba <ILI9341_drawChar+0x27a>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000c84:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c88:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	440b      	add	r3, r1
 8000c96:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f2c0 810e 	blt.w	8000eba <ILI9341_drawChar+0x27a>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000c9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da23      	bge.n	8000cf8 <ILI9341_drawChar+0xb8>
    return;
 8000cb0:	e103      	b.n	8000eba <ILI9341_drawChar+0x27a>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000cb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cb6:	2bef      	cmp	r3, #239	; 0xef
 8000cb8:	f300 8101 	bgt.w	8000ebe <ILI9341_drawChar+0x27e>
 8000cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cc4:	f280 80fb 	bge.w	8000ebe <ILI9341_drawChar+0x27e>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000cc8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ccc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	440b      	add	r3, r1
 8000cda:	3b01      	subs	r3, #1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f2c0 80ee 	blt.w	8000ebe <ILI9341_drawChar+0x27e>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000ce2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4413      	add	r3, r2
 8000cee:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f2c0 80e4 	blt.w	8000ebe <ILI9341_drawChar+0x27e>
 8000cf6:	e000      	b.n	8000cfa <ILI9341_drawChar+0xba>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000cf8:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <ILI9341_drawChar+0x28c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f083 0301 	eor.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <ILI9341_drawChar+0xd4>
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2baf      	cmp	r3, #175	; 0xaf
 8000d0c:	d902      	bls.n	8000d14 <ILI9341_drawChar+0xd4>
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	3301      	adds	r3, #1
 8000d12:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e0c9      	b.n	8000eae <ILI9341_drawChar+0x26e>
    uint8_t line;
    if (i == 5) 
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d102      	bne.n	8000d28 <ILI9341_drawChar+0xe8>
      line = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73bb      	strb	r3, [r7, #14]
 8000d26:	e00b      	b.n	8000d40 <ILI9341_drawChar+0x100>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a65      	ldr	r2, [pc, #404]	; (8000ed0 <ILI9341_drawChar+0x290>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	737b      	strb	r3, [r7, #13]
 8000d44:	e0a8      	b.n	8000e98 <ILI9341_drawChar+0x258>
      if (line & 0x1) {
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d04b      	beq.n	8000de8 <ILI9341_drawChar+0x1a8>
        if (size == 1) // default size
 8000d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d110      	bne.n	8000d7a <ILI9341_drawChar+0x13a>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4413      	add	r3, r2
 8000d62:	b298      	uxth	r0, r3
 8000d64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	883a      	ldrh	r2, [r7, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fd24 	bl	80007c0 <ILI9341_DrawPixel>
 8000d78:	e085      	b.n	8000e86 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000d7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d96:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	461c      	mov	r4, r3
 8000da2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000daa:	441a      	add	r2, r3
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	461d      	mov	r5, r3
 8000dbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000dcc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000dd0:	fb01 f303 	mul.w	r3, r1, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	462a      	mov	r2, r5
 8000de0:	4621      	mov	r1, r4
 8000de2:	f7ff fd4f 	bl	8000884 <ILI9341_Fill_Rect>
 8000de6:	e04e      	b.n	8000e86 <ILI9341_drawChar+0x246>
        } 
      } else if (bg != color) {
 8000de8:	8c3a      	ldrh	r2, [r7, #32]
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d04a      	beq.n	8000e86 <ILI9341_drawChar+0x246>
        if (size == 1) // default size
 8000df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d110      	bne.n	8000e1a <ILI9341_drawChar+0x1da>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4413      	add	r3, r2
 8000e02:	b298      	uxth	r0, r3
 8000e04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	8c3a      	ldrh	r2, [r7, #32]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fcd4 	bl	80007c0 <ILI9341_DrawPixel>
 8000e18:	e035      	b.n	8000e86 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e36:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e3a:	fb01 f303 	mul.w	r3, r1, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	461c      	mov	r4, r3
 8000e42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	461d      	mov	r5, r3
 8000e5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e66:	441a      	add	r2, r3
 8000e68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e6c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000e70:	fb01 f303 	mul.w	r3, r1, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	8c3b      	ldrh	r3, [r7, #32]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	462a      	mov	r2, r5
 8000e80:	4621      	mov	r1, r4
 8000e82:	f7ff fcff 	bl	8000884 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000e8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	737b      	strb	r3, [r7, #13]
 8000e98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	f77f af52 	ble.w	8000d46 <ILI9341_drawChar+0x106>
  for (int8_t i=0; i<6; i++ ) {
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	f77f af31 	ble.w	8000d1a <ILI9341_drawChar+0xda>
 8000eb8:	e002      	b.n	8000ec0 <ILI9341_drawChar+0x280>
    return;
 8000eba:	bf00      	nop
 8000ebc:	e000      	b.n	8000ec0 <ILI9341_drawChar+0x280>
    return;
 8000ebe:	bf00      	nop
    }
  }
}
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000064 	.word	0x20000064
 8000ed0:	08002bf4 	.word	0x08002bf4

08000ed4 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	817b      	strh	r3, [r7, #10]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	813b      	strh	r3, [r7, #8]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	0052      	lsls	r2, r2, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	82fb      	strh	r3, [r7, #22]
 8000f04:	e01a      	b.n	8000f3c <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000f06:	8abb      	ldrh	r3, [r7, #20]
 8000f08:	8afa      	ldrh	r2, [r7, #22]
 8000f0a:	fb12 f303 	smulbb	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	897b      	ldrh	r3, [r7, #10]
 8000f12:	4413      	add	r3, r2
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b218      	sxth	r0, r3
 8000f18:	8afb      	ldrh	r3, [r7, #22]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	88fc      	ldrh	r4, [r7, #6]
 8000f22:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4623      	mov	r3, r4
 8000f32:	f7ff fe85 	bl	8000c40 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	82fb      	strh	r3, [r7, #22]
 8000f3c:	8afb      	ldrh	r3, [r7, #22]
 8000f3e:	2b27      	cmp	r3, #39	; 0x27
 8000f40:	d805      	bhi.n	8000f4e <ILI9341_printText+0x7a>
 8000f42:	8afb      	ldrh	r3, [r7, #22]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1db      	bne.n	8000f06 <ILI9341_printText+0x32>
	}
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
	...

08000f58 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d832      	bhi.n	8000fd0 <ILI9341_setRotation+0x78>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <ILI9341_setRotation+0x18>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f95 	.word	0x08000f95
 8000f78:	08000fa9 	.word	0x08000fa9
 8000f7c:	08000fbd 	.word	0x08000fbd
	{
		case 1:
			rotationNum = 1;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <ILI9341_setRotation+0x94>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000f86:	2036      	movs	r0, #54	; 0x36
 8000f88:	f7ff faa6 	bl	80004d8 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000f8c:	2088      	movs	r0, #136	; 0x88
 8000f8e:	f7ff fad7 	bl	8000540 <ILI9341_SendData>
			break;
 8000f92:	e027      	b.n	8000fe4 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <ILI9341_setRotation+0x94>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f7ff fa9c 	bl	80004d8 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000fa0:	2028      	movs	r0, #40	; 0x28
 8000fa2:	f7ff facd 	bl	8000540 <ILI9341_SendData>
			break;
 8000fa6:	e01d      	b.n	8000fe4 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <ILI9341_setRotation+0x94>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000fae:	2036      	movs	r0, #54	; 0x36
 8000fb0:	f7ff fa92 	bl	80004d8 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000fb4:	2048      	movs	r0, #72	; 0x48
 8000fb6:	f7ff fac3 	bl	8000540 <ILI9341_SendData>
			break;
 8000fba:	e013      	b.n	8000fe4 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <ILI9341_setRotation+0x94>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000fc2:	2036      	movs	r0, #54	; 0x36
 8000fc4:	f7ff fa88 	bl	80004d8 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000fc8:	20e8      	movs	r0, #232	; 0xe8
 8000fca:	f7ff fab9 	bl	8000540 <ILI9341_SendData>
			break;
 8000fce:	e009      	b.n	8000fe4 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <ILI9341_setRotation+0x94>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000fd6:	2036      	movs	r0, #54	; 0x36
 8000fd8:	f7ff fa7e 	bl	80004d8 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000fdc:	2088      	movs	r0, #136	; 0x88
 8000fde:	f7ff faaf 	bl	8000540 <ILI9341_SendData>
			break;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fc07 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 fa09 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 faa7 	bl	8001550 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001002:	f000 fa6f 	bl	80014e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin,LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <main+0xf8>)
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <main+0xf8>)
 8001018:	2220      	movs	r2, #32
 800101a:	4934      	ldr	r1, [pc, #208]	; (80010ec <main+0xfc>)
 800101c:	4834      	ldr	r0, [pc, #208]	; (80010f0 <main+0x100>)
 800101e:	f7ff fb0f 	bl	8000640 <ILI9341_Init>
  ILI9341_setRotation(0);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff ff98 	bl	8000f58 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_BLACK);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fbe9 	bl	8000800 <ILI9341_Fill>

  int startmenu_x = 50;
 800102e:	2332      	movs	r3, #50	; 0x32
 8001030:	607b      	str	r3, [r7, #4]
  int startmenu_y = 100;
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //menu page setup
	  ILI9341_printText("Start", startmenu_x, startmenu_y, COLOR_GREEN, COLOR_GREEN, 5);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b219      	sxth	r1, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b21a      	sxth	r2, r3
 800103e:	2305      	movs	r3, #5
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800104c:	4829      	ldr	r0, [pc, #164]	; (80010f4 <main+0x104>)
 800104e:	f7ff ff41 	bl	8000ed4 <ILI9341_printText>
	  HAL_Delay(500);
 8001052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001056:	f000 fc49 	bl	80018ec <HAL_Delay>
	  ILI9341_printText("Start", startmenu_x, startmenu_y, COLOR_BLACK, COLOR_BLACK, 5);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b219      	sxth	r1, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b21a      	sxth	r2, r3
 8001062:	2305      	movs	r3, #5
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	2300      	movs	r3, #0
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	4821      	ldr	r0, [pc, #132]	; (80010f4 <main+0x104>)
 800106e:	f7ff ff31 	bl	8000ed4 <ILI9341_printText>

	  ILI9341_printText("ScoreBoard", 50, 180, COLOR_GREEN, COLOR_RED, 2);
 8001072:	2302      	movs	r3, #2
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001080:	22b4      	movs	r2, #180	; 0xb4
 8001082:	2132      	movs	r1, #50	; 0x32
 8001084:	481c      	ldr	r0, [pc, #112]	; (80010f8 <main+0x108>)
 8001086:	f7ff ff25 	bl	8000ed4 <ILI9341_printText>
	  ILI9341_printText("Music", 50, 220, COLOR_GREEN, COLOR_RED, 2);
 800108a:	2302      	movs	r3, #2
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001098:	22dc      	movs	r2, #220	; 0xdc
 800109a:	2132      	movs	r1, #50	; 0x32
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <main+0x10c>)
 800109e:	f7ff ff19 	bl	8000ed4 <ILI9341_printText>
	  ILI9341_printText("Setting", 50, 260, COLOR_GREEN, COLOR_RED, 2);
 80010a2:	2302      	movs	r3, #2
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80010b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b4:	2132      	movs	r1, #50	; 0x32
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <main+0x110>)
 80010b8:	f7ff ff0c 	bl	8000ed4 <ILI9341_printText>

	  //test button and changes on screen
	  if ((GPIOA->IDR & GPIO_PIN_0) != (uint32_t)GPIO_PIN_RESET){
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <main+0x114>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0b6      	beq.n	8001036 <main+0x46>
		  ILI9341_Fill(COLOR_BLACK);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fb99 	bl	8000800 <ILI9341_Fill>
		  while ((GPIOA->IDR & GPIO_PIN_0) == (uint32_t)GPIO_PIN_RESET){
 80010ce:	e001      	b.n	80010d4 <main+0xe4>
  //			  ILI9341_printText("ScoreBoard", 20, 50, COLOR_GREEN, COLOR_RED, 3);
  //			  ILI9341_printText("1. 1234", 50, 90, COLOR_GREEN, COLOR_GREEN, 2);
			  GamePage();
 80010d0:	f000 f81a 	bl	8001108 <GamePage>
		  while ((GPIOA->IDR & GPIO_PIN_0) == (uint32_t)GPIO_PIN_RESET){
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <main+0x114>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f7      	beq.n	80010d0 <main+0xe0>
		  }
		  ILI9341_Fill(COLOR_BLACK);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fb8d 	bl	8000800 <ILI9341_Fill>
	  ILI9341_printText("Start", startmenu_x, startmenu_y, COLOR_GREEN, COLOR_GREEN, 5);
 80010e6:	e7a6      	b.n	8001036 <main+0x46>
 80010e8:	40020800 	.word	0x40020800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	200000d8 	.word	0x200000d8
 80010f4:	08002bd0 	.word	0x08002bd0
 80010f8:	08002bd8 	.word	0x08002bd8
 80010fc:	08002be4 	.word	0x08002be4
 8001100:	08002bec 	.word	0x08002bec
 8001104:	40020000 	.word	0x40020000

08001108 <GamePage>:
	}
	/* USER CODE END 3 */
  }


  void GamePage (void){
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08f      	sub	sp, #60	; 0x3c
 800110c:	af02      	add	r7, sp, #8
	int cycle_tracker = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	int cycle = circle[0];
 8001112:	4b46      	ldr	r3, [pc, #280]	; (800122c <GamePage+0x124>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
	int start_cycle_x = 90;
 8001118:	235a      	movs	r3, #90	; 0x5a
 800111a:	61bb      	str	r3, [r7, #24]
	int start_cycle_y = 25;
 800111c:	2319      	movs	r3, #25
 800111e:	617b      	str	r3, [r7, #20]

	int recta_tracker = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
	int recta = rectan[0];
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <GamePage+0x128>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	623b      	str	r3, [r7, #32]
	int start_recta_x0 = 110;
 800112a:	236e      	movs	r3, #110	; 0x6e
 800112c:	613b      	str	r3, [r7, #16]
	int start_recta_y0 = 15;
 800112e:	230f      	movs	r3, #15
 8001130:	60fb      	str	r3, [r7, #12]
	int start_recta_x1 = 130;
 8001132:	2382      	movs	r3, #130	; 0x82
 8001134:	60bb      	str	r3, [r7, #8]
	int start_recta_y1 = 35;
 8001136:	2323      	movs	r3, #35	; 0x23
 8001138:	607b      	str	r3, [r7, #4]

	for (int i = 1; i < strlen(circle); i++){
 800113a:	2301      	movs	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e157      	b.n	80013f0 <GamePage+0x2e8>
		if (circle[i]){
 8001140:	4a3a      	ldr	r2, [pc, #232]	; (800122c <GamePage+0x124>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05a      	beq.n	8001202 <GamePage+0xfa>
			if (circle[i] == 2 && circle[i-1] != 2){
 800114c:	4a37      	ldr	r2, [pc, #220]	; (800122c <GamePage+0x124>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d108      	bne.n	800116a <GamePage+0x62>
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	3b01      	subs	r3, #1
 800115c:	4a33      	ldr	r2, [pc, #204]	; (800122c <GamePage+0x124>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d002      	beq.n	800116a <GamePage+0x62>
				cycle_tracker = i;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	e011      	b.n	800118e <GamePage+0x86>
			}
			else if (circle[i] == 1 && circle[i-1] != 1){
 800116a:	4a30      	ldr	r2, [pc, #192]	; (800122c <GamePage+0x124>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10b      	bne.n	800118e <GamePage+0x86>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b01      	subs	r3, #1
 800117a:	4a2c      	ldr	r2, [pc, #176]	; (800122c <GamePage+0x124>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <GamePage+0x86>
				cycle = i - cycle_tracker;
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
				cycle_tracker = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			ILI9341_fillCircle(start_cycle_x - 3 * cycle,start_cycle_y + 15 * cycle, 10, COLOR_RED);
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29a      	uxth	r2, r3
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4413      	add	r3, r2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b218      	sxth	r0, r3
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4413      	add	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b219      	sxth	r1, r3
 80011ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011be:	220a      	movs	r2, #10
 80011c0:	f7ff fc4b 	bl	8000a5a <ILI9341_fillCircle>
			ILI9341_fillCircle(start_cycle_x - 3 * (cycle - cycle_tracker),start_cycle_y + 15 * (cycle-cycle_tracker), 10, COLOR_RED);
 80011c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b218      	sxth	r0, r3
 80011de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b219      	sxth	r1, r3
 80011f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011fc:	220a      	movs	r2, #10
 80011fe:	f7ff fc2c 	bl	8000a5a <ILI9341_fillCircle>
		}

		if (rectan[i]){
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <GamePage+0x128>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d068      	beq.n	80012e0 <GamePage+0x1d8>
			if (rectan[i] == 2 && rectan[i-1] != 2){
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <GamePage+0x128>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d10c      	bne.n	8001234 <GamePage+0x12c>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <GamePage+0x128>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d006      	beq.n	8001234 <GamePage+0x12c>
				recta_tracker = i;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	e015      	b.n	8001258 <GamePage+0x150>
 800122c:	20000004 	.word	0x20000004
 8001230:	20000020 	.word	0x20000020
			}
			else if (rectan[i] == 1 && rectan[i-1] != 1){
 8001234:	4a74      	ldr	r2, [pc, #464]	; (8001408 <GamePage+0x300>)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10b      	bne.n	8001258 <GamePage+0x150>
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	3b01      	subs	r3, #1
 8001244:	4a70      	ldr	r2, [pc, #448]	; (8001408 <GamePage+0x300>)
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <GamePage+0x150>
				recta = i - recta_tracker;
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	623b      	str	r3, [r7, #32]
				recta_tracker = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
			}
			ILI9341_Fill_Rect(start_recta_x0 - 2 * recta,start_recta_y0 + 15 * recta, start_recta_x1 - 2 * recta, start_recta_y1 + 15 * recta, COLOR_NAVY);
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4618      	mov	r0, r3
 8001262:	6a3a      	ldr	r2, [r7, #32]
 8001264:	4613      	mov	r3, r2
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	1a9a      	subs	r2, r3, r2
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	4619      	mov	r1, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	461c      	mov	r4, r3
 800127a:	6a3a      	ldr	r2, [r7, #32]
 800127c:	4613      	mov	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	1a9a      	subs	r2, r3, r2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	461a      	mov	r2, r3
 8001288:	230f      	movs	r3, #15
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	4622      	mov	r2, r4
 8001290:	f7ff faf8 	bl	8000884 <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(start_recta_x0 - 2 * (recta-recta_tracker),start_recta_y0 + 15 * (recta-recta_tracker), start_recta_x1 - 2 * (recta-recta_tracker), start_recta_y1 + 15 * (recta-recta_tracker), COLOR_NAVY);
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	6a3a      	ldr	r2, [r7, #32]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	4613      	mov	r3, r2
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	1a9a      	subs	r2, r3, r2
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	461c      	mov	r4, r3
 80012c2:	6a3a      	ldr	r2, [r7, #32]
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	1ad2      	subs	r2, r2, r3
 80012c8:	4613      	mov	r3, r2
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	1a9a      	subs	r2, r3, r2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	461a      	mov	r2, r3
 80012d4:	230f      	movs	r3, #15
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	4622      	mov	r2, r4
 80012dc:	f7ff fad2 	bl	8000884 <ILI9341_Fill_Rect>
////				ILI9341_Fill_Rect(start_recta_x0,start_recta_y0, start_recta_x1, start_recta_y1, COLOR_BLACK);
//			start_recta_x0 -= 2;
//			start_recta_y0 += 10;
//			start_recta_x1 -= 2;
//			start_recta_y1 += 10;
		HAL_Delay(200);
 80012e0:	20c8      	movs	r0, #200	; 0xc8
 80012e2:	f000 fb03 	bl	80018ec <HAL_Delay>
		//clean screen
		ILI9341_fillCircle(start_cycle_x - 3 * cycle,start_cycle_y + 15 * cycle, 10, COLOR_BLACK);
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b218      	sxth	r0, r3
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	b219      	sxth	r1, r3
 8001312:	2300      	movs	r3, #0
 8001314:	220a      	movs	r2, #10
 8001316:	f7ff fba0 	bl	8000a5a <ILI9341_fillCircle>
		ILI9341_fillCircle(start_cycle_x - 3 * (cycle - cycle_tracker),start_cycle_y + 15 * (cycle-cycle_tracker), 10, COLOR_BLACK);
 800131a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	b29a      	uxth	r2, r3
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	b218      	sxth	r0, r3
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29a      	uxth	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	b219      	sxth	r1, r3
 800134e:	2300      	movs	r3, #0
 8001350:	220a      	movs	r2, #10
 8001352:	f7ff fb82 	bl	8000a5a <ILI9341_fillCircle>
		ILI9341_Fill_Rect(start_recta_x0 - 2 * recta,start_recta_y0 + 15 * recta, start_recta_x1 - 2 * recta, start_recta_y1 + 15 * recta, COLOR_BLACK);
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	6a3a      	ldr	r2, [r7, #32]
 8001362:	4613      	mov	r3, r2
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	1a9a      	subs	r2, r3, r2
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	4619      	mov	r1, r3
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	461c      	mov	r4, r3
 8001378:	6a3a      	ldr	r2, [r7, #32]
 800137a:	4613      	mov	r3, r2
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	1a9a      	subs	r2, r3, r2
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	461a      	mov	r2, r3
 8001386:	2300      	movs	r3, #0
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	4622      	mov	r2, r4
 800138e:	f7ff fa79 	bl	8000884 <ILI9341_Fill_Rect>
		ILI9341_Fill_Rect(start_recta_x0 - 2 * (recta-recta_tracker),start_recta_y0 + 15 * (recta-recta_tracker), start_recta_x1 - 2 * (recta-recta_tracker), start_recta_y1 + 15 * (recta-recta_tracker), COLOR_BLACK);
 8001392:	6a3a      	ldr	r2, [r7, #32]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	6a3a      	ldr	r2, [r7, #32]
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	1ad2      	subs	r2, r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	1a9a      	subs	r2, r3, r2
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	461c      	mov	r4, r3
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	1a9a      	subs	r2, r3, r2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	461a      	mov	r2, r3
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4613      	mov	r3, r2
 80013d8:	4622      	mov	r2, r4
 80013da:	f7ff fa53 	bl	8000884 <ILI9341_Fill_Rect>

		cycle += 1;
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	3301      	adds	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
		recta++;
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	3301      	adds	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < strlen(circle); i++){
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <GamePage+0x304>)
 80013f2:	f7fe fee9 	bl	80001c8 <strlen>
 80013f6:	4602      	mov	r2, r0
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f63f aea0 	bhi.w	8001140 <GamePage+0x38>
	}
}
 8001400:	bf00      	nop
 8001402:	3734      	adds	r7, #52	; 0x34
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	20000020 	.word	0x20000020
 800140c:	20000004 	.word	0x20000004

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	; 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2230      	movs	r2, #48	; 0x30
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fbc1 	bl	8002ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <SystemClock_Config+0xcc>)
 800143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <SystemClock_Config+0xcc>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <SystemClock_Config+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <SystemClock_Config+0xd0>)
 800145a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <SystemClock_Config+0xd0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001474:	2310      	movs	r3, #16
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	2302      	movs	r3, #2
 800147a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001480:	2308      	movs	r3, #8
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800148c:	2307      	movs	r3, #7
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fce5 	bl	8001e64 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a0:	f000 f8cc 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2302      	movs	r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2104      	movs	r1, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 ff3e 	bl	8002344 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ce:	f000 f8b5 	bl	800163c <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	; 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_SPI1_Init+0x64>)
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <MX_SPI1_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_SPI1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_SPI1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_SPI1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_SPI1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001514:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SPI1_Init+0x64>)
 8001530:	220a      	movs	r2, #10
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_SPI1_Init+0x64>)
 8001536:	f001 f8c3 	bl	80026c0 <HAL_SPI_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001540:	f000 f87c 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000d8 	.word	0x200000d8
 800154c:	40013000 	.word	0x40013000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <MX_GPIO_Init+0xdc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <MX_GPIO_Init+0xdc>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_GPIO_Init+0xdc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_GPIO_Init+0xdc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a28      	ldr	r2, [pc, #160]	; (800162c <MX_GPIO_Init+0xdc>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_GPIO_Init+0xdc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_GPIO_Init+0xdc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <MX_GPIO_Init+0xdc>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_GPIO_Init+0xdc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015c0:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_GPIO_Init+0xe0>)
 80015c2:	f000 fc35 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2120      	movs	r1, #32
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <MX_GPIO_Init+0xe4>)
 80015cc:	f000 fc30 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80015d0:	2301      	movs	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_GPIO_Init+0xe8>)
 80015e4:	f000 fa8a 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	480b      	ldr	r0, [pc, #44]	; (8001630 <MX_GPIO_Init+0xe0>)
 8001602:	f000 fa7b 	bl	8001afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001606:	2320      	movs	r3, #32
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_GPIO_Init+0xe4>)
 800161e:	f000 fa6d 	bl	8001afc <HAL_GPIO_Init>

}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800
 8001634:	40020400 	.word	0x40020400
 8001638:	40020000 	.word	0x40020000

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168a:	2007      	movs	r0, #7
 800168c:	f000 fa02 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_SPI_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f6:	23e0      	movs	r3, #224	; 0xe0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_SPI_MspInit+0x8c>)
 8001712:	f000 f9f3 	bl	8001afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 f894 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <SystemInit+0x28>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <SystemInit+0x28>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SystemInit+0x28>)
 800179e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a2:	609a      	str	r2, [r3, #8]
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ba:	e003      	b.n	80017c4 <LoopCopyDataInit>

080017bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017c2:	3104      	adds	r1, #4

080017c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017cc:	d3f6      	bcc.n	80017bc <CopyDataInit>
  ldr  r2, =_sbss
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017d0:	e002      	b.n	80017d8 <LoopFillZerobss>

080017d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017d4:	f842 3b04 	str.w	r3, [r2], #4

080017d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017dc:	d3f9      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017de:	f7ff ffd3 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f001 f9b1 	bl	8002b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fc03 	bl	8000ff0 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017f0:	08003114 	.word	0x08003114
  ldr  r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017f8:	20000048 	.word	0x20000048
  ldr  r2, =_sbss
 80017fc:	20000048 	.word	0x20000048
  ldr  r3, = _ebss
 8001800:	20000134 	.word	0x20000134

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f92f 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff ff06 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f939 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f90f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000003c 	.word	0x2000003c
 80018a4:	20000044 	.word	0x20000044
 80018a8:	20000040 	.word	0x20000040

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000044 	.word	0x20000044
 80018d0:	20000130 	.word	0x20000130

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000130 	.word	0x20000130

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_Delay+0x40>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000044 	.word	0x20000044

08001930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800195c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <__NVIC_SetPriorityGrouping+0x44>)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60d3      	str	r3, [r2, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff47 	bl	8001930 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff5c 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb0 	bl	8001a50 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e16b      	b.n	8001df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 815a 	bne.w	8001dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d00b      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0xfc>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b12      	cmp	r3, #18
 8001bf6:	d123      	bne.n	8001c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0203 	and.w	r2, r3, #3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80b4 	beq.w	8001dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_GPIO_Init+0x308>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x310>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <HAL_GPIO_Init+0x226>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_GPIO_Init+0x314>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x222>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x318>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x21e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_GPIO_Init+0x31c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x21a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_GPIO_Init+0x320>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x216>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4c      	ldr	r2, [pc, #304]	; (8001e20 <HAL_GPIO_Init+0x324>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x212>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4b      	ldr	r2, [pc, #300]	; (8001e24 <HAL_GPIO_Init+0x328>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x20a>
 8001d02:	2307      	movs	r3, #7
 8001d04:	e00e      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d06:	2308      	movs	r3, #8
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x228>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4934      	ldr	r1, [pc, #208]	; (8001e08 <HAL_GPIO_Init+0x30c>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_GPIO_Init+0x330>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae90 	bls.w	8001b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40021c00 	.word	0x40021c00
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e25b      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d075      	beq.n	8001f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e82:	4ba3      	ldr	r3, [pc, #652]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4ba0      	ldr	r3, [pc, #640]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b9d      	ldr	r3, [pc, #628]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b99      	ldr	r3, [pc, #612]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x108>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e236      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x74>
 8001eca:	4b91      	ldr	r3, [pc, #580]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b8b      	ldr	r3, [pc, #556]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a8a      	ldr	r2, [pc, #552]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a87      	ldr	r2, [pc, #540]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xb0>
 8001efc:	4b84      	ldr	r3, [pc, #528]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a83      	ldr	r2, [pc, #524]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a80      	ldr	r2, [pc, #512]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fcda 	bl	80018d4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fcd6 	bl	80018d4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e1fb      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xc0>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fcc6 	bl	80018d4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fcc2 	bl	80018d4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1e7      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b6c      	ldr	r3, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xe8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7a:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b62      	ldr	r3, [pc, #392]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1bb      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4952      	ldr	r1, [pc, #328]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x2b0>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff fc7b 	bl	80018d4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff fc77 	bl	80018d4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e19c      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b43      	ldr	r3, [pc, #268]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4940      	ldr	r1, [pc, #256]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x2b0>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff fc5a 	bl	80018d4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff fc56 	bl	80018d4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e17b      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d030      	beq.n	80020b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fc3a 	bl	80018d4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fc36 	bl	80018d4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e15b      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x200>
 8002082:	e015      	b.n	80020b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_OscConfig+0x2b4>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff fc23 	bl	80018d4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff fc1f 	bl	80018d4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e144      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a0 	beq.w	80021fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_OscConfig+0x2b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d121      	bne.n	800213e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCC_OscConfig+0x2b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_RCC_OscConfig+0x2b8>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7ff fbe5 	bl	80018d4 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	e011      	b.n	8002132 <HAL_RCC_OscConfig+0x2ce>
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	42470000 	.word	0x42470000
 8002118:	42470e80 	.word	0x42470e80
 800211c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7ff fbd8 	bl	80018d4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0fd      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b81      	ldr	r3, [pc, #516]	; (8002338 <HAL_RCC_OscConfig+0x4d4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x2f0>
 8002146:	4b7d      	ldr	r3, [pc, #500]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a7c      	ldr	r2, [pc, #496]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x32a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x312>
 800215c:	4b77      	ldr	r3, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	4a76      	ldr	r2, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6713      	str	r3, [r2, #112]	; 0x70
 8002168:	4b74      	ldr	r3, [pc, #464]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a73      	ldr	r2, [pc, #460]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x32a>
 8002176:	4b71      	ldr	r3, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a70      	ldr	r2, [pc, #448]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002186:	4a6d      	ldr	r2, [pc, #436]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff fb9d 	bl	80018d4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fb99 	bl	80018d4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0bc      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x33a>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fb87 	bl	80018d4 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fb83 	bl	80018d4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0a6      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a51      	ldr	r2, [pc, #324]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8092 	beq.w	800232c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002208:	4b4c      	ldr	r3, [pc, #304]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d05c      	beq.n	80022ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d141      	bne.n	80022a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_RCC_OscConfig+0x4dc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fb57 	bl	80018d4 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fb53 	bl	80018d4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e078      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	4b3f      	ldr	r3, [pc, #252]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69da      	ldr	r2, [r3, #28]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	4933      	ldr	r1, [pc, #204]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_OscConfig+0x4dc>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fb2c 	bl	80018d4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff fb28 	bl	80018d4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e04d      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x41c>
 800229e:	e045      	b.n	800232c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x4dc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fb15 	bl	80018d4 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff fb11 	bl	80018d4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e036      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x44a>
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e029      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d115      	bne.n	8002328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d106      	bne.n	8002328 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000
 800233c:	40023800 	.word	0x40023800
 8002340:	42470060 	.word	0x42470060

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff fa4e 	bl	80018d4 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff fa4a 	bl	80018d4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4601      	mov	r1, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	fa21 f303 	lsr.w	r3, r1, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f9ae 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	080030f4 	.word	0x080030f4
 8002508:	2000003c 	.word	0x2000003c
 800250c:	20000040 	.word	0x20000040

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d007      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x32>
 8002532:	2b08      	cmp	r3, #8
 8002534:	d008      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x38>
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 80b4 	bne.w	80026a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800253e:	60bb      	str	r3, [r7, #8]
       break;
 8002540:	e0b3      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002544:	60bb      	str	r3, [r7, #8]
      break;
 8002546:	e0b0      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002550:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d04a      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	f04f 0400 	mov.w	r4, #0
 8002568:	f240 11ff 	movw	r1, #511	; 0x1ff
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea03 0501 	and.w	r5, r3, r1
 8002574:	ea04 0602 	and.w	r6, r4, r2
 8002578:	4629      	mov	r1, r5
 800257a:	4632      	mov	r2, r6
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	0154      	lsls	r4, r2, #5
 8002586:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800258a:	014b      	lsls	r3, r1, #5
 800258c:	4619      	mov	r1, r3
 800258e:	4622      	mov	r2, r4
 8002590:	1b49      	subs	r1, r1, r5
 8002592:	eb62 0206 	sbc.w	r2, r2, r6
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f04f 0400 	mov.w	r4, #0
 800259e:	0194      	lsls	r4, r2, #6
 80025a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025a4:	018b      	lsls	r3, r1, #6
 80025a6:	1a5b      	subs	r3, r3, r1
 80025a8:	eb64 0402 	sbc.w	r4, r4, r2
 80025ac:	f04f 0100 	mov.w	r1, #0
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	00e2      	lsls	r2, r4, #3
 80025b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025ba:	00d9      	lsls	r1, r3, #3
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	195b      	adds	r3, r3, r5
 80025c2:	eb44 0406 	adc.w	r4, r4, r6
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	0262      	lsls	r2, r4, #9
 80025d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025d4:	0259      	lsls	r1, r3, #9
 80025d6:	460b      	mov	r3, r1
 80025d8:	4614      	mov	r4, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	4621      	mov	r1, r4
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	f7fd fdf6 	bl	80001d8 <__aeabi_uldivmod>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e049      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	ea03 0501 	and.w	r5, r3, r1
 800260a:	ea04 0602 	and.w	r6, r4, r2
 800260e:	4629      	mov	r1, r5
 8002610:	4632      	mov	r2, r6
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	f04f 0400 	mov.w	r4, #0
 800261a:	0154      	lsls	r4, r2, #5
 800261c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002620:	014b      	lsls	r3, r1, #5
 8002622:	4619      	mov	r1, r3
 8002624:	4622      	mov	r2, r4
 8002626:	1b49      	subs	r1, r1, r5
 8002628:	eb62 0206 	sbc.w	r2, r2, r6
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	0194      	lsls	r4, r2, #6
 8002636:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800263a:	018b      	lsls	r3, r1, #6
 800263c:	1a5b      	subs	r3, r3, r1
 800263e:	eb64 0402 	sbc.w	r4, r4, r2
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	00e2      	lsls	r2, r4, #3
 800264c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002650:	00d9      	lsls	r1, r3, #3
 8002652:	460b      	mov	r3, r1
 8002654:	4614      	mov	r4, r2
 8002656:	195b      	adds	r3, r3, r5
 8002658:	eb44 0406 	adc.w	r4, r4, r6
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	02a2      	lsls	r2, r4, #10
 8002666:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800266a:	0299      	lsls	r1, r3, #10
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	4618      	mov	r0, r3
 8002672:	4621      	mov	r1, r4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f04f 0400 	mov.w	r4, #0
 800267a:	461a      	mov	r2, r3
 800267c:	4623      	mov	r3, r4
 800267e:	f7fd fdab 	bl	80001d8 <__aeabi_uldivmod>
 8002682:	4603      	mov	r3, r0
 8002684:	460c      	mov	r4, r1
 8002686:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	60bb      	str	r3, [r7, #8]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026a6:	60bb      	str	r3, [r7, #8]
      break;
 80026a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026aa:	68bb      	ldr	r3, [r7, #8]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b4:	40023800 	.word	0x40023800
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e056      	b.n	8002780 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fe ffd5 	bl	800169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002708:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	ea42 0103 	orr.w	r1, r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	f003 0104 	and.w	r1, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Transmit+0x22>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e11e      	b.n	80029e8 <HAL_SPI_Transmit+0x260>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b2:	f7ff f88f 	bl	80018d4 <HAL_GetTick>
 80027b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d002      	beq.n	80027ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027cc:	e103      	b.n	80029d6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_SPI_Transmit+0x52>
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027de:	e0fa      	b.n	80029d6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002826:	d107      	bne.n	8002838 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d007      	beq.n	8002856 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285e:	d14b      	bne.n	80028f8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_SPI_Transmit+0xe6>
 8002868:	8afb      	ldrh	r3, [r7, #22]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d13e      	bne.n	80028ec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	1c9a      	adds	r2, r3, #2
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002892:	e02b      	b.n	80028ec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d112      	bne.n	80028c8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80028c6:	e011      	b.n	80028ec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c8:	f7ff f804 	bl	80018d4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d803      	bhi.n	80028e0 <HAL_SPI_Transmit+0x158>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Transmit+0x15e>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028ea:	e074      	b.n	80029d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ce      	bne.n	8002894 <HAL_SPI_Transmit+0x10c>
 80028f6:	e04c      	b.n	8002992 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_SPI_Transmit+0x17e>
 8002900:	8afb      	ldrh	r3, [r7, #22]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d140      	bne.n	8002988 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800292c:	e02c      	b.n	8002988 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d113      	bne.n	8002964 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	330c      	adds	r3, #12
 8002946:	7812      	ldrb	r2, [r2, #0]
 8002948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	86da      	strh	r2, [r3, #54]	; 0x36
 8002962:	e011      	b.n	8002988 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002964:	f7fe ffb6 	bl	80018d4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d803      	bhi.n	800297c <HAL_SPI_Transmit+0x1f4>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d102      	bne.n	8002982 <HAL_SPI_Transmit+0x1fa>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002986:	e026      	b.n	80029d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1cd      	bne.n	800292e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f894 	bl	8002ac4 <SPI_EndRxTxTransaction>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	77fb      	strb	r3, [r7, #31]
 80029d2:	e000      	b.n	80029d6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80029d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a00:	e04c      	b.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d048      	beq.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a0a:	f7fe ff63 	bl	80018d4 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d902      	bls.n	8002a20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d13d      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a38:	d111      	bne.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a42:	d004      	beq.n	8002a4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d107      	bne.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a66:	d10f      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e00f      	b.n	8002abc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d1a3      	bne.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <SPI_EndRxTxTransaction+0x7c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <SPI_EndRxTxTransaction+0x80>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0d5b      	lsrs	r3, r3, #21
 8002adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aee:	d112      	bne.n	8002b16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff ff78 	bl	80029f0 <SPI_WaitFlagStateUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e00f      	b.n	8002b36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d0f2      	beq.n	8002b16 <SPI_EndRxTxTransaction+0x52>
 8002b30:	e000      	b.n	8002b34 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b32:	bf00      	nop
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000003c 	.word	0x2000003c
 8002b44:	165e9f81 	.word	0x165e9f81

08002b48 <__libc_init_array>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4e0d      	ldr	r6, [pc, #52]	; (8002b80 <__libc_init_array+0x38>)
 8002b4c:	4c0d      	ldr	r4, [pc, #52]	; (8002b84 <__libc_init_array+0x3c>)
 8002b4e:	1ba4      	subs	r4, r4, r6
 8002b50:	10a4      	asrs	r4, r4, #2
 8002b52:	2500      	movs	r5, #0
 8002b54:	42a5      	cmp	r5, r4
 8002b56:	d109      	bne.n	8002b6c <__libc_init_array+0x24>
 8002b58:	4e0b      	ldr	r6, [pc, #44]	; (8002b88 <__libc_init_array+0x40>)
 8002b5a:	4c0c      	ldr	r4, [pc, #48]	; (8002b8c <__libc_init_array+0x44>)
 8002b5c:	f000 f82c 	bl	8002bb8 <_init>
 8002b60:	1ba4      	subs	r4, r4, r6
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	2500      	movs	r5, #0
 8002b66:	42a5      	cmp	r5, r4
 8002b68:	d105      	bne.n	8002b76 <__libc_init_array+0x2e>
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b70:	4798      	blx	r3
 8002b72:	3501      	adds	r5, #1
 8002b74:	e7ee      	b.n	8002b54 <__libc_init_array+0xc>
 8002b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b7a:	4798      	blx	r3
 8002b7c:	3501      	adds	r5, #1
 8002b7e:	e7f2      	b.n	8002b66 <__libc_init_array+0x1e>
 8002b80:	0800310c 	.word	0x0800310c
 8002b84:	0800310c 	.word	0x0800310c
 8002b88:	0800310c 	.word	0x0800310c
 8002b8c:	08003110 	.word	0x08003110

08002b90 <memcpy>:
 8002b90:	b510      	push	{r4, lr}
 8002b92:	1e43      	subs	r3, r0, #1
 8002b94:	440a      	add	r2, r1
 8002b96:	4291      	cmp	r1, r2
 8002b98:	d100      	bne.n	8002b9c <memcpy+0xc>
 8002b9a:	bd10      	pop	{r4, pc}
 8002b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ba4:	e7f7      	b.n	8002b96 <memcpy+0x6>

08002ba6 <memset>:
 8002ba6:	4402      	add	r2, r0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <memset+0xa>
 8002bae:	4770      	bx	lr
 8002bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb4:	e7f9      	b.n	8002baa <memset+0x4>
	...

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
