
Glove.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f36c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800f4f4  0800f4f4  0001f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc1c  0800fc1c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc1c  0800fc1c  0001fc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc24  0800fc24  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc24  0800fc24  0001fc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc28  0800fc28  0001fc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800fc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f8  2000009c  0800fcc8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002294  0800fcc8  00022294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fea3  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000058e3  00000000  00000000  0004ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  00055858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f0  00000000  00000000  00057478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002895b  00000000  00000000  00058e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e08d  00000000  00000000  000817c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d529e  00000000  00000000  0009f850  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174aee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ec  00000000  00000000  00174b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f4dc 	.word	0x0800f4dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800f4dc 	.word	0x0800f4dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004de:	f107 020c 	add.w	r2, r7, #12
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	2194      	movs	r1, #148	; 0x94
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <write_register+0x30>)
 80004ec:	f004 f896 	bl	800461c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000b8 	.word	0x200000b8

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050c:	f107 020c 	add.w	r2, r7, #12
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2301      	movs	r3, #1
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <read_register+0x3c>)
 800051a:	f004 f87f 	bl	800461c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <read_register+0x3c>)
 800052a:	f004 f975 	bl	8004818 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b8 	.word	0x200000b8

0800053c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800053c:	b084      	sub	sp, #16
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	f107 0c10 	add.w	ip, r7, #16
 8000548:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <CS43_Init+0x200>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000554:	4b79      	ldr	r3, [pc, #484]	; (800073c <CS43_Init+0x200>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	69da      	ldr	r2, [r3, #28]
 800055a:	4b78      	ldr	r3, [pc, #480]	; (800073c <CS43_Init+0x200>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000562:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	4875      	ldr	r0, [pc, #468]	; (8000740 <CS43_Init+0x204>)
 800056a:	f002 fa15 	bl	8002998 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056e:	4b75      	ldr	r3, [pc, #468]	; (8000744 <CS43_Init+0x208>)
 8000570:	4618      	mov	r0, r3
 8000572:	f107 0110 	add.w	r1, r7, #16
 8000576:	2354      	movs	r3, #84	; 0x54
 8000578:	461a      	mov	r2, r3
 800057a:	f00e fee1 	bl	800f340 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057e:	2301      	movs	r3, #1
 8000580:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ff9e 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	b2db      	uxtb	r3, r3
 8000598:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800059a:	797b      	ldrb	r3, [r7, #5]
 800059c:	f043 030c 	orr.w	r3, r3, #12
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	f043 0303 	orr.w	r3, r3, #3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	3301      	adds	r3, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	2004      	movs	r0, #4
 80005b6:	f7ff ff87 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ff7f 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f7ff ff94 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	f023 0310 	bic.w	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	f043 0303 	orr.w	r3, r3, #3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	3301      	adds	r3, #1
 800061e:	4619      	mov	r1, r3
 8000620:	2006      	movs	r0, #6
 8000622:	f7ff ff51 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	3301      	adds	r3, #1
 800062a:	4619      	mov	r1, r3
 800062c:	2008      	movs	r0, #8
 800062e:	f7ff ff65 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	3301      	adds	r3, #1
 800064a:	4619      	mov	r1, r3
 800064c:	2008      	movs	r0, #8
 800064e:	f7ff ff3b 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	3301      	adds	r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	2009      	movs	r0, #9
 800065a:	f7ff ff4f 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	f023 030f 	bic.w	r3, r3, #15
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000668:	797b      	ldrb	r3, [r7, #5]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	3301      	adds	r3, #1
 8000676:	4619      	mov	r1, r3
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ff25 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	3301      	adds	r3, #1
 8000682:	4619      	mov	r1, r3
 8000684:	200e      	movs	r0, #14
 8000686:	f7ff ff39 	bl	80004fc <read_register>
	if(outputMode == MODE_ANALOG)
 800068a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068e:	2b01      	cmp	r3, #1
 8000690:	d119      	bne.n	80006c6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000692:	797b      	ldrb	r3, [r7, #5]
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b2db      	uxtb	r3, r3
 800069a:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f023 0320 	bic.w	r3, r3, #32
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0310 	bic.w	r3, r3, #16
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0308 	bic.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
 80006c4:	e005      	b.n	80006d2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ce:	2302      	movs	r3, #2
 80006d0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	200e      	movs	r0, #14
 80006da:	f7ff fef5 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	3301      	adds	r3, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	200f      	movs	r0, #15
 80006e6:	f7ff ff09 	bl	80004fc <read_register>
	iData[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff fee7 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2014      	movs	r0, #20
 8000706:	f7ff fedf 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	3301      	adds	r3, #1
 800070e:	4619      	mov	r1, r3
 8000710:	2015      	movs	r0, #21
 8000712:	f7ff fed9 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	3301      	adds	r3, #1
 800071a:	4619      	mov	r1, r3
 800071c:	201a      	movs	r0, #26
 800071e:	f7ff fed3 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	3301      	adds	r3, #1
 8000726:	4619      	mov	r1, r3
 8000728:	201b      	movs	r0, #27
 800072a:	f7ff fecd 	bl	80004c8 <write_register>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000738:	b004      	add	sp, #16
 800073a:	4770      	bx	lr
 800073c:	20001740 	.word	0x20001740
 8000740:	40020c00 	.word	0x40020c00
 8000744:	200000b8 	.word	0x200000b8

08000748 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d82b      	bhi.n	80007b0 <CS43_Enable_RightLeft+0x68>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <CS43_Enable_RightLeft+0x18>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000771 	.word	0x08000771
 8000764:	08000781 	.word	0x08000781
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
			break;
 800077e:	e018      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e010      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e008      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e000      	b.n	80007b2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007b0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	f043 030c 	orr.w	r3, r3, #12
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007bc:	7b7b      	ldrb	r3, [r7, #13]
 80007be:	f043 0303 	orr.w	r3, r3, #3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	3301      	adds	r3, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	2004      	movs	r0, #4
 80007d0:	f7ff fe7a 	bl	80004c8 <write_register>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3319      	adds	r3, #25
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	3301      	adds	r3, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2020      	movs	r0, #32
 80007f8:	f7ff fe66 	bl	80004c8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	3301      	adds	r3, #1
 8000802:	4619      	mov	r1, r3
 8000804:	2021      	movs	r0, #33	; 0x21
 8000806:	f7ff fe5f 	bl	80004c8 <write_register>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d019      	beq.n	8000856 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000822:	23ff      	movs	r3, #255	; 0xff
 8000824:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	3301      	adds	r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	2004      	movs	r0, #4
 8000830:	f7ff fe4a 	bl	80004c8 <write_register>
    iData[1] = 0x01;
 8000834:	2301      	movs	r3, #1
 8000836:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	3301      	adds	r3, #1
 800083e:	4619      	mov	r1, r3
 8000840:	2022      	movs	r0, #34	; 0x22
 8000842:	f7ff fe41 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	3301      	adds	r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	2023      	movs	r0, #35	; 0x23
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000854:	e018      	b.n	8000888 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	3301      	adds	r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	2022      	movs	r0, #34	; 0x22
 8000864:	f7ff fe30 	bl	80004c8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	3301      	adds	r3, #1
 800086e:	4619      	mov	r1, r3
 8000870:	2023      	movs	r0, #35	; 0x23
 8000872:	f7ff fe29 	bl	80004c8 <write_register>
    iData[1] = 0xAF;
 8000876:	23af      	movs	r3, #175	; 0xaf
 8000878:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	3301      	adds	r3, #1
 8000880:	4619      	mov	r1, r3
 8000882:	2004      	movs	r0, #4
 8000884:	f7ff fe20 	bl	80004c8 <write_register>
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff ffbb 	bl	8000812 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800089c:	2399      	movs	r3, #153	; 0x99
 800089e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	3301      	adds	r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe0e 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2047      	movs	r0, #71	; 0x47
 80008b8:	f7ff fe06 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	3301      	adds	r3, #1
 80008c0:	4619      	mov	r1, r3
 80008c2:	2032      	movs	r0, #50	; 0x32
 80008c4:	f7ff fe1a 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	3301      	adds	r3, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	2032      	movs	r0, #50	; 0x32
 80008da:	f7ff fdf5 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	3301      	adds	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde4 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	2300      	movs	r3, #0
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fddc 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000910:	239e      	movs	r3, #158	; 0x9e
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2002      	movs	r0, #2
 800091c:	f7ff fdd4 	bl	80004c8 <write_register>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <CS43_Stop>:

void CS43_Stop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff6f 	bl	8000812 <CS43_SetMute>
  iData[1] = 0x04;
 8000934:	2304      	movs	r3, #4
 8000936:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	3301      	adds	r3, #1
 800093c:	4619      	mov	r1, r3
 800093e:	200e      	movs	r0, #14
 8000940:	f7ff fdc2 	bl	80004c8 <write_register>
	iData[1] = 0x9F;
 8000944:	239f      	movs	r3, #159	; 0x9f
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdba 	bl	80004c8 <write_register>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	23ff      	movs	r3, #255	; 0xff
 800096a:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e00b      	b.n	800098a <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <audioI2S_pllClockConfig+0x8c>)
 8000976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000984:	7ffb      	ldrb	r3, [r7, #31]
 8000986:	3301      	adds	r3, #1
 8000988:	77fb      	strb	r3, [r7, #31]
 800098a:	7ffb      	ldrb	r3, [r7, #31]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d9f0      	bls.n	8000972 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f006 f969 	bl	8006c6c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800099a:	7fbb      	ldrb	r3, [r7, #30]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	4a10      	ldr	r2, [pc, #64]	; (80009ec <audioI2S_pllClockConfig+0x90>)
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009b2:	7fbb      	ldrb	r3, [r7, #30]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <audioI2S_pllClockConfig+0x94>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f006 f871 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c6:	e00b      	b.n	80009e0 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009cc:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009d0:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009d2:	2303      	movs	r3, #3
 80009d4:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4618      	mov	r0, r3
 80009dc:	f006 f864 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	0800f5a8 	.word	0x0800f5a8
 80009ec:	0800f5c8 	.word	0x0800f5c8
 80009f0:	0800f5e8 	.word	0x0800f5e8

080009f4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <I2S3_freqUpdate+0x84>)
 8000a02:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a16:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a4a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <I2S3_freqUpdate+0x80>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fc31 	bl	80052c0 <HAL_I2S_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e000      	b.n	8000a6a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a68:	2301      	movs	r3, #1
  }
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000010c 	.word	0x2000010c
 8000a78:	40003c00 	.word	0x40003c00

08000a7c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <audioI2S_setHandle+0x1c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	2000010c 	.word	0x2000010c

08000a9c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff59 	bl	800095c <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <I2S3_freqUpdate>
  return true;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac6:	f7ff fee3 	bl	8000890 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <audioI2S_play+0x38>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad4:	d203      	bcs.n	8000ade <audioI2S_play+0x22>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	e001      	b.n	8000ae2 <audioI2S_play+0x26>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f004 fd2b 	bl	8005540 <HAL_I2S_Transmit_DMA>
  return true;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000010c 	.word	0x2000010c

08000af8 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000afc:	f7ff ff14 	bl	8000928 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <audioI2S_stop+0x18>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fdc3 	bl	8005690 <HAL_I2S_DMAStop>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000010c 	.word	0x2000010c

08000b14 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_I2S_TxCpltCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b26:	f000 f91d 	bl	8000d64 <audioI2S_fullTransfer_Callback>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40003c00 	.word	0x40003c00

08000b38 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d101      	bne.n	8000b4e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b4a:	f000 f8ff 	bl	8000d4c <audioI2S_halfTransfer_Callback>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <wavPlayer_reset+0x1c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <wavPlayer_reset+0x20>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20001344 	.word	0x20001344
 8000b7c:	2000134c 	.word	0x2000134c

08000b80 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <wavPlayer_fileSelect+0x48>)
 8000b92:	f00c fc13 	bl	800d3bc <f_open>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e00e      	b.n	8000bbe <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	f107 010c 	add.w	r1, r7, #12
 8000ba8:	222c      	movs	r2, #44	; 0x2c
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <wavPlayer_fileSelect+0x48>)
 8000bac:	f00c fdc4 	bl	800d738 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <wavPlayer_fileSelect+0x4c>)
 8000bb4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <wavPlayer_fileSelect+0x50>)
 8000bba:	6013      	str	r3, [r2, #0]
  return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3738      	adds	r7, #56	; 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000110 	.word	0x20000110
 8000bcc:	20000340 	.word	0x20000340
 8000bd0:	20001348 	.word	0x20001348

08000bd4 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  isFinished = false;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <wavPlayer_play+0x48>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <wavPlayer_play+0x4c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff5a 	bl	8000a9c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <wavPlayer_play+0x50>)
 8000bec:	f00c ff8b 	bl	800db06 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <wavPlayer_play+0x54>)
 8000bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <wavPlayer_play+0x58>)
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <wavPlayer_play+0x50>)
 8000bfa:	f00c fd9d 	bl	800d738 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <wavPlayer_play+0x5c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <wavPlayer_play+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <wavPlayer_play+0x60>)
 8000c0a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <wavPlayer_play+0x58>)
 8000c12:	f7ff ff53 	bl	8000abc <audioI2S_play>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001350 	.word	0x20001350
 8000c20:	20001348 	.word	0x20001348
 8000c24:	20000110 	.word	0x20000110
 8000c28:	2000134c 	.word	0x2000134c
 8000c2c:	20000344 	.word	0x20000344
 8000c30:	20000340 	.word	0x20000340
 8000c34:	20001344 	.word	0x20001344

08000c38 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <wavPlayer_process+0xc8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d859      	bhi.n	8000cfa <wavPlayer_process+0xc2>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <wavPlayer_process+0x14>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000cf9 	.word	0x08000cf9
 8000c50:	08000c5d 	.word	0x08000c5d
 8000c54:	08000c9f 	.word	0x08000c9f
 8000c58:	08000ce1 	.word	0x08000ce1
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <wavPlayer_process+0xcc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <wavPlayer_process+0xc8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <wavPlayer_process+0xcc>)
 8000c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c6e:	4926      	ldr	r1, [pc, #152]	; (8000d08 <wavPlayer_process+0xd0>)
 8000c70:	4826      	ldr	r0, [pc, #152]	; (8000d0c <wavPlayer_process+0xd4>)
 8000c72:	f00c fd61 	bl	800d738 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <wavPlayer_process+0xd8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c7e:	d907      	bls.n	8000c90 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <wavPlayer_process+0xd8>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <wavPlayer_process+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <wavPlayer_process+0xd8>)
 8000c8c:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000c8e:	e034      	b.n	8000cfa <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <wavPlayer_process+0xd8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <wavPlayer_process+0xc8>)
 8000c98:	2203      	movs	r2, #3
 8000c9a:	701a      	strb	r2, [r3, #0]
    break;
 8000c9c:	e02d      	b.n	8000cfa <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <wavPlayer_process+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <wavPlayer_process+0xc8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <wavPlayer_process+0xcc>)
 8000cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb0:	4918      	ldr	r1, [pc, #96]	; (8000d14 <wavPlayer_process+0xdc>)
 8000cb2:	4816      	ldr	r0, [pc, #88]	; (8000d0c <wavPlayer_process+0xd4>)
 8000cb4:	f00c fd40 	bl	800d738 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <wavPlayer_process+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cc0:	d907      	bls.n	8000cd2 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <wavPlayer_process+0xd8>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <wavPlayer_process+0xcc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <wavPlayer_process+0xd8>)
 8000cce:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cd0:	e013      	b.n	8000cfa <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <wavPlayer_process+0xd8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <wavPlayer_process+0xc8>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	701a      	strb	r2, [r3, #0]
    break;
 8000cde:	e00c      	b.n	8000cfa <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <wavPlayer_process+0xd4>)
 8000ce2:	f00c fee6 	bl	800dab2 <f_close>
    wavPlayer_reset();
 8000ce6:	f7ff ff39 	bl	8000b5c <wavPlayer_reset>
    isFinished = true;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <wavPlayer_process+0xe0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <wavPlayer_process+0xc8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
    break;
 8000cf6:	e000      	b.n	8000cfa <wavPlayer_process+0xc2>
    break;
 8000cf8:	bf00      	nop
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001351 	.word	0x20001351
 8000d04:	2000134c 	.word	0x2000134c
 8000d08:	20000344 	.word	0x20000344
 8000d0c:	20000110 	.word	0x20000110
 8000d10:	20001344 	.word	0x20001344
 8000d14:	20000b44 	.word	0x20000b44
 8000d18:	20001350 	.word	0x20001350

08000d1c <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d20:	f7ff feea 	bl	8000af8 <audioI2S_stop>
  isFinished = true;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <wavPlayer_stop+0x14>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20001350 	.word	0x20001350

08000d34 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return isFinished;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <wavPlayer_isFinished+0x14>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20001350 	.word	0x20001350

08000d4c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <audioI2S_halfTransfer_Callback+0x14>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20001351 	.word	0x20001351

08000d64 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <audioI2S_fullTransfer_Callback+0x14>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20001351 	.word	0x20001351

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b097      	sub	sp, #92	; 0x5c
 8000d80:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	for(int lcv = 0; lcv < ILI9341_WIDTH *2; lcv ++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e007      	b.n	8000d98 <main+0x1c>
		screen[lcv] = 0;
 8000d88:	4a92      	ldr	r2, [pc, #584]	; (8000fd4 <main+0x258>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
	for(int lcv = 0; lcv < ILI9341_WIDTH *2; lcv ++) {
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d9e:	dbf3      	blt.n	8000d88 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 fec4 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f93a 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 faba 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dac:	f000 fa98 	bl	80012e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000db0:	f000 fa12 	bl	80011d8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000db4:	f000 fa46 	bl	8001244 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000db8:	f000 f9b2 	bl	8001120 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dbc:	f000 f9de 	bl	800117c <MX_I2S3_Init>
  MX_FATFS_Init();
 8000dc0:	f007 fd76 	bl	80088b0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000dc4:	f00d f904 	bl	800dfd0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin,LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <main+0x25c>)
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4b7f      	ldr	r3, [pc, #508]	; (8000fd8 <main+0x25c>)
 8000dda:	2220      	movs	r2, #32
 8000ddc:	497f      	ldr	r1, [pc, #508]	; (8000fdc <main+0x260>)
 8000dde:	4880      	ldr	r0, [pc, #512]	; (8000fe0 <main+0x264>)
 8000de0:	f00d fcc0 	bl	800e764 <ILI9341_Init>
  ILI9341_setRotation(0);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f00e fa25 	bl	800f234 <ILI9341_setRotation>
  ILI9341_Fill(screen);
 8000dea:	487a      	ldr	r0, [pc, #488]	; (8000fd4 <main+0x258>)
 8000dec:	f00d fd9a 	bl	800e924 <ILI9341_Fill>

  int startmenu_x = 50;
 8000df0:	2332      	movs	r3, #50	; 0x32
 8000df2:	607b      	str	r3, [r7, #4]
  int startmenu_y = 100;
 8000df4:	2364      	movs	r3, #100	; 0x64
 8000df6:	603b      	str	r3, [r7, #0]

  CS43_Init(hi2c1, MODE_I2S);
 8000df8:	4c7a      	ldr	r4, [pc, #488]	; (8000fe4 <main+0x268>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9311      	str	r3, [sp, #68]	; 0x44
 8000dfe:	4668      	mov	r0, sp
 8000e00:	f104 0310 	add.w	r3, r4, #16
 8000e04:	2244      	movs	r2, #68	; 0x44
 8000e06:	4619      	mov	r1, r3
 8000e08:	f00e fa9a 	bl	800f340 <memcpy>
 8000e0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e10:	f7ff fb94 	bl	800053c <CS43_Init>
	CS43_SetVolume(230);//0-255
 8000e14:	20e6      	movs	r0, #230	; 0xe6
 8000e16:	f7ff fce1 	bl	80007dc <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f7ff fc94 	bl	8000748 <CS43_Enable_RightLeft>

	audioI2S_setHandle(&hi2s3);
 8000e20:	4871      	ldr	r0, [pc, #452]	; (8000fe8 <main+0x26c>)
 8000e22:	f7ff fe2b 	bl	8000a7c <audioI2S_setHandle>
	 bool isMounted = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //read GPIO
	  if((GPIOA->IDR & GPIO_PIN_0) != (uint32_t)GPIO_PIN_RESET) {
 8000e2a:	4b70      	ldr	r3, [pc, #448]	; (8000fec <main+0x270>)
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d008      	beq.n	8000e48 <main+0xcc>
		  state = game;
 8000e36:	4b6e      	ldr	r3, [pc, #440]	; (8000ff0 <main+0x274>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	486c      	ldr	r0, [pc, #432]	; (8000ff4 <main+0x278>)
 8000e42:	f001 fda9 	bl	8002998 <HAL_GPIO_WritePin>
 8000e46:	e004      	b.n	8000e52 <main+0xd6>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <main+0x278>)
 8000e4e:	f001 fda3 	bl	8002998 <HAL_GPIO_WritePin>
	  }
	  //menu page setup
	  if(state == menu){
 8000e52:	4b67      	ldr	r3, [pc, #412]	; (8000ff0 <main+0x274>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d13e      	bne.n	8000ed8 <main+0x15c>
	  	  ILI9341_printText("Start", startmenu_x, startmenu_y, COLOR_GREEN, COLOR_GREEN, 5);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	b219      	sxth	r1, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	2305      	movs	r3, #5
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e70:	4861      	ldr	r0, [pc, #388]	; (8000ff8 <main+0x27c>)
 8000e72:	f00e f99d 	bl	800f1b0 <ILI9341_printText>
//	  	  HAL_Delay(500);
	  	  ILI9341_printText("Start", startmenu_x, startmenu_y, COLOR_BLACK, COLOR_BLACK, 5);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b219      	sxth	r1, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	2305      	movs	r3, #5
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2300      	movs	r3, #0
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	485b      	ldr	r0, [pc, #364]	; (8000ff8 <main+0x27c>)
 8000e8a:	f00e f991 	bl	800f1b0 <ILI9341_printText>

	  	  ILI9341_printText("ScoreBoard", 50, 180, COLOR_GREEN, COLOR_RED, 2);
 8000e8e:	2302      	movs	r3, #2
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e9c:	22b4      	movs	r2, #180	; 0xb4
 8000e9e:	2132      	movs	r1, #50	; 0x32
 8000ea0:	4856      	ldr	r0, [pc, #344]	; (8000ffc <main+0x280>)
 8000ea2:	f00e f985 	bl	800f1b0 <ILI9341_printText>
	  	  ILI9341_printText("Music", 50, 220, COLOR_GREEN, COLOR_RED, 2);
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000eb4:	22dc      	movs	r2, #220	; 0xdc
 8000eb6:	2132      	movs	r1, #50	; 0x32
 8000eb8:	4851      	ldr	r0, [pc, #324]	; (8001000 <main+0x284>)
 8000eba:	f00e f979 	bl	800f1b0 <ILI9341_printText>
	  	  ILI9341_printText("Setting", 50, 260, COLOR_GREEN, COLOR_RED, 2);
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed0:	2132      	movs	r1, #50	; 0x32
 8000ed2:	484c      	ldr	r0, [pc, #304]	; (8001004 <main+0x288>)
 8000ed4:	f00e f96c 	bl	800f1b0 <ILI9341_printText>
	  }
	  	  //test button and changes on screen
	  if (state == game){
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <main+0x274>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10a      	bne.n	8000ef6 <main+0x17a>

		  ILI9341_Fill(screen);
 8000ee0:	483c      	ldr	r0, [pc, #240]	; (8000fd4 <main+0x258>)
 8000ee2:	f00d fd1f 	bl	800e924 <ILI9341_Fill>
//	  		  while ((GPIOA->IDR & GPIO_PIN_0) == (uint32_t)GPIO_PIN_RESET){
			  GamePage();
 8000ee6:	f000 fb19 	bl	800151c <GamePage>
//	  		  }
		  ILI9341_Fill(screen);
 8000eea:	483a      	ldr	r0, [pc, #232]	; (8000fd4 <main+0x258>)
 8000eec:	f00d fd1a 	bl	800e924 <ILI9341_Fill>
		  state = menu;
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <main+0x274>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ef6:	f00d f891 	bl	800e01c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000efa:	2101      	movs	r1, #1
 8000efc:	483b      	ldr	r0, [pc, #236]	; (8000fec <main+0x270>)
 8000efe:	f001 fd33 	bl	8002968 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <main+0x19a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0e:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <main+0x278>)
 8000f10:	f001 fd42 	bl	8002998 <HAL_GPIO_WritePin>
 8000f14:	e005      	b.n	8000f22 <main+0x1a6>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1c:	4835      	ldr	r0, [pc, #212]	; (8000ff4 <main+0x278>)
 8000f1e:	f001 fd3b 	bl	8002998 <HAL_GPIO_WritePin>
	}

	if(Appli_state == APPLICATION_START) {
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x28c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d106      	bne.n	8000f38 <main+0x1bc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f30:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <main+0x278>)
 8000f32:	f001 fd31 	bl	8002998 <HAL_GPIO_WritePin>
 8000f36:	e010      	b.n	8000f5a <main+0x1de>
	}
	else if(Appli_state == APPLICATION_DISCONNECT) {
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <main+0x28c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d10c      	bne.n	8000f5a <main+0x1de>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <main+0x278>)
 8000f48:	f001 fd26 	bl	8002998 <HAL_GPIO_WritePin>
	  f_mount(NULL, (TCHAR const*)"", 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	492f      	ldr	r1, [pc, #188]	; (800100c <main+0x290>)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f00c f9ed 	bl	800d330 <f_mount>
	  isMounted = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	72fb      	strb	r3, [r7, #11]
	}

	if(Appli_state == APPLICATION_READY) {
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <main+0x28c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	f47f af63 	bne.w	8000e2a <main+0xae>
		if(!isMounted){
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <main+0x202>
			f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	4927      	ldr	r1, [pc, #156]	; (8001010 <main+0x294>)
 8000f74:	4827      	ldr	r0, [pc, #156]	; (8001014 <main+0x298>)
 8000f76:	f00c f9db 	bl	800d330 <f_mount>
			isMounted = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	72fb      	strb	r3, [r7, #11]
		}

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000f7e:	2101      	movs	r1, #1
 8000f80:	481a      	ldr	r0, [pc, #104]	; (8000fec <main+0x270>)
 8000f82:	f001 fcf1 	bl	8002968 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f43f af4e 	beq.w	8000e2a <main+0xae>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <main+0x278>)
 8000f96:	f001 fcff 	bl	8002998 <HAL_GPIO_WritePin>
			wavPlayer_fileSelect(WAV_FILE1);
 8000f9a:	481f      	ldr	r0, [pc, #124]	; (8001018 <main+0x29c>)
 8000f9c:	f7ff fdf0 	bl	8000b80 <wavPlayer_fileSelect>
			wavPlayer_play();
 8000fa0:	f7ff fe18 	bl	8000bd4 <wavPlayer_play>
			while(!wavPlayer_isFinished()) {
 8000fa4:	e001      	b.n	8000faa <main+0x22e>
				wavPlayer_process();
 8000fa6:	f7ff fe47 	bl	8000c38 <wavPlayer_process>
			while(!wavPlayer_isFinished()) {
 8000faa:	f7ff fec3 	bl	8000d34 <wavPlayer_isFinished>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f5      	bne.n	8000fa6 <main+0x22a>
			}
			wavPlayer_stop();
 8000fba:	f7ff feaf 	bl	8000d1c <wavPlayer_stop>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <main+0x278>)
 8000fc6:	f001 fce7 	bl	8002998 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f000 fe1f 	bl	8001c10 <HAL_Delay>
	  if((GPIOA->IDR & GPIO_PIN_0) != (uint32_t)GPIO_PIN_RESET) {
 8000fd2:	e72a      	b.n	8000e2a <main+0xae>
 8000fd4:	20001468 	.word	0x20001468
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	200016a8 	.word	0x200016a8
 8000fe4:	20001414 	.word	0x20001414
 8000fe8:	20001740 	.word	0x20001740
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	20001358 	.word	0x20001358
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	0800f4f4 	.word	0x0800f4f4
 8000ffc:	0800f4fc 	.word	0x0800f4fc
 8001000:	0800f508 	.word	0x0800f508
 8001004:	0800f510 	.word	0x0800f510
 8001008:	20001398 	.word	0x20001398
 800100c:	0800f518 	.word	0x0800f518
 8001010:	2000178c 	.word	0x2000178c
 8001014:	200019c0 	.word	0x200019c0
 8001018:	0800f51c 	.word	0x0800f51c

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b098      	sub	sp, #96	; 0x60
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	2230      	movs	r2, #48	; 0x30
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00e f993 	bl	800f356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <SystemClock_Config+0xfc>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a30      	ldr	r2, [pc, #192]	; (8001118 <SystemClock_Config+0xfc>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <SystemClock_Config+0xfc>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <SystemClock_Config+0x100>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2a      	ldr	r2, [pc, #168]	; (800111c <SystemClock_Config+0x100>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0x100>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001086:	2301      	movs	r3, #1
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001090:	2302      	movs	r3, #2
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001094:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001098:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800109a:	2308      	movs	r3, #8
 800109c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800109e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b0:	4618      	mov	r0, r3
 80010b2:	f005 f8ab 	bl	800620c <HAL_RCC_OscConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010bc:	f000 fae8 	bl	8001690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2105      	movs	r1, #5
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fb04 	bl	80066ec <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ea:	f000 fad1 	bl	8001690 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80010f2:	f240 130f 	movw	r3, #271	; 0x10f
 80010f6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010f8:	2306      	movs	r3, #6
 80010fa:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4618      	mov	r0, r3
 8001102:	f005 fcd1 	bl	8006aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800110c:	f000 fac0 	bl	8001690 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3760      	adds	r7, #96	; 0x60
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f003 f925 	bl	80043ac <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 fa92 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20001414 	.word	0x20001414
 8001174:	40005400 	.word	0x40005400
 8001178:	000186a0 	.word	0x000186a0

0800117c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MX_I2S3_Init+0x58>)
 8001184:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2S3_Init+0x54>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_I2S3_Init+0x54>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011a4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011a8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_I2S3_Init+0x54>)
 80011be:	f004 f87f 	bl	80052c0 <HAL_I2S_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011c8:	f000 fa62 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20001740 	.word	0x20001740
 80011d4:	40003c00 	.word	0x40003c00

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI1_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI1_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI1_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI1_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI1_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI1_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI1_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI1_Init+0x64>)
 800122a:	f005 fda7 	bl	8006d7c <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001234:	f000 fa2c 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200016a8 	.word	0x200016a8
 8001240:	40013000 	.word	0x40013000

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM2_Init+0x98>)
 8001262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25599;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM2_Init+0x98>)
 800126a:	f246 32ff 	movw	r2, #25599	; 0x63ff
 800126e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM2_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 599;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM2_Init+0x98>)
 8001278:	f240 2257 	movw	r2, #599	; 0x257
 800127c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM2_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM2_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128a:	4814      	ldr	r0, [pc, #80]	; (80012dc <MX_TIM2_Init+0x98>)
 800128c:	f005 ffba 	bl	8007204 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 f9fb 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM2_Init+0x98>)
 80012a8:	f006 f90a 	bl	80074c0 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012b2:	f000 f9ed 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM2_Init+0x98>)
 80012c4:	f006 fb16 	bl	80078f4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ce:	f000 f9df 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001700 	.word	0x20001700

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_DMA_Init+0x3c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <MX_DMA_Init+0x3c>)
 80012f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_DMA_Init+0x3c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2010      	movs	r0, #16
 8001308:	f000 fd7f 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800130c:	2010      	movs	r0, #16
 800130e:	f000 fd98 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <MX_GPIO_Init+0x154>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <MX_GPIO_Init+0x154>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <MX_GPIO_Init+0x154>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <MX_GPIO_Init+0x154>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a46      	ldr	r2, [pc, #280]	; (8001474 <MX_GPIO_Init+0x154>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <MX_GPIO_Init+0x154>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MX_GPIO_Init+0x154>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <MX_GPIO_Init+0x154>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <MX_GPIO_Init+0x154>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_GPIO_Init+0x154>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a38      	ldr	r2, [pc, #224]	; (8001474 <MX_GPIO_Init+0x154>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_GPIO_Init+0x154>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <MX_GPIO_Init+0x154>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a31      	ldr	r2, [pc, #196]	; (8001474 <MX_GPIO_Init+0x154>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_GPIO_Init+0x154>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f240 3101 	movw	r1, #769	; 0x301
 80013c8:	482b      	ldr	r0, [pc, #172]	; (8001478 <MX_GPIO_Init+0x158>)
 80013ca:	f001 fae5 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80013ce:	2200      	movs	r2, #0
 80013d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <MX_GPIO_Init+0x15c>)
 80013d6:	f001 fadf 	bl	8002998 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	4828      	ldr	r0, [pc, #160]	; (8001480 <MX_GPIO_Init+0x160>)
 80013e0:	f001 fada 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DC_Pin|LCD_RST_Pin;
 80013e4:	f240 3301 	movw	r3, #769	; 0x301
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	481e      	ldr	r0, [pc, #120]	; (8001478 <MX_GPIO_Init+0x158>)
 80013fe:	f001 f919 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001402:	2301      	movs	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	; (8001484 <MX_GPIO_Init+0x164>)
 8001416:	f001 f90d 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800141a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800141e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <MX_GPIO_Init+0x15c>)
 8001434:	f001 f8fe 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001438:	2310      	movs	r3, #16
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_GPIO_Init+0x160>)
 800144c:	f001 f8f2 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001450:	2320      	movs	r3, #32
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_GPIO_Init+0x160>)
 8001468:	f001 f8e4 	bl	8002634 <HAL_GPIO_Init>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40020400 	.word	0x40020400
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim->Instance == TIM2){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d134      	bne.n	8001504 <HAL_TIM_PeriodElapsedCallback+0x7c>
	  for (int i = 0; i < 15; i++){
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e02b      	b.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0x70>
		  ILI9341_fillCircle(start_cycle_x,start_cycle_y + 15 * tim2_i, 10, COLOR_RED);
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b218      	sxth	r0, r3
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b219      	sxth	r1, r3
 80014c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014c4:	220a      	movs	r2, #10
 80014c6:	f00d fc36 	bl	800ed36 <ILI9341_fillCircle>
		  ILI9341_fillCircle(start_cycle_x,start_cycle_y + 15 * tim2_i, 10, COLOR_BLACK);
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b218      	sxth	r0, r3
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b219      	sxth	r1, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	220a      	movs	r2, #10
 80014ee:	f00d fc22 	bl	800ed36 <ILI9341_fillCircle>
	  for (int i = 0; i < 15; i++){
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b0e      	cmp	r3, #14
 80014fc:	ddd0      	ble.n	80014a0 <HAL_TIM_PeriodElapsedCallback+0x18>
//	  tim2_i++;
//	  if (tim2_i == 14) {HAL_TIM_Base_Stop(&htim2);}
	  }
	  HAL_TIM_Base_Stop(&htim2);
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001500:	f005 feab 	bl	800725a <HAL_TIM_Base_Stop>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20001354 	.word	0x20001354
 8001514:	20000004 	.word	0x20000004
 8001518:	20001700 	.word	0x20001700

0800151c <GamePage>:

void GamePage (void){
 800151c:	b580      	push	{r7, lr}
 800151e:	b09e      	sub	sp, #120	; 0x78
 8001520:	af00      	add	r7, sp, #0
	uint8_t line1[] = {1,1,1,1,1};
 8001522:	4a53      	ldr	r2, [pc, #332]	; (8001670 <GamePage+0x154>)
 8001524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152c:	6018      	str	r0, [r3, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	7019      	strb	r1, [r3, #0]
	uint8_t line2[] = {1,1,0,0,1};
 8001532:	4a50      	ldr	r2, [pc, #320]	; (8001674 <GamePage+0x158>)
 8001534:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153c:	6018      	str	r0, [r3, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	7019      	strb	r1, [r3, #0]
	uint8_t line3[] = {0,1,1,0,0};
 8001542:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <GamePage+0x15c>)
 8001544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	3304      	adds	r3, #4
 8001550:	7019      	strb	r1, [r3, #0]
	uint8_t line4[] = {0,0,0,0,0};
 8001552:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	711a      	strb	r2, [r3, #4]
	uint8_t line5[] = {1,1,0,0,0};
 800155c:	4a47      	ldr	r2, [pc, #284]	; (800167c <GamePage+0x160>)
 800155e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001566:	6018      	str	r0, [r3, #0]
 8001568:	3304      	adds	r3, #4
 800156a:	7019      	strb	r1, [r3, #0]
	uint8_t line6[] = {0,0,0,1,1};
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <GamePage+0x164>)
 800156e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001576:	6018      	str	r0, [r3, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	7019      	strb	r1, [r3, #0]
	uint8_t line7[] = {1,0,0,0,1};
 800157c:	4a41      	ldr	r2, [pc, #260]	; (8001684 <GamePage+0x168>)
 800157e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	3304      	adds	r3, #4
 800158a:	7019      	strb	r1, [r3, #0]
	uint8_t line8[] = {0,1,0,1,1};
 800158c:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <GamePage+0x16c>)
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	6018      	str	r0, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	7019      	strb	r1, [r3, #0]
	uint8_t* test_lines[] = {line1, line2, line3, line4, line5, line6, line7, line8};
 800159c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	623b      	str	r3, [r7, #32]

	int track = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	677b      	str	r3, [r7, #116]	; 0x74
	int index_track = track / 25;
 80015d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d2:	4a2e      	ldr	r2, [pc, #184]	; (800168c <GamePage+0x170>)
 80015d4:	fb82 1203 	smull	r1, r2, r2, r3
 80015d8:	10d2      	asrs	r2, r2, #3
 80015da:	17db      	asrs	r3, r3, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	673b      	str	r3, [r7, #112]	; 0x70
	while (1){
		for (int index = 0; index <= index_track; index++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015e4:	e029      	b.n	800163a <GamePage+0x11e>
			uint8_t * ptr = test_lines[index_track - index];
 80015e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80015f2:	4413      	add	r3, r2
 80015f4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80015f8:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = track - index * 25; i < 25 + track - index * 25; i ++){
 80015fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015fc:	f06f 0218 	mvn.w	r2, #24
 8001600:	fb02 f303 	mul.w	r3, r2, r3
 8001604:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001606:	4413      	add	r3, r2
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
 800160a:	e007      	b.n	800161c <GamePage+0x100>
				ILI9341_Fill_Line(ptr, i);
 800160c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160e:	4619      	mov	r1, r3
 8001610:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001612:	f00d f9cb 	bl	800e9ac <ILI9341_Fill_Line>
			for (int i = track - index * 25; i < 25 + track - index * 25; i ++){
 8001616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001618:	3301      	adds	r3, #1
 800161a:	66bb      	str	r3, [r7, #104]	; 0x68
 800161c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800161e:	f103 0219 	add.w	r2, r3, #25
 8001622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001624:	f06f 0118 	mvn.w	r1, #24
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001630:	429a      	cmp	r2, r3
 8001632:	dbeb      	blt.n	800160c <GamePage+0xf0>
		for (int index = 0; index <= index_track; index++){
 8001634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001636:	3301      	adds	r3, #1
 8001638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800163a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800163c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800163e:	429a      	cmp	r2, r3
 8001640:	ddd1      	ble.n	80015e6 <GamePage+0xca>
			}
		}
		track += 25;
 8001642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001644:	3319      	adds	r3, #25
 8001646:	677b      	str	r3, [r7, #116]	; 0x74
		if (track > ILI9341_HEIGHT)
 8001648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800164a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800164e:	dd01      	ble.n	8001654 <GamePage+0x138>
			track = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	677b      	str	r3, [r7, #116]	; 0x74
		index_track = track / 25;
 8001654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <GamePage+0x170>)
 8001658:	fb82 1203 	smull	r1, r2, r2, r3
 800165c:	10d2      	asrs	r2, r2, #3
 800165e:	17db      	asrs	r3, r3, #31
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	673b      	str	r3, [r7, #112]	; 0x70
		HAL_Delay(500);
 8001664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001668:	f000 fad2 	bl	8001c10 <HAL_Delay>
		for (int index = 0; index <= index_track; index++){
 800166c:	e7b8      	b.n	80015e0 <GamePage+0xc4>
 800166e:	bf00      	nop
 8001670:	0800f528 	.word	0x0800f528
 8001674:	0800f530 	.word	0x0800f530
 8001678:	0800f538 	.word	0x0800f538
 800167c:	0800f540 	.word	0x0800f540
 8001680:	0800f548 	.word	0x0800f548
 8001684:	0800f550 	.word	0x0800f550
 8001688:	0800f558 	.word	0x0800f558
 800168c:	51eb851f 	.word	0x51eb851f

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_MspInit+0x4c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016de:	2007      	movs	r0, #7
 80016e0:	f000 fb88 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_I2C_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x88>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800172e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001740:	2304      	movs	r3, #4
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	480c      	ldr	r0, [pc, #48]	; (800177c <HAL_I2C_MspInit+0x8c>)
 800174c:	f000 ff72 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_I2C_MspInit+0x88>)
 800175a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_I2C_MspInit+0x88>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005400 	.word	0x40005400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a45      	ldr	r2, [pc, #276]	; (80018b4 <HAL_I2S_MspInit+0x134>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	f040 8084 	bne.w	80018ac <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a42      	ldr	r2, [pc, #264]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6313      	str	r3, [r2, #48]	; 0x30
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_I2S_MspInit+0x138>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f8:	2310      	movs	r3, #16
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001808:	2306      	movs	r3, #6
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <HAL_I2S_MspInit+0x13c>)
 8001814:	f000 ff0e 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001818:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800182a:	2306      	movs	r3, #6
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	4822      	ldr	r0, [pc, #136]	; (80018c0 <HAL_I2S_MspInit+0x140>)
 8001836:	f000 fefd 	bl	8002634 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_I2S_MspInit+0x148>)
 800183e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001848:	2240      	movs	r2, #64	; 0x40
 800184a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001858:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800185c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001860:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001868:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800186c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001870:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800187a:	2204      	movs	r2, #4
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001880:	2203      	movs	r2, #3
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001886:	2200      	movs	r2, #0
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 8001892:	f000 faf1 	bl	8001e78 <HAL_DMA_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 800189c:	f7ff fef8 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_I2S_MspInit+0x144>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40003c00 	.word	0x40003c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020800 	.word	0x40020800
 80018c4:	20001648 	.word	0x20001648
 80018c8:	40026088 	.word	0x40026088

080018cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_SPI_MspInit+0x84>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12b      	bne.n	8001946 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x88>)
 80018f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_SPI_MspInit+0x88>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_SPI_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001926:	23e0      	movs	r3, #224	; 0xe0
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001936:	2305      	movs	r3, #5
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0x8c>)
 8001942:	f000 fe77 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013000 	.word	0x40013000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d115      	bne.n	800199a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	201c      	movs	r0, #28
 8001990:	f000 fa3b 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001994:	201c      	movs	r0, #28
 8001996:	f000 fa54 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 f8e8 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA1_Stream5_IRQHandler+0x10>)
 8001a0a:	f000 fbab 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20001648 	.word	0x20001648

08001a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM2_IRQHandler+0x10>)
 8001a1e:	f005 fc47 	bl	80072b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20001700 	.word	0x20001700

08001a2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <OTG_FS_IRQHandler+0x10>)
 8001a32:	f001 fa59 	bl	8002ee8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20001fcc 	.word	0x20001fcc

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f00d fc2c 	bl	800f2cc <__errno>
 8001a74:	4602      	mov	r2, r0
 8001a76:	230c      	movs	r3, #12
 8001a78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20020000 	.word	0x20020000
 8001aa0:	00000400 	.word	0x00000400
 8001aa4:	2000135c 	.word	0x2000135c
 8001aa8:	20002298 	.word	0x20002298

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <SystemInit+0x28>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <SystemInit+0x28>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SystemInit+0x28>)
 8001ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001adc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ade:	e003      	b.n	8001ae8 <LoopCopyDataInit>

08001ae0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ae2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ae4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ae6:	3104      	adds	r1, #4

08001ae8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001af0:	d3f6      	bcc.n	8001ae0 <CopyDataInit>
  ldr  r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001af4:	e002      	b.n	8001afc <LoopFillZerobss>

08001af6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001af6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001af8:	f842 3b04 	str.w	r3, [r2], #4

08001afc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001afe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b00:	d3f9      	bcc.n	8001af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b02:	f7ff ffd3 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f00d fbe7 	bl	800f2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0a:	f7ff f937 	bl	8000d7c <main>
  bx  lr    
 8001b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b14:	0800fc2c 	.word	0x0800fc2c
  ldr  r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b1c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001b20:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8001b24:	20002294 	.word	0x20002294

08001b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_Init+0x40>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_Init+0x40>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x40>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f94d 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fd9e 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f965 	bl	8001e5e <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f92d 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000010 	.word	0x20000010
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000010 	.word	0x20000010
 8001bf4:	20001788 	.word	0x20001788

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20001788 	.word	0x20001788

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_Delay+0x40>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000010 	.word	0x20000010

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff3e 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff8e 	bl	8001d48 <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5d 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff31 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff feb8 	bl	8001bf8 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e099      	b.n	8001fc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb4:	e00f      	b.n	8001ed6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb6:	f7ff fe9f 	bl	8001bf8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d908      	bls.n	8001ed6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e078      	b.n	8001fc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e8      	bne.n	8001eb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_DMA_Init+0x158>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f023 0307 	bic.w	r3, r3, #7
 8001f56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d117      	bne.n	8001f9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fadf 	bl	8002540 <DMA_CheckFifoParam>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f96:	2301      	movs	r3, #1
 8001f98:	e016      	b.n	8001fc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa96 	bl	80024d4 <DMA_CalcBaseAndBitshift>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	223f      	movs	r2, #63	; 0x3f
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	f010803f 	.word	0xf010803f

08001fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Start_IT+0x26>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e040      	b.n	800207c <HAL_DMA_Start_IT+0xa8>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d12f      	bne.n	800206e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa28 	bl	8002478 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	223f      	movs	r2, #63	; 0x3f
 800202e:	409a      	lsls	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0216 	orr.w	r2, r2, #22
 8002042:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0208 	orr.w	r2, r2, #8
 800205a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e005      	b.n	800207a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002092:	f7ff fdb1 	bl	8001bf8 <HAL_GetTick>
 8002096:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e052      	b.n	800215c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0216 	bic.w	r2, r2, #22
 80020c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <HAL_DMA_Abort+0x62>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0208 	bic.w	r2, r2, #8
 80020f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002106:	e013      	b.n	8002130 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002108:	f7ff fd76 	bl	8001bf8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b05      	cmp	r3, #5
 8002114:	d90c      	bls.n	8002130 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e015      	b.n	800215c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1e4      	bne.n	8002108 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	223f      	movs	r2, #63	; 0x3f
 8002144:	409a      	lsls	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_DMA_IRQHandler+0x258>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a92      	ldr	r2, [pc, #584]	; (80023c0 <HAL_DMA_IRQHandler+0x25c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808e 	beq.w	8002402 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8086 	beq.w	8002402 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07d      	beq.n	800246e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e078      	b.n	800246e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01c      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d030      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02b      	b.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d027      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
 80023ba:	e022      	b.n	8002402 <HAL_DMA_IRQHandler+0x29e>
 80023bc:	20000008 	.word	0x20000008
 80023c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0210 	bic.w	r2, r2, #16
 80023e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	2b00      	cmp	r3, #0
 8002408:	d032      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d022      	beq.n	800245c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	429a      	cmp	r2, r3
 8002438:	d307      	bcc.n	800244a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f2      	bne.n	800242e <HAL_DMA_IRQHandler+0x2ca>
 8002448:	e000      	b.n	800244c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800244a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e000      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        return;
 800246e:	bf00      	nop
    }
  }
}
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002494:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d108      	bne.n	80024b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024b6:	e007      	b.n	80024c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b10      	subs	r3, #16
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <DMA_CalcBaseAndBitshift+0x64>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x68>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d909      	bls.n	8002516 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
 8002514:	e007      	b.n	8002526 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	aaaaaaab 	.word	0xaaaaaaab
 800253c:	0800f620 	.word	0x0800f620

08002540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d855      	bhi.n	800260c <DMA_CheckFifoParam+0xcc>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <DMA_CheckFifoParam+0x28>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	08002579 	.word	0x08002579
 800256c:	0800258b 	.word	0x0800258b
 8002570:	08002579 	.word	0x08002579
 8002574:	0800260d 	.word	0x0800260d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d045      	beq.n	8002610 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e042      	b.n	8002610 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002592:	d13f      	bne.n	8002614 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e03c      	b.n	8002614 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d121      	bne.n	80025e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d836      	bhi.n	8002618 <DMA_CheckFifoParam+0xd8>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <DMA_CheckFifoParam+0x70>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c7 	.word	0x080025c7
 80025b8:	080025c1 	.word	0x080025c1
 80025bc:	080025d9 	.word	0x080025d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e02f      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d024      	beq.n	800261c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d6:	e021      	b.n	800261c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e0:	d11e      	bne.n	8002620 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025e6:	e01b      	b.n	8002620 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <DMA_CheckFifoParam+0xb4>
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d003      	beq.n	80025fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025f2:	e018      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e015      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      break;
 800260a:	e00b      	b.n	8002624 <DMA_CheckFifoParam+0xe4>
      break;
 800260c:	bf00      	nop
 800260e:	e00a      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002610:	bf00      	nop
 8002612:	e008      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002614:	bf00      	nop
 8002616:	e006      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002618:	bf00      	nop
 800261a:	e004      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 800261c:	bf00      	nop
 800261e:	e002      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;   
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 8002624:	bf00      	nop
    }
  } 
  
  return status; 
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e16b      	b.n	8002928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 815a 	bne.w	8002922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d00b      	beq.n	800268e <HAL_GPIO_Init+0x5a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002682:	2b11      	cmp	r3, #17
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b12      	cmp	r3, #18
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	2203      	movs	r2, #3
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0xfc>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b12      	cmp	r3, #18
 800272e:	d123      	bne.n	8002778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80b4 	beq.w	8002922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_GPIO_Init+0x308>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_GPIO_Init+0x308>)
 80027c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <HAL_GPIO_Init+0x308>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d6:	4a5a      	ldr	r2, [pc, #360]	; (8002940 <HAL_GPIO_Init+0x30c>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	3302      	adds	r3, #2
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	220f      	movs	r2, #15
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_GPIO_Init+0x310>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d02b      	beq.n	800285a <HAL_GPIO_Init+0x226>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_GPIO_Init+0x314>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d025      	beq.n	8002856 <HAL_GPIO_Init+0x222>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4f      	ldr	r2, [pc, #316]	; (800294c <HAL_GPIO_Init+0x318>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01f      	beq.n	8002852 <HAL_GPIO_Init+0x21e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_GPIO_Init+0x31c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d019      	beq.n	800284e <HAL_GPIO_Init+0x21a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_GPIO_Init+0x320>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_GPIO_Init+0x216>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a4c      	ldr	r2, [pc, #304]	; (8002958 <HAL_GPIO_Init+0x324>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_GPIO_Init+0x212>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_GPIO_Init+0x328>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <HAL_GPIO_Init+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4a      	ldr	r2, [pc, #296]	; (8002960 <HAL_GPIO_Init+0x32c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_GPIO_Init+0x20a>
 800283a:	2307      	movs	r3, #7
 800283c:	e00e      	b.n	800285c <HAL_GPIO_Init+0x228>
 800283e:	2308      	movs	r3, #8
 8002840:	e00c      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002842:	2306      	movs	r3, #6
 8002844:	e00a      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002846:	2305      	movs	r3, #5
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284a:	2304      	movs	r3, #4
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x228>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x228>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x228>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286c:	4934      	ldr	r1, [pc, #208]	; (8002940 <HAL_GPIO_Init+0x30c>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287a:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_GPIO_Init+0x330>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289e:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c8:	4a26      	ldr	r2, [pc, #152]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_GPIO_Init+0x330>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_GPIO_Init+0x330>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f ae90 	bls.w	8002650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3724      	adds	r7, #36	; 0x24
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40021400 	.word	0x40021400
 800295c:	40021800 	.word	0x40021800
 8002960:	40021c00 	.word	0x40021c00
 8002964:	40013c00 	.word	0x40013c00

08002968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e001      	b.n	800298a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029cc:	b08f      	sub	sp, #60	; 0x3c
 80029ce:	af0a      	add	r7, sp, #40	; 0x28
 80029d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e054      	b.n	8002a86 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f00b fb48 	bl	800e08c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 f86c 	bl	8007af8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	687e      	ldr	r6, [r7, #4]
 8002a28:	466d      	mov	r5, sp
 8002a2a:	f106 0410 	add.w	r4, r6, #16
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3e:	1d33      	adds	r3, r6, #4
 8002a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f004 ffe6 	bl	8007a14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 f863 	bl	8007b1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	687e      	ldr	r6, [r7, #4]
 8002a5c:	466d      	mov	r5, sp
 8002a5e:	f106 0410 	add.w	r4, r6, #16
 8002a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a72:	1d33      	adds	r3, r6, #4
 8002a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f005 f976 	bl	8007d68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a8e:	b590      	push	{r4, r7, lr}
 8002a90:	b089      	sub	sp, #36	; 0x24
 8002a92:	af04      	add	r7, sp, #16
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	4608      	mov	r0, r1
 8002a98:	4611      	mov	r1, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	70fb      	strb	r3, [r7, #3]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70bb      	strb	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_HCD_HC_Init+0x28>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e07f      	b.n	8002bb6 <HAL_HCD_HC_Init+0x128>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	333d      	adds	r3, #61	; 0x3d
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	787a      	ldrb	r2, [r7, #1]
 8002ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3340      	adds	r3, #64	; 0x40
 8002af6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002af8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3339      	adds	r3, #57	; 0x39
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	333f      	adds	r3, #63	; 0x3f
 8002b1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	78bb      	ldrb	r3, [r7, #2]
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	b2d8      	uxtb	r0, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	333a      	adds	r3, #58	; 0x3a
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da0a      	bge.n	8002b5e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	333b      	adds	r3, #59	; 0x3b
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e009      	b.n	8002b72 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	333b      	adds	r3, #59	; 0x3b
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	333c      	adds	r3, #60	; 0x3c
 8002b82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b86:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	787c      	ldrb	r4, [r7, #1]
 8002b8e:	78ba      	ldrb	r2, [r7, #2]
 8002b90:	78f9      	ldrb	r1, [r7, #3]
 8002b92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b94:	9302      	str	r3, [sp, #8]
 8002b96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	f005 fa62 	bl	800806c <USB_HC_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}

08002bbe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_HCD_HC_Halt+0x1e>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e00f      	b.n	8002bfc <HAL_HCD_HC_Halt+0x3e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 fc9e 	bl	800852e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	70fb      	strb	r3, [r7, #3]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70bb      	strb	r3, [r7, #2]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333b      	adds	r3, #59	; 0x3b
 8002c2e:	78ba      	ldrb	r2, [r7, #2]
 8002c30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	333f      	adds	r3, #63	; 0x3f
 8002c42:	787a      	ldrb	r2, [r7, #1]
 8002c44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c46:	7c3b      	ldrb	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d114      	bne.n	8002c76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3342      	adds	r3, #66	; 0x42
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	333d      	adds	r3, #61	; 0x3d
 8002c70:	7f3a      	ldrb	r2, [r7, #28]
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e009      	b.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3342      	adds	r3, #66	; 0x42
 8002c86:	2202      	movs	r2, #2
 8002c88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c8a:	787b      	ldrb	r3, [r7, #1]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	f200 80d6 	bhi.w	8002e3e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002e29 	.word	0x08002e29
 8002ca0:	08002d15 	.word	0x08002d15
 8002ca4:	08002d9f 	.word	0x08002d9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ca8:	7c3b      	ldrb	r3, [r7, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	f040 80c9 	bne.w	8002e42 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002cb0:	78bb      	ldrb	r3, [r7, #2]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80c5 	bne.w	8002e42 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002cb8:	8b3b      	ldrh	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	3351      	adds	r3, #81	; 0x51
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3351      	adds	r3, #81	; 0x51
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3342      	adds	r3, #66	; 0x42
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cfc:	e0a1      	b.n	8002e42 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3342      	adds	r3, #66	; 0x42
 8002d0e:	2202      	movs	r2, #2
 8002d10:	701a      	strb	r2, [r3, #0]
      break;
 8002d12:	e096      	b.n	8002e42 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d14:	78bb      	ldrb	r3, [r7, #2]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d120      	bne.n	8002d5c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	3351      	adds	r3, #81	; 0x51
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3342      	adds	r3, #66	; 0x42
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d44:	e07e      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	3342      	adds	r3, #66	; 0x42
 8002d56:	2202      	movs	r2, #2
 8002d58:	701a      	strb	r2, [r3, #0]
      break;
 8002d5a:	e073      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3350      	adds	r3, #80	; 0x50
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3342      	adds	r3, #66	; 0x42
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e05d      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3342      	adds	r3, #66	; 0x42
 8002d98:	2202      	movs	r2, #2
 8002d9a:	701a      	strb	r2, [r3, #0]
      break;
 8002d9c:	e052      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d9e:	78bb      	ldrb	r3, [r7, #2]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d120      	bne.n	8002de6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	3351      	adds	r3, #81	; 0x51
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3342      	adds	r3, #66	; 0x42
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002dce:	e039      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3342      	adds	r3, #66	; 0x42
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
      break;
 8002de4:	e02e      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	3350      	adds	r3, #80	; 0x50
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3342      	adds	r3, #66	; 0x42
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e018      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	3342      	adds	r3, #66	; 0x42
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
      break;
 8002e26:	e00d      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3342      	adds	r3, #66	; 0x42
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
      break;
 8002e3c:	e002      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002e42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	440b      	add	r3, r1
 8002e52:	3344      	adds	r3, #68	; 0x44
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	8b39      	ldrh	r1, [r7, #24]
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4403      	add	r3, r0
 8002e68:	3348      	adds	r3, #72	; 0x48
 8002e6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	335c      	adds	r3, #92	; 0x5c
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3339      	adds	r3, #57	; 0x39
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335d      	adds	r3, #93	; 0x5d
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	3338      	adds	r3, #56	; 0x38
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	18d1      	adds	r1, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f005 f9d2 	bl	8008280 <USB_HC_StartXfer>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop

08002ee8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 feef 	bl	8007ce2 <USB_GetMode>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	f040 80ef 	bne.w	80030ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fed3 	bl	8007cbc <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80e5 	beq.w	80030e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 feca 	bl	8007cbc <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f32:	d104      	bne.n	8002f3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 feba 	bl	8007cbc <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f52:	d104      	bne.n	8002f5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 feaa 	bl	8007cbc <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f72:	d104      	bne.n	8002f7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 fe9a 	bl	8007cbc <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2202      	movs	r2, #2
 8002f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fe8c 	bl	8007cbc <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fae:	d115      	bne.n	8002fdc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f00b f8dc 	bl	800e188 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 ff82 	bl	8007ee0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 fe6b 	bl	8007cbc <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d102      	bne.n	8002ff8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 f966 	bl	80042c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fe5d 	bl	8007cbc <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d106      	bne.n	800301a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f00b f89f 	bl	800e150 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fe4c 	bl	8007cbc <USB_ReadInterrupts>
 8003024:	4603      	mov	r3, r0
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800302e:	d138      	bne.n	80030a2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 fa69 	bl	800850c <USB_HC_ReadInterrupt>
 800303a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e025      	b.n	800308e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	d106      	bne.n	800307c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8cf 	bl	8003218 <HCD_HC_IN_IRQHandler>
 800307a:	e005      	b.n	8003088 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fcfd 	bl	8003a82 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3301      	adds	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3d4      	bcc.n	8003042 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 fe08 	bl	8007cbc <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d101      	bne.n	80030ba <HAL_HCD_IRQHandler+0x1d2>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_HCD_IRQHandler+0x1d4>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d014      	beq.n	80030ea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0210 	bic.w	r2, r2, #16
 80030ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f001 f84b 	bl	800416c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0210 	orr.w	r2, r2, #16
 80030e4:	619a      	str	r2, [r3, #24]
 80030e6:	e000      	b.n	80030ea <HAL_HCD_IRQHandler+0x202>
      return;
 80030e8:	bf00      	nop
    }
  }
}
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_HCD_Start+0x16>
 8003102:	2302      	movs	r3, #2
 8003104:	e013      	b.n	800312e <HAL_HCD_Start+0x3e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fcdf 	bl	8007ad6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f004 ff42 	bl	8007fa8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_HCD_Stop+0x16>
 8003148:	2302      	movs	r3, #2
 800314a:	e00d      	b.n	8003168 <HAL_HCD_Stop+0x32>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f005 fb23 	bl	80087a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fee9 	bl	8007f54 <USB_ResetPort>
 8003182:	4603      	mov	r3, r0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	335c      	adds	r3, #92	; 0x5c
 80031a8:	781b      	ldrb	r3, [r3, #0]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	334c      	adds	r3, #76	; 0x4c
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 ff2b 	bl	8008048 <USB_GetCurrentFrame>
 80031f2:	4603      	mov	r3, r0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f004 ff06 	bl	800801a <USB_GetHostSpeed>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d119      	bne.n	800327c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	2304      	movs	r3, #4
 8003258:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	440a      	add	r2, r1
 8003270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	60d3      	str	r3, [r2, #12]
 800327a:	e0ce      	b.n	800341a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d12c      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	335d      	adds	r3, #93	; 0x5d
 80032b8:	2207      	movs	r2, #7
 80032ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	0151      	lsls	r1, r2, #5
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	440a      	add	r2, r1
 80032d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 f921 	bl	800852e <USB_HC_Halt>
 80032ec:	e095      	b.n	800341a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b20      	cmp	r3, #32
 8003302:	d109      	bne.n	8003318 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	2320      	movs	r3, #32
 8003314:	6093      	str	r3, [r2, #8]
 8003316:	e080      	b.n	800341a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d134      	bne.n	8003398 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	440a      	add	r2, r1
 8003344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	335d      	adds	r3, #93	; 0x5d
 800335e:	2205      	movs	r2, #5
 8003360:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	461a      	mov	r2, r3
 8003370:	2310      	movs	r3, #16
 8003372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	2308      	movs	r3, #8
 8003384:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f005 f8cc 	bl	800852e <USB_HC_Halt>
 8003396:	e040      	b.n	800341a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d134      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f005 f8a7 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	2310      	movs	r3, #16
 80033f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	335d      	adds	r3, #93	; 0x5d
 8003402:	2208      	movs	r2, #8
 8003404:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	461a      	mov	r2, r3
 8003414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003418:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d122      	bne.n	8003478 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	0151      	lsls	r1, r2, #5
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	440a      	add	r2, r1
 8003448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f005 f866 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	461a      	mov	r2, r3
 8003470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003474:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003476:	e300      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 80fd 	bne.w	800368a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	3348      	adds	r3, #72	; 0x48
 80034a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	0159      	lsls	r1, r3, #5
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80034bc:	1ad1      	subs	r1, r2, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4403      	add	r3, r0
 80034cc:	334c      	adds	r3, #76	; 0x4c
 80034ce:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	335d      	adds	r3, #93	; 0x5d
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	3358      	adds	r3, #88	; 0x58
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2301      	movs	r3, #1
 8003508:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	333f      	adds	r3, #63	; 0x3f
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	333f      	adds	r3, #63	; 0x3f
 8003530:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003532:	2b02      	cmp	r3, #2
 8003534:	d121      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	440a      	add	r2, r1
 800354c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f004 ffe4 	bl	800852e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	2310      	movs	r3, #16
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	e070      	b.n	800365c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	333f      	adds	r3, #63	; 0x3f
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d12a      	bne.n	80035e6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	335c      	adds	r3, #92	; 0x5c
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	335c      	adds	r3, #92	; 0x5c
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	4601      	mov	r1, r0
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f00a fde0 	bl	800e1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035e4:	e03a      	b.n	800365c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d12f      	bne.n	800365c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	3350      	adds	r3, #80	; 0x50
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f083 0301 	eor.w	r3, r3, #1
 8003626:	b2d8      	uxtb	r0, r3
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3350      	adds	r3, #80	; 0x50
 8003638:	4602      	mov	r2, r0
 800363a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	b2d8      	uxtb	r0, r3
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	335c      	adds	r3, #92	; 0x5c
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4601      	mov	r1, r0
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f00a fda4 	bl	800e1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	3350      	adds	r3, #80	; 0x50
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f083 0301 	eor.w	r3, r3, #1
 8003672:	b2d8      	uxtb	r0, r3
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	3350      	adds	r3, #80	; 0x50
 8003684:	4602      	mov	r2, r0
 8003686:	701a      	strb	r2, [r3, #0]
}
 8003688:	e1f7      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	f040 811a 	bne.w	80038d6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036bc:	f023 0302 	bic.w	r3, r3, #2
 80036c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	335d      	adds	r3, #93	; 0x5d
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10a      	bne.n	80036ee <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	335c      	adds	r3, #92	; 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e0d9      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	335d      	adds	r3, #93	; 0x5d
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10a      	bne.n	800371a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	335c      	adds	r3, #92	; 0x5c
 8003714:	2205      	movs	r2, #5
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e0c3      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	335d      	adds	r3, #93	; 0x5d
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d00a      	beq.n	8003746 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	335d      	adds	r3, #93	; 0x5d
 8003740:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003742:	2b08      	cmp	r3, #8
 8003744:	d156      	bne.n	80037f4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	440b      	add	r3, r1
 8003754:	3358      	adds	r3, #88	; 0x58
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4403      	add	r3, r0
 8003768:	3358      	adds	r3, #88	; 0x58
 800376a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	3358      	adds	r3, #88	; 0x58
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d914      	bls.n	80037ac <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	3358      	adds	r3, #88	; 0x58
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	335c      	adds	r3, #92	; 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e009      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	335c      	adds	r3, #92	; 0x5c
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e056      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	335d      	adds	r3, #93	; 0x5d
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d123      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	335c      	adds	r3, #92	; 0x5c
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003834:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384a:	461a      	mov	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e027      	b.n	80038a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	335d      	adds	r3, #93	; 0x5d
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b07      	cmp	r3, #7
 8003866:	d11c      	bne.n	80038a2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	3358      	adds	r3, #88	; 0x58
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4403      	add	r3, r0
 800388a:	3358      	adds	r3, #88	; 0x58
 800388c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	335c      	adds	r3, #92	; 0x5c
 800389e:	2204      	movs	r2, #4
 80038a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	2302      	movs	r3, #2
 80038b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	b2d8      	uxtb	r0, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	335c      	adds	r3, #92	; 0x5c
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4601      	mov	r1, r0
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f00a fc68 	bl	800e1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038d4:	e0d1      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b80      	cmp	r3, #128	; 0x80
 80038ea:	d13e      	bne.n	800396a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	440a      	add	r2, r1
 8003902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3358      	adds	r3, #88	; 0x58
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4403      	add	r3, r0
 800392e:	3358      	adds	r3, #88	; 0x58
 8003930:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	440b      	add	r3, r1
 8003940:	335d      	adds	r3, #93	; 0x5d
 8003942:	2206      	movs	r2, #6
 8003944:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f004 fdec 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	461a      	mov	r2, r3
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	6093      	str	r3, [r2, #8]
}
 8003968:	e087      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d17c      	bne.n	8003a7a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	333f      	adds	r3, #63	; 0x3f
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d122      	bne.n	80039dc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	3358      	adds	r3, #88	; 0x58
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fdaa 	bl	800852e <USB_HC_Halt>
 80039da:	e045      	b.n	8003a68 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	333f      	adds	r3, #63	; 0x3f
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	333f      	adds	r3, #63	; 0x3f
 8003a02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d12f      	bne.n	8003a68 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	3358      	adds	r3, #88	; 0x58
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d121      	bne.n	8003a68 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	335d      	adds	r3, #93	; 0x5d
 8003a34:	2203      	movs	r2, #3
 8003a36:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	0151      	lsls	r1, r2, #5
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	440a      	add	r2, r1
 8003a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 fd63 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	461a      	mov	r2, r3
 8003a76:	2310      	movs	r3, #16
 8003a78:	6093      	str	r3, [r2, #8]
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d119      	bne.n	8003ae6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ae4:	e33e      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d141      	bne.n	8003b80 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	333d      	adds	r3, #61	; 0x3d
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 831f 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	333d      	adds	r3, #61	; 0x3d
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	335c      	adds	r3, #92	; 0x5c
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b68:	f043 0302 	orr.w	r3, r3, #2
 8003b6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fcd8 	bl	800852e <USB_HC_Halt>
}
 8003b7e:	e2f1      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d13f      	bne.n	8003c16 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	335d      	adds	r3, #93	; 0x5d
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	333d      	adds	r3, #61	; 0x3d
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3358      	adds	r3, #88	; 0x58
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 fc96 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	6093      	str	r3, [r2, #8]
}
 8003c14:	e2a6      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d122      	bne.n	8003c74 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 fc68 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c70:	6093      	str	r3, [r2, #8]
}
 8003c72:	e277      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d135      	bne.n	8003cf6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3358      	adds	r3, #88	; 0x58
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 fc30 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2301      	movs	r3, #1
 8003cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	335d      	adds	r3, #93	; 0x5d
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
}
 8003cf4:	e236      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d12b      	bne.n	8003d64 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fbf0 	bl	800852e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	335d      	adds	r3, #93	; 0x5d
 8003d5e:	2205      	movs	r2, #5
 8003d60:	701a      	strb	r2, [r3, #0]
}
 8003d62:	e1ff      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d155      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3358      	adds	r3, #88	; 0x58
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	335d      	adds	r3, #93	; 0x5d
 8003d9e:	2203      	movs	r2, #3
 8003da0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	333d      	adds	r3, #61	; 0x3d
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d114      	bne.n	8003de2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	333c      	adds	r3, #60	; 0x3c
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	333d      	adds	r3, #61	; 0x3d
 8003dde:	2201      	movs	r2, #1
 8003de0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fb8e 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2310      	movs	r3, #16
 8003e22:	6093      	str	r3, [r2, #8]
}
 8003e24:	e19e      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d12b      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 fb61 	bl	800852e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	335d      	adds	r3, #93	; 0x5d
 8003e7c:	2206      	movs	r2, #6
 8003e7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	6093      	str	r3, [r2, #8]
}
 8003e92:	e167      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eaa:	d135      	bne.n	8003f18 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fb29 	bl	800852e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2310      	movs	r3, #16
 8003eec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	335d      	adds	r3, #93	; 0x5d
 8003f12:	2208      	movs	r2, #8
 8003f14:	701a      	strb	r2, [r3, #0]
}
 8003f16:	e125      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	f040 811a 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4a:	f023 0302 	bic.w	r3, r3, #2
 8003f4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	335d      	adds	r3, #93	; 0x5d
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d137      	bne.n	8003fd6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	335c      	adds	r3, #92	; 0x5c
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	333f      	adds	r3, #63	; 0x3f
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d00b      	beq.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	333f      	adds	r3, #63	; 0x3f
 8003fa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	f040 80c5 	bne.w	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3351      	adds	r3, #81	; 0x51
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f083 0301 	eor.w	r3, r3, #1
 8003fbe:	b2d8      	uxtb	r0, r3
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3351      	adds	r3, #81	; 0x51
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e0ad      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	335d      	adds	r3, #93	; 0x5d
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d10a      	bne.n	8004002 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	335c      	adds	r3, #92	; 0x5c
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e097      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	335d      	adds	r3, #93	; 0x5d
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d10a      	bne.n	800402e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	440b      	add	r3, r1
 8004026:	335c      	adds	r3, #92	; 0x5c
 8004028:	2202      	movs	r2, #2
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e081      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	335d      	adds	r3, #93	; 0x5d
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b05      	cmp	r3, #5
 8004042:	d10a      	bne.n	800405a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	440b      	add	r3, r1
 8004052:	335c      	adds	r3, #92	; 0x5c
 8004054:	2205      	movs	r2, #5
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e06b      	b.n	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	335d      	adds	r3, #93	; 0x5d
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d00a      	beq.n	8004086 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	335d      	adds	r3, #93	; 0x5d
 8004080:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004082:	2b08      	cmp	r3, #8
 8004084:	d155      	bne.n	8004132 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	440b      	add	r3, r1
 8004094:	3358      	adds	r3, #88	; 0x58
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4403      	add	r3, r0
 80040a8:	3358      	adds	r3, #88	; 0x58
 80040aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	3358      	adds	r3, #88	; 0x58
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d914      	bls.n	80040ec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	3358      	adds	r3, #88	; 0x58
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	335c      	adds	r3, #92	; 0x5c
 80040e6:	2204      	movs	r2, #4
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e009      	b.n	8004100 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	335c      	adds	r3, #92	; 0x5c
 80040fc:	2202      	movs	r2, #2
 80040fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004116:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800411e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	461a      	mov	r2, r3
 8004140:	2302      	movs	r3, #2
 8004142:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	335c      	adds	r3, #92	; 0x5c
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	4601      	mov	r1, r0
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f00a f820 	bl	800e1a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	0c5b      	lsrs	r3, r3, #17
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d003      	beq.n	80041b0 <HCD_RXQLVL_IRQHandler+0x44>
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	f000 8082 	beq.w	80042b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041ae:	e083      	b.n	80042b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d07f      	beq.n	80042b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	3344      	adds	r3, #68	; 0x44
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d074      	beq.n	80042b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	440b      	add	r3, r1
 80041de:	3344      	adds	r3, #68	; 0x44
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	b292      	uxth	r2, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f003 fd3f 	bl	8007c6a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	440b      	add	r3, r1
 80041fa:	3344      	adds	r3, #68	; 0x44
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4403      	add	r3, r0
 8004210:	3344      	adds	r3, #68	; 0x44
 8004212:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	334c      	adds	r3, #76	; 0x4c
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	18d1      	adds	r1, r2, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4403      	add	r3, r0
 8004238:	334c      	adds	r3, #76	; 0x4c
 800423a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d031      	beq.n	80042b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004268:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004270:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	3350      	adds	r3, #80	; 0x50
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	f083 0301 	eor.w	r3, r3, #1
 800429a:	b2d8      	uxtb	r0, r3
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	3350      	adds	r3, #80	; 0x50
 80042ac:	4602      	mov	r2, r0
 80042ae:	701a      	strb	r2, [r3, #0]
      break;
 80042b0:	e001      	b.n	80042b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80042b6:	bf00      	nop
  }
}
 80042b8:	bf00      	nop
 80042ba:	3728      	adds	r7, #40	; 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	1ff80000 	.word	0x1ff80000

080042c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d10b      	bne.n	8004314 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f009 ff30 	bl	800e16c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b08      	cmp	r3, #8
 800431c:	d132      	bne.n	8004384 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f043 0308 	orr.w	r3, r3, #8
 8004324:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d126      	bne.n	800437e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d113      	bne.n	8004360 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800433e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004342:	d106      	bne.n	8004352 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f003 fdc8 	bl	8007ee0 <USB_InitFSLSPClkSel>
 8004350:	e011      	b.n	8004376 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f003 fdc1 	bl	8007ee0 <USB_InitFSLSPClkSel>
 800435e:	e00a      	b.n	8004376 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800436e:	461a      	mov	r2, r3
 8004370:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004374:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f009 ff22 	bl	800e1c0 <HAL_HCD_PortEnabled_Callback>
 800437c:	e002      	b.n	8004384 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f009 ff2c 	bl	800e1dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b20      	cmp	r3, #32
 800438c:	d103      	bne.n	8004396 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f043 0320 	orr.w	r3, r3, #32
 8004394:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	6013      	str	r3, [r2, #0]
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e11f      	b.n	80045fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f98c 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800440e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004410:	f002 fb36 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a7b      	ldr	r2, [pc, #492]	; (8004608 <HAL_I2C_Init+0x25c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d807      	bhi.n	8004430 <HAL_I2C_Init+0x84>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a7a      	ldr	r2, [pc, #488]	; (800460c <HAL_I2C_Init+0x260>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e006      	b.n	800443e <HAL_I2C_Init+0x92>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a77      	ldr	r2, [pc, #476]	; (8004610 <HAL_I2C_Init+0x264>)
 8004434:	4293      	cmp	r3, r2
 8004436:	bf94      	ite	ls
 8004438:	2301      	movls	r3, #1
 800443a:	2300      	movhi	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0db      	b.n	80045fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a72      	ldr	r2, [pc, #456]	; (8004614 <HAL_I2C_Init+0x268>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0c9b      	lsrs	r3, r3, #18
 8004450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a64      	ldr	r2, [pc, #400]	; (8004608 <HAL_I2C_Init+0x25c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d802      	bhi.n	8004480 <HAL_I2C_Init+0xd4>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3301      	adds	r3, #1
 800447e:	e009      	b.n	8004494 <HAL_I2C_Init+0xe8>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_I2C_Init+0x26c>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	3301      	adds	r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	430b      	orrs	r3, r1
 800449a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4956      	ldr	r1, [pc, #344]	; (8004608 <HAL_I2C_Init+0x25c>)
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d80d      	bhi.n	80044d0 <HAL_I2C_Init+0x124>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e59      	subs	r1, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	bf38      	it	cc
 80044cc:	2304      	movcc	r3, #4
 80044ce:	e04f      	b.n	8004570 <HAL_I2C_Init+0x1c4>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d111      	bne.n	80044fc <HAL_I2C_Init+0x150>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	1e58      	subs	r0, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	440b      	add	r3, r1
 80044e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e012      	b.n	8004522 <HAL_I2C_Init+0x176>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1e58      	subs	r0, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	0099      	lsls	r1, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004512:	3301      	adds	r3, #1
 8004514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_I2C_Init+0x17e>
 8004526:	2301      	movs	r3, #1
 8004528:	e022      	b.n	8004570 <HAL_I2C_Init+0x1c4>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <HAL_I2C_Init+0x1a4>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1e58      	subs	r0, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	440b      	add	r3, r1
 8004540:	fbb0 f3f3 	udiv	r3, r0, r3
 8004544:	3301      	adds	r3, #1
 8004546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	e00f      	b.n	8004570 <HAL_I2C_Init+0x1c4>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1e58      	subs	r0, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6859      	ldr	r1, [r3, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	0099      	lsls	r1, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	fbb0 f3f3 	udiv	r3, r0, r3
 8004566:	3301      	adds	r3, #1
 8004568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	6809      	ldr	r1, [r1, #0]
 8004574:	4313      	orrs	r3, r2
 8004576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800459e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6911      	ldr	r1, [r2, #16]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68d2      	ldr	r2, [r2, #12]
 80045aa:	4311      	orrs	r1, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	000186a0 	.word	0x000186a0
 800460c:	001e847f 	.word	0x001e847f
 8004610:	003d08ff 	.word	0x003d08ff
 8004614:	431bde83 	.word	0x431bde83
 8004618:	10624dd3 	.word	0x10624dd3

0800461c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	461a      	mov	r2, r3
 8004628:	460b      	mov	r3, r1
 800462a:	817b      	strh	r3, [r7, #10]
 800462c:	4613      	mov	r3, r2
 800462e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004630:	f7fd fae2 	bl	8001bf8 <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b20      	cmp	r3, #32
 8004640:	f040 80e0 	bne.w	8004804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2319      	movs	r3, #25
 800464a:	2201      	movs	r2, #1
 800464c:	4970      	ldr	r1, [pc, #448]	; (8004810 <HAL_I2C_Master_Transmit+0x1f4>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fc58 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
 800465c:	e0d3      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_I2C_Master_Transmit+0x50>
 8004668:	2302      	movs	r3, #2
 800466a:	e0cc      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d007      	beq.n	8004692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2221      	movs	r2, #33	; 0x21
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2210      	movs	r2, #16
 80046ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a50      	ldr	r2, [pc, #320]	; (8004814 <HAL_I2C_Master_Transmit+0x1f8>)
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046d4:	8979      	ldrh	r1, [r7, #10]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fac2 	bl	8004c64 <I2C_MasterRequestWrite>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e08d      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004700:	e066      	b.n	80047d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fcd2 	bl	80050b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06b      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d11b      	bne.n	80047a4 <HAL_I2C_Master_Transmit+0x188>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	6a39      	ldr	r1, [r7, #32]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fcc2 	bl	8005132 <I2C_WaitOnBTFFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d107      	bne.n	80047cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01a      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d194      	bne.n	8004702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	00100002 	.word	0x00100002
 8004814:	ffff0000 	.word	0xffff0000

08004818 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	; 0x30
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	461a      	mov	r2, r3
 8004824:	460b      	mov	r3, r1
 8004826:	817b      	strh	r3, [r7, #10]
 8004828:	4613      	mov	r3, r2
 800482a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800482c:	f7fd f9e4 	bl	8001bf8 <HAL_GetTick>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b20      	cmp	r3, #32
 800483c:	f040 820b 	bne.w	8004c56 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2319      	movs	r3, #25
 8004846:	2201      	movs	r2, #1
 8004848:	497c      	ldr	r1, [pc, #496]	; (8004a3c <HAL_I2C_Master_Receive+0x224>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fb5a 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
 8004858:	e1fe      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_I2C_Master_Receive+0x50>
 8004864:	2302      	movs	r3, #2
 8004866:	e1f7      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d007      	beq.n	800488e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800489c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2222      	movs	r2, #34	; 0x22
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2210      	movs	r2, #16
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a5c      	ldr	r2, [pc, #368]	; (8004a40 <HAL_I2C_Master_Receive+0x228>)
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048d0:	8979      	ldrh	r1, [r7, #10]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa46 	bl	8004d68 <I2C_MasterRequestRead>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1b8      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e18c      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b01      	cmp	r3, #1
 800491c:	d11b      	bne.n	8004956 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e16c      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11b      	bne.n	8004996 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	e14c      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049bc:	e138      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	f200 80f1 	bhi.w	8004baa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d123      	bne.n	8004a18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fbed 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e139      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a16:	e10b      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d14e      	bne.n	8004abe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2200      	movs	r2, #0
 8004a28:	4906      	ldr	r1, [pc, #24]	; (8004a44 <HAL_I2C_Master_Receive+0x22c>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fa6a 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e10e      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
 8004a3a:	bf00      	nop
 8004a3c:	00100002 	.word	0x00100002
 8004a40:	ffff0000 	.word	0xffff0000
 8004a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004abc:	e0b8      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4966      	ldr	r1, [pc, #408]	; (8004c60 <HAL_I2C_Master_Receive+0x448>)
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fa1b 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0bf      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	2200      	movs	r2, #0
 8004b22:	494f      	ldr	r1, [pc, #316]	; (8004c60 <HAL_I2C_Master_Receive+0x448>)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f9ed 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e091      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba8:	e042      	b.n	8004c30 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fb00 	bl	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e04c      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d118      	bne.n	8004c30 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f47f aec2 	bne.w	80049be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3728      	adds	r7, #40	; 0x28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	00010004 	.word	0x00010004

08004c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	460b      	mov	r3, r1
 8004c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d006      	beq.n	8004c8e <I2C_MasterRequestWrite+0x2a>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d003      	beq.n	8004c8e <I2C_MasterRequestWrite+0x2a>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c8c:	d108      	bne.n	8004ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e00b      	b.n	8004cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2b12      	cmp	r3, #18
 8004ca6:	d107      	bne.n	8004cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f91d 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d103      	bne.n	8004ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e035      	b.n	8004d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cf4:	d108      	bne.n	8004d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d04:	611a      	str	r2, [r3, #16]
 8004d06:	e01b      	b.n	8004d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	11db      	asrs	r3, r3, #7
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0306 	and.w	r3, r3, #6
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f063 030f 	orn	r3, r3, #15
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	490e      	ldr	r1, [pc, #56]	; (8004d60 <I2C_MasterRequestWrite+0xfc>)
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f943 	bl	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e010      	b.n	8004d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4907      	ldr	r1, [pc, #28]	; (8004d64 <I2C_MasterRequestWrite+0x100>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f933 	bl	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	00010008 	.word	0x00010008
 8004d64:	00010002 	.word	0x00010002

08004d68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	460b      	mov	r3, r1
 8004d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d006      	beq.n	8004da2 <I2C_MasterRequestRead+0x3a>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d003      	beq.n	8004da2 <I2C_MasterRequestRead+0x3a>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da0:	d108      	bne.n	8004db4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e00b      	b.n	8004dcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	2b11      	cmp	r3, #17
 8004dba:	d107      	bne.n	8004dcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f893 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df2:	d103      	bne.n	8004dfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e079      	b.n	8004ef4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e08:	d108      	bne.n	8004e1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e0a:	897b      	ldrh	r3, [r7, #10]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	611a      	str	r2, [r3, #16]
 8004e1a:	e05f      	b.n	8004edc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e1c:	897b      	ldrh	r3, [r7, #10]
 8004e1e:	11db      	asrs	r3, r3, #7
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0306 	and.w	r3, r3, #6
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f063 030f 	orn	r3, r3, #15
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4930      	ldr	r1, [pc, #192]	; (8004efc <I2C_MasterRequestRead+0x194>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8b9 	bl	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e054      	b.n	8004ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4929      	ldr	r1, [pc, #164]	; (8004f00 <I2C_MasterRequestRead+0x198>)
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f8a9 	bl	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e044      	b.n	8004ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f831 	bl	8004f04 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb6:	d103      	bne.n	8004ec0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e017      	b.n	8004ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ec4:	897b      	ldrh	r3, [r7, #10]
 8004ec6:	11db      	asrs	r3, r3, #7
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f003 0306 	and.w	r3, r3, #6
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f063 030e 	orn	r3, r3, #14
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4907      	ldr	r1, [pc, #28]	; (8004f00 <I2C_MasterRequestRead+0x198>)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f865 	bl	8004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	00010008 	.word	0x00010008
 8004f00:	00010002 	.word	0x00010002

08004f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f14:	e025      	b.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d021      	beq.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7fc fe6b 	bl	8001bf8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e023      	b.n	8004faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10d      	bne.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf0c      	ite	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	2300      	movne	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	e00c      	b.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d0b6      	beq.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fc0:	e051      	b.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d123      	bne.n	800501a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e046      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d021      	beq.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fc fde9 	bl	8001bf8 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d116      	bne.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e020      	b.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10c      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e00b      	b.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	43da      	mvns	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d18d      	bne.n	8004fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050bc:	e02d      	b.n	800511a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f8ce 	bl	8005260 <I2C_IsAcknowledgeFailed>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e02d      	b.n	800512a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d021      	beq.n	800511a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fc fd8f 	bl	8001bf8 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e007      	b.n	800512a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d1ca      	bne.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800513e:	e02d      	b.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f88d 	bl	8005260 <I2C_IsAcknowledgeFailed>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e02d      	b.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d021      	beq.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005158:	f7fc fd4e 	bl	8001bf8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	d302      	bcc.n	800516e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e007      	b.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d1ca      	bne.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c0:	e042      	b.n	8005248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d119      	bne.n	8005204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0210 	mvn.w	r2, #16
 80051d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e029      	b.n	8005258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fc fcf8 	bl	8001bf8 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e007      	b.n	8005258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d1b5      	bne.n	80051c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005276:	d11b      	bne.n	80052b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e128      	b.n	8005524 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a90      	ldr	r2, [pc, #576]	; (800552c <HAL_I2S_Init+0x26c>)
 80052ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc fa47 	bl	8001780 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005308:	f023 030f 	bic.w	r3, r3, #15
 800530c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2202      	movs	r2, #2
 8005314:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d060      	beq.n	80053e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005326:	2310      	movs	r3, #16
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e001      	b.n	8005330 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800532c:	2320      	movs	r3, #32
 800532e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b20      	cmp	r3, #32
 8005336:	d802      	bhi.n	800533e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800533e:	2001      	movs	r0, #1
 8005340:	f001 fcc0 	bl	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005344:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534e:	d125      	bne.n	800539c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	3305      	adds	r3, #5
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e01f      	b.n	80053ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	3305      	adds	r3, #5
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e00e      	b.n	80053ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	3305      	adds	r3, #5
 80053b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4a5c      	ldr	r2, [pc, #368]	; (8005530 <HAL_I2S_Init+0x270>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e003      	b.n	80053e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053e0:	2302      	movs	r3, #2
 80053e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d902      	bls.n	80053f4 <HAL_I2S_Init+0x134>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2bff      	cmp	r3, #255	; 0xff
 80053f2:	d907      	bls.n	8005404 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f8:	f043 0210 	orr.w	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e08f      	b.n	8005524 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	ea42 0103 	orr.w	r1, r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	430a      	orrs	r2, r1
 8005416:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005422:	f023 030f 	bic.w	r3, r3, #15
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6851      	ldr	r1, [r2, #4]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	4311      	orrs	r1, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68d2      	ldr	r2, [r2, #12]
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6992      	ldr	r2, [r2, #24]
 800543a:	430a      	orrs	r2, r1
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005446:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d161      	bne.n	8005514 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <HAL_I2S_Init+0x274>)
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a37      	ldr	r2, [pc, #220]	; (8005538 <HAL_I2S_Init+0x278>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_I2S_Init+0x1a4>
 8005460:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_I2S_Init+0x27c>)
 8005462:	e001      	b.n	8005468 <HAL_I2S_Init+0x1a8>
 8005464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	4932      	ldr	r1, [pc, #200]	; (8005538 <HAL_I2S_Init+0x278>)
 8005470:	428a      	cmp	r2, r1
 8005472:	d101      	bne.n	8005478 <HAL_I2S_Init+0x1b8>
 8005474:	4a31      	ldr	r2, [pc, #196]	; (800553c <HAL_I2S_Init+0x27c>)
 8005476:	e001      	b.n	800547c <HAL_I2S_Init+0x1bc>
 8005478:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800547c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005480:	f023 030f 	bic.w	r3, r3, #15
 8005484:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <HAL_I2S_Init+0x278>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d101      	bne.n	8005494 <HAL_I2S_Init+0x1d4>
 8005490:	4b2a      	ldr	r3, [pc, #168]	; (800553c <HAL_I2S_Init+0x27c>)
 8005492:	e001      	b.n	8005498 <HAL_I2S_Init+0x1d8>
 8005494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005498:	2202      	movs	r2, #2
 800549a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a25      	ldr	r2, [pc, #148]	; (8005538 <HAL_I2S_Init+0x278>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <HAL_I2S_Init+0x1ea>
 80054a6:	4b25      	ldr	r3, [pc, #148]	; (800553c <HAL_I2S_Init+0x27c>)
 80054a8:	e001      	b.n	80054ae <HAL_I2S_Init+0x1ee>
 80054aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ba:	d003      	beq.n	80054c4 <HAL_I2S_Init+0x204>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d103      	bne.n	80054cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80054c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e001      	b.n	80054d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	b299      	uxth	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80054e6:	4303      	orrs	r3, r0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	430b      	orrs	r3, r1
 80054ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <HAL_I2S_Init+0x278>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_I2S_Init+0x24c>
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_I2S_Init+0x27c>)
 800550a:	e001      	b.n	8005510 <HAL_I2S_Init+0x250>
 800550c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005510:	897a      	ldrh	r2, [r7, #10]
 8005512:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	08005bd1 	.word	0x08005bd1
 8005530:	cccccccd 	.word	0xcccccccd
 8005534:	08005d59 	.word	0x08005d59
 8005538:	40003800 	.word	0x40003800
 800553c:	40003400 	.word	0x40003400

08005540 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_I2S_Transmit_DMA+0x1a>
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e08e      	b.n	800567c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_I2S_Transmit_DMA+0x2e>
 800556a:	2302      	movs	r3, #2
 800556c:	e086      	b.n	800567c <HAL_I2S_Transmit_DMA+0x13c>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d005      	beq.n	800558e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
 800558c:	e076      	b.n	800567c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2203      	movs	r2, #3
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b03      	cmp	r3, #3
 80055b2:	d002      	beq.n	80055ba <HAL_I2S_Transmit_DMA+0x7a>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b05      	cmp	r3, #5
 80055b8:	d10a      	bne.n	80055d0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055ce:	e005      	b.n	80055dc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	4a28      	ldr	r2, [pc, #160]	; (8005684 <HAL_I2S_Transmit_DMA+0x144>)
 80055e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4a27      	ldr	r2, [pc, #156]	; (8005688 <HAL_I2S_Transmit_DMA+0x148>)
 80055ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	4a26      	ldr	r2, [pc, #152]	; (800568c <HAL_I2S_Transmit_DMA+0x14c>)
 80055f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005604:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800560c:	f7fc fce2 	bl	8001fd4 <HAL_DMA_Start_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00f      	beq.n	8005636 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f043 0208 	orr.w	r2, r3, #8
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e022      	b.n	800567c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005652:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d107      	bne.n	8005672 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0202 	orr.w	r2, r2, #2
 8005670:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08005aaf 	.word	0x08005aaf
 8005688:	08005a6d 	.word	0x08005a6d
 800568c:	08005acb 	.word	0x08005acb

08005690 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d004      	beq.n	80056b0 <HAL_I2S_DMAStop+0x20>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 80d1 	bne.w	8005852 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fc fce1 	bl	8002084 <HAL_DMA_Abort>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f043 0208 	orr.w	r2, r3, #8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80056d8:	2364      	movs	r3, #100	; 0x64
 80056da:	2201      	movs	r2, #1
 80056dc:	2102      	movs	r1, #2
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fb00 	bl	8005ce4 <I2S_WaitFlagStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005702:	2364      	movs	r3, #100	; 0x64
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 faeb 	bl	8005ce4 <I2S_WaitFlagStateUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005718:	f043 0201 	orr.w	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0202 	bic.w	r2, r2, #2
 8005758:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b05      	cmp	r3, #5
 8005764:	f040 8165 	bne.w	8005a32 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	4618      	mov	r0, r3
 8005776:	f7fc fc85 	bl	8002084 <HAL_DMA_Abort>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f043 0208 	orr.w	r2, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a8a      	ldr	r2, [pc, #552]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <HAL_I2S_DMAStop+0x10e>
 800579a:	4b8a      	ldr	r3, [pc, #552]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 800579c:	e001      	b.n	80057a2 <HAL_I2S_DMAStop+0x112>
 800579e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4985      	ldr	r1, [pc, #532]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80057aa:	428b      	cmp	r3, r1
 80057ac:	d101      	bne.n	80057b2 <HAL_I2S_DMAStop+0x122>
 80057ae:	4b85      	ldr	r3, [pc, #532]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80057b0:	e001      	b.n	80057b6 <HAL_I2S_DMAStop+0x126>
 80057b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ba:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a7e      	ldr	r2, [pc, #504]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <HAL_I2S_DMAStop+0x13e>
 80057ca:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80057cc:	e001      	b.n	80057d2 <HAL_I2S_DMAStop+0x142>
 80057ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a79      	ldr	r2, [pc, #484]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d101      	bne.n	80057e4 <HAL_I2S_DMAStop+0x154>
 80057e0:	4b78      	ldr	r3, [pc, #480]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80057e2:	e001      	b.n	80057e8 <HAL_I2S_DMAStop+0x158>
 80057e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a73      	ldr	r2, [pc, #460]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d101      	bne.n	80057fc <HAL_I2S_DMAStop+0x16c>
 80057f8:	4b72      	ldr	r3, [pc, #456]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80057fa:	e001      	b.n	8005800 <HAL_I2S_DMAStop+0x170>
 80057fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	496e      	ldr	r1, [pc, #440]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 8005808:	428b      	cmp	r3, r1
 800580a:	d101      	bne.n	8005810 <HAL_I2S_DMAStop+0x180>
 800580c:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 800580e:	e001      	b.n	8005814 <HAL_I2S_DMAStop+0x184>
 8005810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800583a:	e0fa      	b.n	8005a32 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a5f      	ldr	r2, [pc, #380]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_I2S_DMAStop+0x1ba>
 8005846:	4b5f      	ldr	r3, [pc, #380]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005848:	e001      	b.n	800584e <HAL_I2S_DMAStop+0x1be>
 800584a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800584e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005850:	e0ef      	b.n	8005a32 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585a:	d005      	beq.n	8005868 <HAL_I2S_DMAStop+0x1d8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005864:	f040 80e5 	bne.w	8005a32 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00f      	beq.n	8005890 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	4618      	mov	r0, r3
 8005876:	f7fc fc05 	bl	8002084 <HAL_DMA_Abort>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	f043 0208 	orr.w	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b05      	cmp	r3, #5
 800589a:	f040 809a 	bne.w	80059d2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fc fbea 	bl	8002084 <HAL_DMA_Abort>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	f043 0208 	orr.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80058c6:	f7fc f997 	bl	8001bf8 <HAL_GetTick>
 80058ca:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80058cc:	e012      	b.n	80058f4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80058ce:	f7fc f993 	bl	8001bf8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b64      	cmp	r3, #100	; 0x64
 80058da:	d90b      	bls.n	80058f4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f043 0201 	orr.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a31      	ldr	r2, [pc, #196]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d101      	bne.n	8005902 <HAL_I2S_DMAStop+0x272>
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005900:	e001      	b.n	8005906 <HAL_I2S_DMAStop+0x276>
 8005902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d1de      	bne.n	80058ce <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005910:	e012      	b.n	8005938 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005912:	f7fc f971 	bl	8001bf8 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b64      	cmp	r3, #100	; 0x64
 800591e:	d90b      	bls.n	8005938 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a20      	ldr	r2, [pc, #128]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_I2S_DMAStop+0x2b6>
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005944:	e001      	b.n	800594a <HAL_I2S_DMAStop+0x2ba>
 8005946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d0de      	beq.n	8005912 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_I2S_DMAStop+0x2d2>
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005960:	e001      	b.n	8005966 <HAL_I2S_DMAStop+0x2d6>
 8005962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4914      	ldr	r1, [pc, #80]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 800596e:	428b      	cmp	r3, r1
 8005970:	d101      	bne.n	8005976 <HAL_I2S_DMAStop+0x2e6>
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005974:	e001      	b.n	800597a <HAL_I2S_DMAStop+0x2ea>
 8005976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800597a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_I2S_DMAStop+0x302>
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 8005990:	e001      	b.n	8005996 <HAL_I2S_DMAStop+0x306>
 8005992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a07      	ldr	r2, [pc, #28]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_I2S_DMAStop+0x31a>
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80059a8:	e001      	b.n	80059ae <HAL_I2S_DMAStop+0x31e>
 80059aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4902      	ldr	r1, [pc, #8]	; (80059c0 <HAL_I2S_DMAStop+0x330>)
 80059b6:	428b      	cmp	r3, r1
 80059b8:	d106      	bne.n	80059c8 <HAL_I2S_DMAStop+0x338>
 80059ba:	4b02      	ldr	r3, [pc, #8]	; (80059c4 <HAL_I2S_DMAStop+0x334>)
 80059bc:	e006      	b.n	80059cc <HAL_I2S_DMAStop+0x33c>
 80059be:	bf00      	nop
 80059c0:	40003800 	.word	0x40003800
 80059c4:	40003400 	.word	0x40003400
 80059c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059cc:	f022 0202 	bic.w	r2, r2, #2
 80059d0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a10:	d10c      	bne.n	8005a2c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e002      	b.n	8005a32 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3720      	adds	r7, #32
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0202 	bic.w	r2, r2, #2
 8005a90:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7fb f837 	bl	8000b14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f7fb f83b 	bl	8000b38 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0203 	bic.w	r2, r2, #3
 8005ae6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	f043 0208 	orr.w	r2, r3, #8
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff ffa5 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fa ffd5 	bl	8000b14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	b292      	uxth	r2, r2
 8005b86:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10e      	bne.n	8005bc8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bb8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff3e 	bl	8005a44 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d13a      	bne.n	8005c62 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d109      	bne.n	8005c0a <I2S_IRQHandler+0x3a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d102      	bne.n	8005c0a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffb4 	bl	8005b72 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d126      	bne.n	8005c62 <I2S_IRQHandler+0x92>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d11f      	bne.n	8005c62 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c30:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	f043 0202 	orr.w	r2, r3, #2
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff fefb 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d136      	bne.n	8005cdc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d109      	bne.n	8005c8c <I2S_IRQHandler+0xbc>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d102      	bne.n	8005c8c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff45 	bl	8005b16 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d122      	bne.n	8005cdc <I2S_IRQHandler+0x10c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d11b      	bne.n	8005cdc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cb2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	f043 0204 	orr.w	r2, r3, #4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff febe 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cdc:	bf00      	nop
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf4:	f7fb ff80 	bl	8001bf8 <HAL_GetTick>
 8005cf8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005cfa:	e018      	b.n	8005d2e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d014      	beq.n	8005d2e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005d04:	f7fb ff78 	bl	8001bf8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d902      	bls.n	8005d1a <I2S_WaitFlagStateUntilTimeout+0x36>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e00f      	b.n	8005d4e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4013      	ands	r3, r2
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2301      	moveq	r3, #1
 8005d40:	2300      	movne	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1d7      	bne.n	8005cfc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4aa2      	ldr	r2, [pc, #648]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d101      	bne.n	8005d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d72:	4ba2      	ldr	r3, [pc, #648]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d74:	e001      	b.n	8005d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a9b      	ldr	r2, [pc, #620]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d90:	4b9a      	ldr	r3, [pc, #616]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d92:	e001      	b.n	8005d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d004      	beq.n	8005db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 8099 	bne.w	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d107      	bne.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f925 	bl	8006014 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d107      	bne.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9c8 	bl	8006174 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d13a      	bne.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d035      	beq.n	8005e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7e      	ldr	r2, [pc, #504]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e02:	4b7e      	ldr	r3, [pc, #504]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e04:	e001      	b.n	8005e0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4979      	ldr	r1, [pc, #484]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e12:	428b      	cmp	r3, r1
 8005e14:	d101      	bne.n	8005e1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e16:	4b79      	ldr	r3, [pc, #484]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e18:	e001      	b.n	8005e1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f043 0202 	orr.w	r2, r3, #2
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fdfa 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	f040 80be 	bne.w	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80b8 	beq.w	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a59      	ldr	r2, [pc, #356]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e96:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e98:	e001      	b.n	8005e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4954      	ldr	r1, [pc, #336]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	d101      	bne.n	8005eae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005eaa:	4b54      	ldr	r3, [pc, #336]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eac:	e001      	b.n	8005eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005eb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f043 0204 	orr.w	r2, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fdbc 	bl	8005a58 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ee0:	e084      	b.n	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d107      	bne.n	8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8be 	bl	8006078 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d107      	bne.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8fd 	bl	8006110 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d12f      	bne.n	8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d02a      	beq.n	8005f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2e      	ldr	r2, [pc, #184]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d101      	bne.n	8005f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f46:	e001      	b.n	8005f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4929      	ldr	r1, [pc, #164]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f54:	428b      	cmp	r3, r1
 8005f56:	d101      	bne.n	8005f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f58:	4b28      	ldr	r3, [pc, #160]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f5a:	e001      	b.n	8005f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fd6c 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d131      	bne.n	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d02c      	beq.n	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fa0:	e001      	b.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005fa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4912      	ldr	r1, [pc, #72]	; (8005ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fae:	428b      	cmp	r3, r1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fb4:	e001      	b.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	f043 0204 	orr.w	r2, r3, #4
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fd37 	bl	8005a58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fea:	e000      	b.n	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fec:	bf00      	nop
}
 8005fee:	bf00      	nop
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40003800 	.word	0x40003800
 8005ffc:	40003400 	.word	0x40003400

08006000 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c99      	adds	r1, r3, #2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6251      	str	r1, [r2, #36]	; 0x24
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d113      	bne.n	800606e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006054:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ffc9 	bl	8006000 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c99      	adds	r1, r3, #2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6251      	str	r1, [r2, #36]	; 0x24
 800608a:	8819      	ldrh	r1, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <I2SEx_TxISR_I2SExt+0x90>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d101      	bne.n	800609a <I2SEx_TxISR_I2SExt+0x22>
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <I2SEx_TxISR_I2SExt+0x94>)
 8006098:	e001      	b.n	800609e <I2SEx_TxISR_I2SExt+0x26>
 800609a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609e:	460a      	mov	r2, r1
 80060a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d121      	bne.n	80060fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a12      	ldr	r2, [pc, #72]	; (8006108 <I2SEx_TxISR_I2SExt+0x90>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d101      	bne.n	80060c8 <I2SEx_TxISR_I2SExt+0x50>
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <I2SEx_TxISR_I2SExt+0x94>)
 80060c6:	e001      	b.n	80060cc <I2SEx_TxISR_I2SExt+0x54>
 80060c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	490d      	ldr	r1, [pc, #52]	; (8006108 <I2SEx_TxISR_I2SExt+0x90>)
 80060d4:	428b      	cmp	r3, r1
 80060d6:	d101      	bne.n	80060dc <I2SEx_TxISR_I2SExt+0x64>
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <I2SEx_TxISR_I2SExt+0x94>)
 80060da:	e001      	b.n	80060e0 <I2SEx_TxISR_I2SExt+0x68>
 80060dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff ff81 	bl	8006000 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40003800 	.word	0x40003800
 800610c:	40003400 	.word	0x40003400

08006110 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68d8      	ldr	r0, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	1c99      	adds	r1, r3, #2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006128:	b282      	uxth	r2, r0
 800612a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d113      	bne.n	800616c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006152:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff ff4a 	bl	8006000 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a20      	ldr	r2, [pc, #128]	; (8006204 <I2SEx_RxISR_I2SExt+0x90>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <I2SEx_RxISR_I2SExt+0x16>
 8006186:	4b20      	ldr	r3, [pc, #128]	; (8006208 <I2SEx_RxISR_I2SExt+0x94>)
 8006188:	e001      	b.n	800618e <I2SEx_RxISR_I2SExt+0x1a>
 800618a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800618e:	68d8      	ldr	r0, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	1c99      	adds	r1, r3, #2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	62d1      	str	r1, [r2, #44]	; 0x2c
 800619a:	b282      	uxth	r2, r0
 800619c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d121      	bne.n	80061fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <I2SEx_RxISR_I2SExt+0x90>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d101      	bne.n	80061c4 <I2SEx_RxISR_I2SExt+0x50>
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <I2SEx_RxISR_I2SExt+0x94>)
 80061c2:	e001      	b.n	80061c8 <I2SEx_RxISR_I2SExt+0x54>
 80061c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	490d      	ldr	r1, [pc, #52]	; (8006204 <I2SEx_RxISR_I2SExt+0x90>)
 80061d0:	428b      	cmp	r3, r1
 80061d2:	d101      	bne.n	80061d8 <I2SEx_RxISR_I2SExt+0x64>
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <I2SEx_RxISR_I2SExt+0x94>)
 80061d6:	e001      	b.n	80061dc <I2SEx_RxISR_I2SExt+0x68>
 80061d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ff03 	bl	8006000 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40003800 	.word	0x40003800
 8006208:	40003400 	.word	0x40003400

0800620c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e25b      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d075      	beq.n	8006316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800622a:	4ba3      	ldr	r3, [pc, #652]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
 8006232:	2b04      	cmp	r3, #4
 8006234:	d00c      	beq.n	8006250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4ba0      	ldr	r3, [pc, #640]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800623e:	2b08      	cmp	r3, #8
 8006240:	d112      	bne.n	8006268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006242:	4b9d      	ldr	r3, [pc, #628]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624e:	d10b      	bne.n	8006268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006250:	4b99      	ldr	r3, [pc, #612]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d05b      	beq.n	8006314 <HAL_RCC_OscConfig+0x108>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d157      	bne.n	8006314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e236      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d106      	bne.n	8006280 <HAL_RCC_OscConfig+0x74>
 8006272:	4b91      	ldr	r3, [pc, #580]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a90      	ldr	r2, [pc, #576]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e01d      	b.n	80062bc <HAL_RCC_OscConfig+0xb0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x98>
 800628a:	4b8b      	ldr	r3, [pc, #556]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a8a      	ldr	r2, [pc, #552]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	4b88      	ldr	r3, [pc, #544]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a87      	ldr	r2, [pc, #540]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e00b      	b.n	80062bc <HAL_RCC_OscConfig+0xb0>
 80062a4:	4b84      	ldr	r3, [pc, #528]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a83      	ldr	r2, [pc, #524]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80062aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4b81      	ldr	r3, [pc, #516]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a80      	ldr	r2, [pc, #512]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d013      	beq.n	80062ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c4:	f7fb fc98 	bl	8001bf8 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062cc:	f7fb fc94 	bl	8001bf8 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b64      	cmp	r3, #100	; 0x64
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e1fb      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062de:	4b76      	ldr	r3, [pc, #472]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0xc0>
 80062ea:	e014      	b.n	8006316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fb fc84 	bl	8001bf8 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f4:	f7fb fc80 	bl	8001bf8 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	; 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e1e7      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006306:	4b6c      	ldr	r3, [pc, #432]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0xe8>
 8006312:	e000      	b.n	8006316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d063      	beq.n	80063ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006322:	4b65      	ldr	r3, [pc, #404]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b62      	ldr	r3, [pc, #392]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006336:	2b08      	cmp	r3, #8
 8006338:	d11c      	bne.n	8006374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633a:	4b5f      	ldr	r3, [pc, #380]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d116      	bne.n	8006374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006346:	4b5c      	ldr	r3, [pc, #368]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_RCC_OscConfig+0x152>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d001      	beq.n	800635e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e1bb      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635e:	4b56      	ldr	r3, [pc, #344]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4952      	ldr	r1, [pc, #328]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800636e:	4313      	orrs	r3, r2
 8006370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	e03a      	b.n	80063ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800637c:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <HAL_RCC_OscConfig+0x2b0>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fb fc39 	bl	8001bf8 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800638a:	f7fb fc35 	bl	8001bf8 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e19c      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639c:	4b46      	ldr	r3, [pc, #280]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a8:	4b43      	ldr	r3, [pc, #268]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4940      	ldr	r1, [pc, #256]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]
 80063bc:	e015      	b.n	80063ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063be:	4b3f      	ldr	r3, [pc, #252]	; (80064bc <HAL_RCC_OscConfig+0x2b0>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fb fc18 	bl	8001bf8 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fb fc14 	bl	8001bf8 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e17b      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063de:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d030      	beq.n	8006458 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_RCC_OscConfig+0x2b4>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fb fbf8 	bl	8001bf8 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640c:	f7fb fbf4 	bl	8001bf8 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e15b      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641e:	4b26      	ldr	r3, [pc, #152]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x200>
 800642a:	e015      	b.n	8006458 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <HAL_RCC_OscConfig+0x2b4>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006432:	f7fb fbe1 	bl	8001bf8 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800643a:	f7fb fbdd 	bl	8001bf8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e144      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f0      	bne.n	800643a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80a0 	beq.w	80065a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4a0e      	ldr	r2, [pc, #56]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	; 0x40
 8006486:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_RCC_OscConfig+0x2b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d121      	bne.n	80064e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <HAL_RCC_OscConfig+0x2b8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <HAL_RCC_OscConfig+0x2b8>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fb fba3 	bl	8001bf8 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e011      	b.n	80064da <HAL_RCC_OscConfig+0x2ce>
 80064b6:	bf00      	nop
 80064b8:	40023800 	.word	0x40023800
 80064bc:	42470000 	.word	0x42470000
 80064c0:	42470e80 	.word	0x42470e80
 80064c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c8:	f7fb fb96 	bl	8001bf8 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0fd      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064da:	4b81      	ldr	r3, [pc, #516]	; (80066e0 <HAL_RCC_OscConfig+0x4d4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d106      	bne.n	80064fc <HAL_RCC_OscConfig+0x2f0>
 80064ee:	4b7d      	ldr	r3, [pc, #500]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	4a7c      	ldr	r2, [pc, #496]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	6713      	str	r3, [r2, #112]	; 0x70
 80064fa:	e01c      	b.n	8006536 <HAL_RCC_OscConfig+0x32a>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b05      	cmp	r3, #5
 8006502:	d10c      	bne.n	800651e <HAL_RCC_OscConfig+0x312>
 8006504:	4b77      	ldr	r3, [pc, #476]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	4a76      	ldr	r2, [pc, #472]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800650a:	f043 0304 	orr.w	r3, r3, #4
 800650e:	6713      	str	r3, [r2, #112]	; 0x70
 8006510:	4b74      	ldr	r3, [pc, #464]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	4a73      	ldr	r2, [pc, #460]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	6713      	str	r3, [r2, #112]	; 0x70
 800651c:	e00b      	b.n	8006536 <HAL_RCC_OscConfig+0x32a>
 800651e:	4b71      	ldr	r3, [pc, #452]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	4a70      	ldr	r2, [pc, #448]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	6713      	str	r3, [r2, #112]	; 0x70
 800652a:	4b6e      	ldr	r3, [pc, #440]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	4a6d      	ldr	r2, [pc, #436]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d015      	beq.n	800656a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653e:	f7fb fb5b 	bl	8001bf8 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fb fb57 	bl	8001bf8 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e0bc      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655c:	4b61      	ldr	r3, [pc, #388]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ee      	beq.n	8006546 <HAL_RCC_OscConfig+0x33a>
 8006568:	e014      	b.n	8006594 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656a:	f7fb fb45 	bl	8001bf8 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006570:	e00a      	b.n	8006588 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fb fb41 	bl	8001bf8 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e0a6      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006588:	4b56      	ldr	r3, [pc, #344]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1ee      	bne.n	8006572 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d105      	bne.n	80065a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800659a:	4b52      	ldr	r3, [pc, #328]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	4a51      	ldr	r2, [pc, #324]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 80065a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8092 	beq.w	80066d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065b0:	4b4c      	ldr	r3, [pc, #304]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d05c      	beq.n	8006676 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d141      	bne.n	8006648 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c4:	4b48      	ldr	r3, [pc, #288]	; (80066e8 <HAL_RCC_OscConfig+0x4dc>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ca:	f7fb fb15 	bl	8001bf8 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065d2:	f7fb fb11 	bl	8001bf8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e078      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e4:	4b3f      	ldr	r3, [pc, #252]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	019b      	lsls	r3, r3, #6
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	3b01      	subs	r3, #1
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	061b      	lsls	r3, r3, #24
 8006614:	4933      	ldr	r1, [pc, #204]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800661a:	4b33      	ldr	r3, [pc, #204]	; (80066e8 <HAL_RCC_OscConfig+0x4dc>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fb faea 	bl	8001bf8 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006628:	f7fb fae6 	bl	8001bf8 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e04d      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663a:	4b2a      	ldr	r3, [pc, #168]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCC_OscConfig+0x41c>
 8006646:	e045      	b.n	80066d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006648:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <HAL_RCC_OscConfig+0x4dc>)
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664e:	f7fb fad3 	bl	8001bf8 <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006654:	e008      	b.n	8006668 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006656:	f7fb facf 	bl	8001bf8 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b02      	cmp	r3, #2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e036      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006668:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f0      	bne.n	8006656 <HAL_RCC_OscConfig+0x44a>
 8006674:	e02e      	b.n	80066d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e029      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <HAL_RCC_OscConfig+0x4d8>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	429a      	cmp	r2, r3
 8006694:	d11c      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d115      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066aa:	4013      	ands	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10d      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d106      	bne.n	80066d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40007000 	.word	0x40007000
 80066e4:	40023800 	.word	0x40023800
 80066e8:	42470060 	.word	0x42470060

080066ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0cc      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006700:	4b68      	ldr	r3, [pc, #416]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90c      	bls.n	8006728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670e:	4b65      	ldr	r3, [pc, #404]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006716:	4b63      	ldr	r3, [pc, #396]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0b8      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d020      	beq.n	8006776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006740:	4b59      	ldr	r3, [pc, #356]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006758:	4b53      	ldr	r3, [pc, #332]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a52      	ldr	r2, [pc, #328]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006764:	4b50      	ldr	r3, [pc, #320]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	494d      	ldr	r1, [pc, #308]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d044      	beq.n	800680c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d119      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d003      	beq.n	80067aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067aa:	4b3f      	ldr	r3, [pc, #252]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e06f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e067      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ca:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f023 0203 	bic.w	r2, r3, #3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4934      	ldr	r1, [pc, #208]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067dc:	f7fb fa0c 	bl	8001bf8 <HAL_GetTick>
 80067e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e4:	f7fb fa08 	bl	8001bf8 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e04f      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fa:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 020c 	and.w	r2, r3, #12
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	429a      	cmp	r2, r3
 800680a:	d1eb      	bne.n	80067e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d20c      	bcs.n	8006834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681a:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006822:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e032      	b.n	800689a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4916      	ldr	r1, [pc, #88]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	490e      	ldr	r1, [pc, #56]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006872:	f000 f821 	bl	80068b8 <HAL_RCC_GetSysClockFreq>
 8006876:	4601      	mov	r1, r0
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <HAL_RCC_ClockConfig+0x1c0>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	fa21 f303 	lsr.w	r3, r1, r3
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 800688c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fb f96c 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023c00 	.word	0x40023c00
 80068a8:	40023800 	.word	0x40023800
 80068ac:	0800f608 	.word	0x0800f608
 80068b0:	20000008 	.word	0x20000008
 80068b4:	2000000c 	.word	0x2000000c

080068b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ce:	4b63      	ldr	r3, [pc, #396]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d007      	beq.n	80068ea <HAL_RCC_GetSysClockFreq+0x32>
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d008      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x38>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 80b4 	bne.w	8006a4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e4:	4b5e      	ldr	r3, [pc, #376]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80068e6:	60bb      	str	r3, [r7, #8]
       break;
 80068e8:	e0b3      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ea:	4b5e      	ldr	r3, [pc, #376]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80068ec:	60bb      	str	r3, [r7, #8]
      break;
 80068ee:	e0b0      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f0:	4b5a      	ldr	r3, [pc, #360]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068fa:	4b58      	ldr	r3, [pc, #352]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d04a      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006906:	4b55      	ldr	r3, [pc, #340]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	f04f 0400 	mov.w	r4, #0
 8006910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	ea03 0501 	and.w	r5, r3, r1
 800691c:	ea04 0602 	and.w	r6, r4, r2
 8006920:	4629      	mov	r1, r5
 8006922:	4632      	mov	r2, r6
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	f04f 0400 	mov.w	r4, #0
 800692c:	0154      	lsls	r4, r2, #5
 800692e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006932:	014b      	lsls	r3, r1, #5
 8006934:	4619      	mov	r1, r3
 8006936:	4622      	mov	r2, r4
 8006938:	1b49      	subs	r1, r1, r5
 800693a:	eb62 0206 	sbc.w	r2, r2, r6
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	f04f 0400 	mov.w	r4, #0
 8006946:	0194      	lsls	r4, r2, #6
 8006948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800694c:	018b      	lsls	r3, r1, #6
 800694e:	1a5b      	subs	r3, r3, r1
 8006950:	eb64 0402 	sbc.w	r4, r4, r2
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	00e2      	lsls	r2, r4, #3
 800695e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006962:	00d9      	lsls	r1, r3, #3
 8006964:	460b      	mov	r3, r1
 8006966:	4614      	mov	r4, r2
 8006968:	195b      	adds	r3, r3, r5
 800696a:	eb44 0406 	adc.w	r4, r4, r6
 800696e:	f04f 0100 	mov.w	r1, #0
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	0262      	lsls	r2, r4, #9
 8006978:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800697c:	0259      	lsls	r1, r3, #9
 800697e:	460b      	mov	r3, r1
 8006980:	4614      	mov	r4, r2
 8006982:	4618      	mov	r0, r3
 8006984:	4621      	mov	r1, r4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f04f 0400 	mov.w	r4, #0
 800698c:	461a      	mov	r2, r3
 800698e:	4623      	mov	r3, r4
 8006990:	f7f9 fc1a 	bl	80001c8 <__aeabi_uldivmod>
 8006994:	4603      	mov	r3, r0
 8006996:	460c      	mov	r4, r1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e049      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699c:	4b2f      	ldr	r3, [pc, #188]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	f04f 0400 	mov.w	r4, #0
 80069a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	ea03 0501 	and.w	r5, r3, r1
 80069b2:	ea04 0602 	and.w	r6, r4, r2
 80069b6:	4629      	mov	r1, r5
 80069b8:	4632      	mov	r2, r6
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	f04f 0400 	mov.w	r4, #0
 80069c2:	0154      	lsls	r4, r2, #5
 80069c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80069c8:	014b      	lsls	r3, r1, #5
 80069ca:	4619      	mov	r1, r3
 80069cc:	4622      	mov	r2, r4
 80069ce:	1b49      	subs	r1, r1, r5
 80069d0:	eb62 0206 	sbc.w	r2, r2, r6
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	f04f 0400 	mov.w	r4, #0
 80069dc:	0194      	lsls	r4, r2, #6
 80069de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80069e2:	018b      	lsls	r3, r1, #6
 80069e4:	1a5b      	subs	r3, r3, r1
 80069e6:	eb64 0402 	sbc.w	r4, r4, r2
 80069ea:	f04f 0100 	mov.w	r1, #0
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	00e2      	lsls	r2, r4, #3
 80069f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069f8:	00d9      	lsls	r1, r3, #3
 80069fa:	460b      	mov	r3, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	195b      	adds	r3, r3, r5
 8006a00:	eb44 0406 	adc.w	r4, r4, r6
 8006a04:	f04f 0100 	mov.w	r1, #0
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	02a2      	lsls	r2, r4, #10
 8006a0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a12:	0299      	lsls	r1, r3, #10
 8006a14:	460b      	mov	r3, r1
 8006a16:	4614      	mov	r4, r2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f04f 0400 	mov.w	r4, #0
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	f7f9 fbcf 	bl	80001c8 <__aeabi_uldivmod>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	0c1b      	lsrs	r3, r3, #16
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	60bb      	str	r3, [r7, #8]
      break;
 8006a4a:	e002      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a4e:	60bb      	str	r3, [r7, #8]
      break;
 8006a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a52:	68bb      	ldr	r3, [r7, #8]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	007a1200 	.word	0x007a1200

08006a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000008 	.word	0x20000008

08006a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a84:	f7ff fff0 	bl	8006a68 <HAL_RCC_GetHCLKFreq>
 8006a88:	4601      	mov	r1, r0
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	0a9b      	lsrs	r3, r3, #10
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	4a03      	ldr	r2, [pc, #12]	; (8006aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a96:	5cd3      	ldrb	r3, [r2, r3]
 8006a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	0800f618 	.word	0x0800f618

08006aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d035      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ad0:	4b62      	ldr	r3, [pc, #392]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad6:	f7fb f88f 	bl	8001bf8 <HAL_GetTick>
 8006ada:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ade:	f7fb f88b 	bl	8001bf8 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e0b0      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006af0:	4b5b      	ldr	r3, [pc, #364]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f0      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	019a      	lsls	r2, r3, #6
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	071b      	lsls	r3, r3, #28
 8006b08:	4955      	ldr	r1, [pc, #340]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b10:	4b52      	ldr	r3, [pc, #328]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b16:	f7fb f86f 	bl	8001bf8 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b1e:	f7fb f86b 	bl	8001bf8 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e090      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b30:	4b4b      	ldr	r3, [pc, #300]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8083 	beq.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	4b44      	ldr	r3, [pc, #272]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	4a43      	ldr	r2, [pc, #268]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6413      	str	r3, [r2, #64]	; 0x40
 8006b5a:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b66:	4b3f      	ldr	r3, [pc, #252]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a3e      	ldr	r2, [pc, #248]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b72:	f7fb f841 	bl	8001bf8 <HAL_GetTick>
 8006b76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b7a:	f7fb f83d 	bl	8001bf8 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e062      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b8c:	4b35      	ldr	r3, [pc, #212]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d02f      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d028      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bb6:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bc0:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bcc:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bd2:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d114      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bde:	f7fb f80b 	bl	8001bf8 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be4:	e00a      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be6:	f7fb f807 	bl	8001bf8 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e02a      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bfc:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0ee      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c14:	d10d      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	490d      	ldr	r1, [pc, #52]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]
 8006c30:	e005      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c3c:	6093      	str	r3, [r2, #8]
 8006c3e:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4a:	4905      	ldr	r1, [pc, #20]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	42470068 	.word	0x42470068
 8006c60:	40023800 	.word	0x40023800
 8006c64:	40007000 	.word	0x40007000
 8006c68:	42470e40 	.word	0x42470e40

08006c6c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c8a:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c90:	0f1b      	lsrs	r3, r3, #28
 8006c92:	f003 0207 	and.w	r2, r3, #7
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006ca2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40023800 	.word	0x40023800

08006cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d13d      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ce2:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d12f      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cf8:	617b      	str	r3, [r7, #20]
          break;
 8006cfa:	e02f      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cfc:	4b1b      	ldr	r3, [pc, #108]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d08:	d108      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0a:	4b18      	ldr	r3, [pc, #96]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e007      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d32:	099b      	lsrs	r3, r3, #6
 8006d34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d46:	0f1b      	lsrs	r3, r3, #28
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	617b      	str	r3, [r7, #20]
          break;
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
          break;
 8006d5a:	bf00      	nop
        }
      }
      break;
 8006d5c:	bf00      	nop
    }
  }
  return frequency;
 8006d5e:	697b      	ldr	r3, [r7, #20]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	00bb8000 	.word	0x00bb8000
 8006d74:	007a1200 	.word	0x007a1200
 8006d78:	00f42400 	.word	0x00f42400

08006d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e056      	b.n	8006e3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d106      	bne.n	8006dae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fa fd8f 	bl	80018cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	ea42 0103 	orr.w	r1, r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	f003 0104 	and.w	r1, r3, #4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	69da      	ldr	r2, [r3, #28]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Transmit+0x22>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e11e      	b.n	80070a4 <HAL_SPI_Transmit+0x260>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e6e:	f7fa fec3 	bl	8001bf8 <HAL_GetTick>
 8006e72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
 8006e86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e88:	e103      	b.n	8007092 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_SPI_Transmit+0x52>
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e9a:	e0fa      	b.n	8007092 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	88fa      	ldrh	r2, [r7, #6]
 8006eb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d107      	bne.n	8006ef4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d007      	beq.n	8006f12 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1a:	d14b      	bne.n	8006fb4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_Transmit+0xe6>
 8006f24:	8afb      	ldrh	r3, [r7, #22]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d13e      	bne.n	8006fa8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	881a      	ldrh	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f4e:	e02b      	b.n	8006fa8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d112      	bne.n	8006f84 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f82:	e011      	b.n	8006fa8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f84:	f7fa fe38 	bl	8001bf8 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d803      	bhi.n	8006f9c <HAL_SPI_Transmit+0x158>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9a:	d102      	bne.n	8006fa2 <HAL_SPI_Transmit+0x15e>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fa6:	e074      	b.n	8007092 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1ce      	bne.n	8006f50 <HAL_SPI_Transmit+0x10c>
 8006fb2:	e04c      	b.n	800704e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_Transmit+0x17e>
 8006fbc:	8afb      	ldrh	r3, [r7, #22]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d140      	bne.n	8007044 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fe8:	e02c      	b.n	8007044 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d113      	bne.n	8007020 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	86da      	strh	r2, [r3, #54]	; 0x36
 800701e:	e011      	b.n	8007044 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007020:	f7fa fdea 	bl	8001bf8 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d803      	bhi.n	8007038 <HAL_SPI_Transmit+0x1f4>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d102      	bne.n	800703e <HAL_SPI_Transmit+0x1fa>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007042:	e026      	b.n	8007092 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1cd      	bne.n	8006fea <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f894 	bl	8007180 <SPI_EndRxTxTransaction>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e000      	b.n	8007092 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070bc:	e04c      	b.n	8007158 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d048      	beq.n	8007158 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80070c6:	f7fa fd97 	bl	8001bf8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d902      	bls.n	80070dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d13d      	bne.n	8007158 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f4:	d111      	bne.n	800711a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fe:	d004      	beq.n	800710a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007108:	d107      	bne.n	800711a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007118:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007122:	d10f      	bne.n	8007144 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007142:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e00f      	b.n	8007178 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	429a      	cmp	r2, r3
 8007174:	d1a3      	bne.n	80070be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800718c:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <SPI_EndRxTxTransaction+0x7c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <SPI_EndRxTxTransaction+0x80>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	0d5b      	lsrs	r3, r3, #21
 8007198:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800719c:	fb02 f303 	mul.w	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071aa:	d112      	bne.n	80071d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff ff78 	bl	80070ac <SPI_WaitFlagStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d016      	beq.n	80071f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e00f      	b.n	80071f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3b01      	subs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e8:	2b80      	cmp	r3, #128	; 0x80
 80071ea:	d0f2      	beq.n	80071d2 <SPI_EndRxTxTransaction+0x52>
 80071ec:	e000      	b.n	80071f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80071ee:	bf00      	nop
  }

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000008 	.word	0x20000008
 8007200:	165e9f81 	.word	0x165e9f81

08007204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e01d      	b.n	8007252 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fa fb96 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3304      	adds	r3, #4
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f000 fa1c 	bl	8007680 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	f241 1311 	movw	r3, #4369	; 0x1111
 8007274:	4013      	ands	r3, r2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <HAL_TIM_Base_Stop+0x40>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	f240 4344 	movw	r3, #1092	; 0x444
 8007284:	4013      	ands	r3, r2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <HAL_TIM_Base_Stop+0x40>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d122      	bne.n	800730c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d11b      	bne.n	800730c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0202 	mvn.w	r2, #2
 80072dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9a5 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f997 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f9a8 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b04      	cmp	r3, #4
 8007318:	d122      	bne.n	8007360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b04      	cmp	r3, #4
 8007326:	d11b      	bne.n	8007360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0204 	mvn.w	r2, #4
 8007330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f97b 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 800734c:	e005      	b.n	800735a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f96d 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f97e 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b08      	cmp	r3, #8
 800736c:	d122      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b08      	cmp	r3, #8
 800737a:	d11b      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0208 	mvn.w	r2, #8
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f951 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f943 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f954 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d122      	bne.n	8007408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d11b      	bne.n	8007408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0210 	mvn.w	r2, #16
 80073d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2208      	movs	r2, #8
 80073de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f927 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 80073f4:	e005      	b.n	8007402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f919 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f92a 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b01      	cmp	r3, #1
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0201 	mvn.w	r2, #1
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fa f82a 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fad0 	bl	8007a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d10e      	bne.n	800748c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d107      	bne.n	800748c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f8ef 	bl	800766a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b20      	cmp	r3, #32
 8007498:	d10e      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d107      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 0220 	mvn.w	r2, #32
 80074b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa9a 	bl	80079ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIM_ConfigClockSource+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e0a6      	b.n	8007626 <HAL_TIM_ConfigClockSource+0x166>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d067      	beq.n	80075e0 <HAL_TIM_ConfigClockSource+0x120>
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d80b      	bhi.n	800752c <HAL_TIM_ConfigClockSource+0x6c>
 8007514:	2b10      	cmp	r3, #16
 8007516:	d073      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x140>
 8007518:	2b10      	cmp	r3, #16
 800751a:	d802      	bhi.n	8007522 <HAL_TIM_ConfigClockSource+0x62>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d06f      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007520:	e078      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007522:	2b20      	cmp	r3, #32
 8007524:	d06c      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x140>
 8007526:	2b30      	cmp	r3, #48	; 0x30
 8007528:	d06a      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800752a:	e073      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800752c:	2b70      	cmp	r3, #112	; 0x70
 800752e:	d00d      	beq.n	800754c <HAL_TIM_ConfigClockSource+0x8c>
 8007530:	2b70      	cmp	r3, #112	; 0x70
 8007532:	d804      	bhi.n	800753e <HAL_TIM_ConfigClockSource+0x7e>
 8007534:	2b50      	cmp	r3, #80	; 0x50
 8007536:	d033      	beq.n	80075a0 <HAL_TIM_ConfigClockSource+0xe0>
 8007538:	2b60      	cmp	r3, #96	; 0x60
 800753a:	d041      	beq.n	80075c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800753c:	e06a      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007542:	d066      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0x152>
 8007544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007548:	d017      	beq.n	800757a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800754a:	e063      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	6899      	ldr	r1, [r3, #8]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f000 f9aa 	bl	80078b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800756e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	609a      	str	r2, [r3, #8]
      break;
 8007578:	e04c      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6899      	ldr	r1, [r3, #8]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f000 f993 	bl	80078b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800759c:	609a      	str	r2, [r3, #8]
      break;
 800759e:	e039      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6859      	ldr	r1, [r3, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	461a      	mov	r2, r3
 80075ae:	f000 f907 	bl	80077c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2150      	movs	r1, #80	; 0x50
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f960 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075be:	e029      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	6859      	ldr	r1, [r3, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f000 f926 	bl	800781e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2160      	movs	r1, #96	; 0x60
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 f950 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075de:	e019      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	461a      	mov	r2, r3
 80075ee:	f000 f8e7 	bl	80077c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2140      	movs	r1, #64	; 0x40
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f940 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 80075fe:	e009      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f000 f937 	bl	800787e <TIM_ITRx_SetConfig>
      break;
 8007610:	e000      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a40      	ldr	r2, [pc, #256]	; (8007794 <TIM_Base_SetConfig+0x114>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769e:	d00f      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3d      	ldr	r2, [pc, #244]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3c      	ldr	r2, [pc, #240]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3b      	ldr	r2, [pc, #236]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3a      	ldr	r2, [pc, #232]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d108      	bne.n	80076d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2f      	ldr	r2, [pc, #188]	; (8007794 <TIM_Base_SetConfig+0x114>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d02b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e0:	d027      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <TIM_Base_SetConfig+0x118>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d023      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2b      	ldr	r2, [pc, #172]	; (800779c <TIM_Base_SetConfig+0x11c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d01f      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <TIM_Base_SetConfig+0x120>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a29      	ldr	r2, [pc, #164]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d017      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a28      	ldr	r2, [pc, #160]	; (80077a8 <TIM_Base_SetConfig+0x128>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a27      	ldr	r2, [pc, #156]	; (80077ac <TIM_Base_SetConfig+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00f      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <TIM_Base_SetConfig+0x130>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00b      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a25      	ldr	r2, [pc, #148]	; (80077b4 <TIM_Base_SetConfig+0x134>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a24      	ldr	r2, [pc, #144]	; (80077b8 <TIM_Base_SetConfig+0x138>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a23      	ldr	r2, [pc, #140]	; (80077bc <TIM_Base_SetConfig+0x13c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d108      	bne.n	8007744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a0a      	ldr	r2, [pc, #40]	; (8007794 <TIM_Base_SetConfig+0x114>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_Base_SetConfig+0xf8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <TIM_Base_SetConfig+0x124>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40010000 	.word	0x40010000
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800
 80077b4:	40001800 	.word	0x40001800
 80077b8:	40001c00 	.word	0x40001c00
 80077bc:	40002000 	.word	0x40002000

080077c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 030a 	bic.w	r3, r3, #10
 80077fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	621a      	str	r2, [r3, #32]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800781e:	b480      	push	{r7}
 8007820:	b087      	sub	sp, #28
 8007822:	af00      	add	r7, sp, #0
 8007824:	60f8      	str	r0, [r7, #12]
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0210 	bic.w	r2, r3, #16
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	031b      	lsls	r3, r3, #12
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800785a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	f043 0307 	orr.w	r3, r3, #7
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	021a      	lsls	r2, r3, #8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4313      	orrs	r3, r2
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d101      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007908:	2302      	movs	r3, #2
 800790a:	e05a      	b.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007958:	d01d      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d10c      	bne.n	80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800799c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40010400 	.word	0x40010400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40001800 	.word	0x40001800

080079ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a14:	b084      	sub	sp, #16
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	f107 001c 	add.w	r0, r7, #28
 8007a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d122      	bne.n	8007a72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d105      	bne.n	8007a66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f94a 	bl	8007d00 <USB_CoreReset>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
 8007a70:	e01a      	b.n	8007aa8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f93e 	bl	8007d00 <USB_CoreReset>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
 8007a9a:	e005      	b.n	8007aa8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d10b      	bne.n	8007ac6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f043 0206 	orr.w	r2, r3, #6
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad2:	b004      	add	sp, #16
 8007ad4:	4770      	bx	lr

08007ad6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f043 0201 	orr.w	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f023 0201 	bic.w	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e00b      	b.n	8007b5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60da      	str	r2, [r3, #12]
 8007b58:	e001      	b.n	8007b5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e003      	b.n	8007b66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b5e:	2032      	movs	r0, #50	; 0x32
 8007b60:	f7fa f856 	bl	8001c10 <HAL_Delay>

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	019b      	lsls	r3, r3, #6
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <USB_FlushTxFifo+0x48>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e006      	b.n	8007baa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d0f0      	beq.n	8007b8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	00030d40 	.word	0x00030d40

08007bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2210      	movs	r2, #16
 8007bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <USB_FlushRxFifo+0x40>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d901      	bls.n	8007be0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e006      	b.n	8007bee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d0f0      	beq.n	8007bce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	00030d40 	.word	0x00030d40

08007c00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b089      	sub	sp, #36	; 0x24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	460b      	mov	r3, r1
 8007c10:	71fb      	strb	r3, [r7, #7]
 8007c12:	4613      	mov	r3, r2
 8007c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d11a      	bne.n	8007c5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c26:	88bb      	ldrh	r3, [r7, #4]
 8007c28:	3303      	adds	r3, #3
 8007c2a:	089b      	lsrs	r3, r3, #2
 8007c2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e00f      	b.n	8007c54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	031a      	lsls	r2, r3, #12
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c40:	461a      	mov	r2, r3
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	3301      	adds	r3, #1
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3eb      	bcc.n	8007c34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3724      	adds	r7, #36	; 0x24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b089      	sub	sp, #36	; 0x24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	4613      	mov	r3, r2
 8007c76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	3303      	adds	r3, #3
 8007c84:	089b      	lsrs	r3, r3, #2
 8007c86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	e00b      	b.n	8007ca6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d3ef      	bcc.n	8007c8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007cae:	69fb      	ldr	r3, [r7, #28]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3724      	adds	r7, #36	; 0x24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f003 0301 	and.w	r3, r3, #1
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <USB_CoreReset+0x64>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e01b      	b.n	8007d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	daf2      	bge.n	8007d0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f043 0201 	orr.w	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <USB_CoreReset+0x64>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d0f0      	beq.n	8007d36 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d68:	b084      	sub	sp, #16
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	f107 001c 	add.w	r0, r7, #28
 8007d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d84:	461a      	mov	r2, r3
 8007d86:	2300      	movs	r3, #0
 8007d88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10a      	bne.n	8007dd6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dce:	f043 0304 	orr.w	r3, r3, #4
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e014      	b.n	8007e00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	e009      	b.n	8007e00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dfa:	f023 0304 	bic.w	r3, r3, #4
 8007dfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007e00:	2110      	movs	r1, #16
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff feb4 	bl	8007b70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fed7 	bl	8007bbc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e015      	b.n	8007e40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e20:	461a      	mov	r2, r3
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e34:	461a      	mov	r2, r3
 8007e36:	2300      	movs	r3, #0
 8007e38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3e5      	bcc.n	8007e14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007e48:	2101      	movs	r1, #1
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8ac 	bl	8007fa8 <USB_DriveVbus>

  HAL_Delay(200U);
 8007e50:	20c8      	movs	r0, #200	; 0xc8
 8007e52:	f7f9 fedd 	bl	8001c10 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <USB_HostInit+0x164>)
 8007e7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <USB_HostInit+0x168>)
 8007e82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e86:	e009      	b.n	8007e9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2280      	movs	r2, #128	; 0x80
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <USB_HostInit+0x16c>)
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <USB_HostInit+0x170>)
 8007e98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f043 0210 	orr.w	r2, r3, #16
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <USB_HostInit+0x174>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec6:	b004      	add	sp, #16
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	01000200 	.word	0x01000200
 8007ed0:	00e00300 	.word	0x00e00300
 8007ed4:	00600080 	.word	0x00600080
 8007ed8:	004000e0 	.word	0x004000e0
 8007edc:	a3200008 	.word	0xa3200008

08007ee0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f2e:	6053      	str	r3, [r2, #4]
 8007f30:	e009      	b.n	8007f46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d106      	bne.n	8007f46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f241 7370 	movw	r3, #6000	; 0x1770
 8007f44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f84:	2064      	movs	r0, #100	; 0x64
 8007f86:	f7f9 fe43 	bl	8001c10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f98:	200a      	movs	r0, #10
 8007f9a:	f7f9 fe39 	bl	8001c10 <HAL_Delay>

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <USB_DriveVbus+0x44>
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d106      	bne.n	8007fec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d109      	bne.n	800800c <USB_DriveVbus+0x64>
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800800a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	0c5b      	lsrs	r3, r3, #17
 8008038:	f003 0303 	and.w	r3, r3, #3
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	b29b      	uxth	r3, r3
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	461a      	mov	r2, r3
 800807a:	4603      	mov	r3, r0
 800807c:	70fb      	strb	r3, [r7, #3]
 800807e:	460b      	mov	r3, r1
 8008080:	70bb      	strb	r3, [r7, #2]
 8008082:	4613      	mov	r3, r2
 8008084:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809a:	461a      	mov	r2, r3
 800809c:	f04f 33ff 	mov.w	r3, #4294967295
 80080a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80080a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d87e      	bhi.n	80081a8 <USB_HC_Init+0x13c>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <USB_HC_Init+0x44>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	0800816b 	.word	0x0800816b
 80080b8:	080080c1 	.word	0x080080c1
 80080bc:	0800812d 	.word	0x0800812d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080cc:	461a      	mov	r2, r3
 80080ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80080d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80080d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da10      	bge.n	80080fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80080fc:	e057      	b.n	80081ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d051      	beq.n	80081ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	440a      	add	r2, r1
 8008120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008124:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008128:	60d3      	str	r3, [r2, #12]
      break;
 800812a:	e040      	b.n	80081ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4413      	add	r3, r2
 8008134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008138:	461a      	mov	r2, r3
 800813a:	f240 639d 	movw	r3, #1693	; 0x69d
 800813e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da34      	bge.n	80081b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	440a      	add	r2, r1
 800815e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008166:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008168:	e023      	b.n	80081b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	f240 2325 	movw	r3, #549	; 0x225
 800817c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800817e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da17      	bge.n	80081b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008186:	78fb      	ldrb	r3, [r7, #3]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	78fa      	ldrb	r2, [r7, #3]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	440a      	add	r2, r1
 800819c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80081a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80081a6:	e006      	b.n	80081b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	e004      	b.n	80081b8 <USB_HC_Init+0x14c>
      break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <USB_HC_Init+0x14c>
      break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <USB_HC_Init+0x14c>
      break;
 80081b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	2101      	movs	r1, #1
 80081c8:	fa01 f303 	lsl.w	r3, r1, r3
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081d2:	4313      	orrs	r3, r2
 80081d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80081e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	da03      	bge.n	80081f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80081ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e001      	b.n	80081f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80081f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d103      	bne.n	8008206 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e001      	b.n	800820a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800820a:	787b      	ldrb	r3, [r7, #1]
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008212:	78bb      	ldrb	r3, [r7, #2]
 8008214:	02db      	lsls	r3, r3, #11
 8008216:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800821a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800821c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008220:	049b      	lsls	r3, r3, #18
 8008222:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008226:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008228:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800822a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800822e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	0159      	lsls	r1, r3, #5
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	440b      	add	r3, r1
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008246:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008248:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800824c:	2b03      	cmp	r3, #3
 800824e:	d10f      	bne.n	8008270 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4413      	add	r3, r2
 8008258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	440a      	add	r2, r1
 8008266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800826a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800826e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
}
 8008272:	4618      	mov	r0, r3
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08c      	sub	sp, #48	; 0x30
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800829c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d028      	beq.n	80082fc <USB_HC_StartXfer+0x7c>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d124      	bne.n	80082fc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <USB_HC_StartXfer+0x50>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	795b      	ldrb	r3, [r3, #5]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d107      	bne.n	80082d0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	4619      	mov	r1, r3
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 fa30 	bl	800872c <USB_DoPing>
      return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e114      	b.n	80084fa <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d112      	bne.n	80082fc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	0151      	lsls	r1, r2, #5
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	440a      	add	r2, r1
 80082ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80082f4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d018      	beq.n	8008336 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	8912      	ldrh	r2, [r2, #8]
 800830c:	4413      	add	r3, r2
 800830e:	3b01      	subs	r3, #1
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	8912      	ldrh	r2, [r2, #8]
 8008314:	fbb3 f3f2 	udiv	r3, r3, r2
 8008318:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800831a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800831c:	8b7b      	ldrh	r3, [r7, #26]
 800831e:	429a      	cmp	r2, r3
 8008320:	d90b      	bls.n	800833a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008322:	8b7b      	ldrh	r3, [r7, #26]
 8008324:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008326:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	8912      	ldrh	r2, [r2, #8]
 800832c:	fb02 f203 	mul.w	r2, r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	611a      	str	r2, [r3, #16]
 8008334:	e001      	b.n	800833a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008336:	2301      	movs	r3, #1
 8008338:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	78db      	ldrb	r3, [r3, #3]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d006      	beq.n	8008350 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	8912      	ldrh	r2, [r2, #8]
 8008348:	fb02 f203 	mul.w	r2, r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800835a:	04d9      	lsls	r1, r3, #19
 800835c:	4b69      	ldr	r3, [pc, #420]	; (8008504 <USB_HC_StartXfer+0x284>)
 800835e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008360:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	7a9b      	ldrb	r3, [r3, #10]
 8008366:	075b      	lsls	r3, r3, #29
 8008368:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800836c:	69f9      	ldr	r1, [r7, #28]
 800836e:	0148      	lsls	r0, r1, #5
 8008370:	6a39      	ldr	r1, [r7, #32]
 8008372:	4401      	add	r1, r0
 8008374:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008378:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800837a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	68d9      	ldr	r1, [r3, #12]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	460a      	mov	r2, r1
 8008394:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	bf0c      	ite	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	2300      	movne	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	6a3a      	ldr	r2, [r7, #32]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	7e7b      	ldrb	r3, [r7, #25]
 80083de:	075b      	lsls	r3, r3, #29
 80083e0:	69f9      	ldr	r1, [r7, #28]
 80083e2:	0148      	lsls	r0, r1, #5
 80083e4:	6a39      	ldr	r1, [r7, #32]
 80083e6:	4401      	add	r1, r0
 80083e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a42      	ldr	r2, [pc, #264]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008400:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800840a:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <USB_HC_StartXfer+0x288>)
 800840c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	78db      	ldrb	r3, [r3, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d006      	beq.n	8008424 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008416:	4b3c      	ldr	r3, [pc, #240]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800841e:	4a3a      	ldr	r2, [pc, #232]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	e005      	b.n	8008430 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008424:	4b38      	ldr	r3, [pc, #224]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800842c:	4a36      	ldr	r2, [pc, #216]	; (8008508 <USB_HC_StartXfer+0x288>)
 800842e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008430:	4b35      	ldr	r3, [pc, #212]	; (8008508 <USB_HC_StartXfer+0x288>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008438:	4a33      	ldr	r2, [pc, #204]	; (8008508 <USB_HC_StartXfer+0x288>)
 800843a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008448:	461a      	mov	r2, r3
 800844a:	4b2f      	ldr	r3, [pc, #188]	; (8008508 <USB_HC_StartXfer+0x288>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e04f      	b.n	80084fa <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	78db      	ldrb	r3, [r3, #3]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d14a      	bne.n	80084f8 <USB_HC_StartXfer+0x278>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d046      	beq.n	80084f8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	79db      	ldrb	r3, [r3, #7]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d830      	bhi.n	80084d4 <USB_HC_StartXfer+0x254>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USB_HC_StartXfer+0x1f8>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008489 	.word	0x08008489
 800847c:	080084ad 	.word	0x080084ad
 8008480:	08008489 	.word	0x08008489
 8008484:	080084ad 	.word	0x080084ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	3303      	adds	r3, #3
 800848e:	089b      	lsrs	r3, r3, #2
 8008490:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008492:	8afa      	ldrh	r2, [r7, #22]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	b29b      	uxth	r3, r3
 800849a:	429a      	cmp	r2, r3
 800849c:	d91c      	bls.n	80084d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f043 0220 	orr.w	r2, r3, #32
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80084aa:	e015      	b.n	80084d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	3303      	adds	r3, #3
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084b6:	8afa      	ldrh	r2, [r7, #22]
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d90a      	bls.n	80084dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80084d2:	e003      	b.n	80084dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <USB_HC_StartXfer+0x25e>
        break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <USB_HC_StartXfer+0x25e>
        break;
 80084dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	68d9      	ldr	r1, [r3, #12]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	785a      	ldrb	r2, [r3, #1]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	b298      	uxth	r0, r3
 80084ec:	2300      	movs	r3, #0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4603      	mov	r3, r0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fb84 	bl	8007c00 <USB_WritePacket>
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3728      	adds	r7, #40	; 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	1ff80000 	.word	0x1ff80000
 8008508:	20001360 	.word	0x20001360

0800850c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	b29b      	uxth	r3, r3
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	4413      	add	r3, r2
 800854e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	0c9b      	lsrs	r3, r3, #18
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <USB_HC_Halt+0x3a>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d16c      	bne.n	8008642 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	440a      	add	r2, r1
 800857e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008586:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d143      	bne.n	800861c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	3301      	adds	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008600:	d81d      	bhi.n	800863e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008618:	d0ec      	beq.n	80085f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800861a:	e080      	b.n	800871e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	440a      	add	r2, r1
 8008632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800863a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800863c:	e06f      	b.n	800871e <USB_HC_Halt+0x1f0>
          break;
 800863e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008640:	e06d      	b.n	800871e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	4413      	add	r3, r2
 800864a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	440a      	add	r2, r1
 8008658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008660:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d143      	bne.n	80086fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	4413      	add	r3, r2
 800867a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	440a      	add	r2, r1
 8008688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800868c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008690:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	0151      	lsls	r1, r2, #5
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	440a      	add	r2, r1
 80086a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3301      	adds	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086de:	d81d      	bhi.n	800871c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f6:	d0ec      	beq.n	80086d2 <USB_HC_Halt+0x1a4>
 80086f8:	e011      	b.n	800871e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	4413      	add	r3, r2
 8008702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	440a      	add	r2, r1
 8008710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	e000      	b.n	800871e <USB_HC_Halt+0x1f0>
          break;
 800871c:	bf00      	nop
    }
  }

  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008740:	2301      	movs	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	04da      	lsls	r2, r3, #19
 8008748:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <USB_DoPing+0x74>)
 800874a:	4013      	ands	r3, r2
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	440a      	add	r2, r1
 8008754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800875c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008774:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	461a      	mov	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	1ff80000 	.word	0x1ff80000

080087a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff f99f 	bl	8007af8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80087ba:	2110      	movs	r1, #16
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff f9d7 	bl	8007b70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff f9fa 	bl	8007bbc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80087c8:	2300      	movs	r3, #0
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	e01f      	b.n	800880e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	461a      	mov	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	3301      	adds	r3, #1
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d9dc      	bls.n	80087ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	e034      	b.n	8008884 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008830:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008838:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008840:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884e:	461a      	mov	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3301      	adds	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008860:	d80c      	bhi.n	800887c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008878:	d0ec      	beq.n	8008854 <USB_StopHost+0xb0>
 800887a:	e000      	b.n	800887e <USB_StopHost+0xda>
        break;
 800887c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3301      	adds	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d9c7      	bls.n	800881a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008890:	461a      	mov	r2, r3
 8008892:	f04f 33ff 	mov.w	r3, #4294967295
 8008896:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f04f 32ff 	mov.w	r2, #4294967295
 800889e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff f918 	bl	8007ad6 <USB_EnableGlobalInt>

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80088b4:	4904      	ldr	r1, [pc, #16]	; (80088c8 <MX_FATFS_Init+0x18>)
 80088b6:	4805      	ldr	r0, [pc, #20]	; (80088cc <MX_FATFS_Init+0x1c>)
 80088b8:	f005 fb7a 	bl	800dfb0 <FATFS_LinkDriver>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <MX_FATFS_Init+0x20>)
 80088c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	2000178c 	.word	0x2000178c
 80088cc:	0800f628 	.word	0x0800f628
 80088d0:	20001bf0 	.word	0x20001bf0

080088d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088da:	4618      	mov	r0, r3
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	4619      	mov	r1, r3
 800890e:	4808      	ldr	r0, [pc, #32]	; (8008930 <USBH_status+0x34>)
 8008910:	f000 fe11 	bl	8009536 <USBH_MSC_UnitIsReady>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <USBH_status+0x24>
  {
    res = RES_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
 800891e:	e001      	b.n	8008924 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20001bf4 	.word	0x20001bf4

08008934 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b094      	sub	sp, #80	; 0x50
 8008938:	af02      	add	r7, sp, #8
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800894a:	7bf9      	ldrb	r1, [r7, #15]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4812      	ldr	r0, [pc, #72]	; (80089a0 <USBH_read+0x6c>)
 8008956:	f000 fe38 	bl	80095ca <USBH_MSC_Read>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <USBH_read+0x34>
  {
    res = RES_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008966:	e015      	b.n	8008994 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008968:	f107 0210 	add.w	r2, r7, #16
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	4619      	mov	r1, r3
 8008970:	480b      	ldr	r0, [pc, #44]	; (80089a0 <USBH_read+0x6c>)
 8008972:	f000 fe06 	bl	8009582 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008976:	7f7b      	ldrb	r3, [r7, #29]
 8008978:	2b28      	cmp	r3, #40	; 0x28
 800897a:	d003      	beq.n	8008984 <USBH_read+0x50>
 800897c:	2b3a      	cmp	r3, #58	; 0x3a
 800897e:	d001      	beq.n	8008984 <USBH_read+0x50>
 8008980:	2b04      	cmp	r3, #4
 8008982:	d103      	bne.n	800898c <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008984:	2303      	movs	r3, #3
 8008986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800898a:	e003      	b.n	8008994 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008992:	bf00      	nop
    }
  }

  return res;
 8008994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008998:	4618      	mov	r0, r3
 800899a:	3748      	adds	r7, #72	; 0x48
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20001bf4 	.word	0x20001bf4

080089a4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b094      	sub	sp, #80	; 0x50
 80089a8:	af02      	add	r7, sp, #8
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80089ba:	7bf9      	ldrb	r1, [r7, #15]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	4817      	ldr	r0, [pc, #92]	; (8008a24 <USBH_write+0x80>)
 80089c6:	f000 fe69 	bl	800969c <USBH_MSC_Write>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <USBH_write+0x34>
  {
    res = RES_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089d6:	e01f      	b.n	8008a18 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089d8:	f107 0210 	add.w	r2, r7, #16
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	4619      	mov	r1, r3
 80089e0:	4810      	ldr	r0, [pc, #64]	; (8008a24 <USBH_write+0x80>)
 80089e2:	f000 fdce 	bl	8009582 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80089e6:	7f7b      	ldrb	r3, [r7, #29]
 80089e8:	2b27      	cmp	r3, #39	; 0x27
 80089ea:	d009      	beq.n	8008a00 <USBH_write+0x5c>
 80089ec:	2b27      	cmp	r3, #39	; 0x27
 80089ee:	dc02      	bgt.n	80089f6 <USBH_write+0x52>
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d009      	beq.n	8008a08 <USBH_write+0x64>
 80089f4:	e00c      	b.n	8008a10 <USBH_write+0x6c>
 80089f6:	2b28      	cmp	r3, #40	; 0x28
 80089f8:	d006      	beq.n	8008a08 <USBH_write+0x64>
 80089fa:	2b3a      	cmp	r3, #58	; 0x3a
 80089fc:	d004      	beq.n	8008a08 <USBH_write+0x64>
 80089fe:	e007      	b.n	8008a10 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008a00:	2302      	movs	r3, #2
 8008a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a06:	e007      	b.n	8008a18 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a0e:	e003      	b.n	8008a18 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a16:	bf00      	nop
    }
  }

  return res;
 8008a18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3748      	adds	r7, #72	; 0x48
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20001bf4 	.word	0x20001bf4

08008a28 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b090      	sub	sp, #64	; 0x40
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	603a      	str	r2, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
 8008a34:	460b      	mov	r3, r1
 8008a36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008a3e:	79bb      	ldrb	r3, [r7, #6]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d852      	bhi.n	8008aea <USBH_ioctl+0xc2>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <USBH_ioctl+0x24>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a65 	.word	0x08008a65
 8008a54:	08008a8f 	.word	0x08008a8f
 8008a58:	08008abb 	.word	0x08008abb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a62:	e045      	b.n	8008af0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a64:	f107 0208 	add.w	r2, r7, #8
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4823      	ldr	r0, [pc, #140]	; (8008afc <USBH_ioctl+0xd4>)
 8008a6e:	f000 fd88 	bl	8009582 <USBH_MSC_GetLUNInfo>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a84:	e034      	b.n	8008af0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a8c:	e030      	b.n	8008af0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	4619      	mov	r1, r3
 8008a96:	4819      	ldr	r0, [pc, #100]	; (8008afc <USBH_ioctl+0xd4>)
 8008a98:	f000 fd73 	bl	8009582 <USBH_MSC_GetLUNInfo>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d107      	bne.n	8008ab2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008aa2:	8a3b      	ldrh	r3, [r7, #16]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ab0:	e01e      	b.n	8008af0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ab8:	e01a      	b.n	8008af0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008aba:	f107 0208 	add.w	r2, r7, #8
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	480e      	ldr	r0, [pc, #56]	; (8008afc <USBH_ioctl+0xd4>)
 8008ac4:	f000 fd5d 	bl	8009582 <USBH_MSC_GetLUNInfo>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008ace:	8a3b      	ldrh	r3, [r7, #16]
 8008ad0:	0a5b      	lsrs	r3, r3, #9
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ae0:	e006      	b.n	8008af0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ae8:	e002      	b.n	8008af0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008aea:	2304      	movs	r3, #4
 8008aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3740      	adds	r7, #64	; 0x40
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20001bf4 	.word	0x20001bf4

08008b00 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b089      	sub	sp, #36	; 0x24
 8008b04:	af04      	add	r7, sp, #16
 8008b06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b0e:	7919      	ldrb	r1, [r3, #4]
 8008b10:	2350      	movs	r3, #80	; 0x50
 8008b12:	2206      	movs	r2, #6
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fc4f 	bl	800a3b8 <USBH_FindInterface>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	2bff      	cmp	r3, #255	; 0xff
 8008b22:	d002      	beq.n	8008b2a <USBH_MSC_InterfaceInit+0x2a>
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d901      	bls.n	8008b2e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	e0ef      	b.n	8008d0e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fc24 	bl	800a380 <USBH_SelectInterface>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	e0e3      	b.n	8008d0e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008b4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b50:	f006 fbe6 	bl	800f320 <malloc>
 8008b54:	4603      	mov	r3, r0
 8008b56:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e0d0      	b.n	8008d0e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b70:	2100      	movs	r1, #0
 8008b72:	68b8      	ldr	r0, [r7, #8]
 8008b74:	f006 fbef 	bl	800f356 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	211a      	movs	r1, #26
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	4413      	add	r3, r2
 8008b84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da16      	bge.n	8008bbe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	211a      	movs	r1, #26
 8008b96:	fb01 f303 	mul.w	r3, r1, r3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ba0:	781a      	ldrb	r2, [r3, #0]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	211a      	movs	r1, #26
 8008bac:	fb01 f303 	mul.w	r3, r1, r3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bb6:	881a      	ldrh	r2, [r3, #0]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	815a      	strh	r2, [r3, #10]
 8008bbc:	e015      	b.n	8008bea <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	211a      	movs	r1, #26
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bce:	781a      	ldrb	r2, [r3, #0]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	211a      	movs	r1, #26
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	211a      	movs	r1, #26
 8008bf0:	fb01 f303 	mul.w	r3, r1, r3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da16      	bge.n	8008c30 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	211a      	movs	r1, #26
 8008c08:	fb01 f303 	mul.w	r3, r1, r3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	211a      	movs	r1, #26
 8008c1e:	fb01 f303 	mul.w	r3, r1, r3
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c28:	881a      	ldrh	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	815a      	strh	r2, [r3, #10]
 8008c2e:	e015      	b.n	8008c5c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	211a      	movs	r1, #26
 8008c36:	fb01 f303 	mul.w	r3, r1, r3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	211a      	movs	r1, #26
 8008c4c:	fb01 f303 	mul.w	r3, r1, r3
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c56:	881a      	ldrh	r2, [r3, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2200      	movs	r2, #0
 8008c66:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	799b      	ldrb	r3, [r3, #6]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f002 fdc2 	bl	800b7fe <USBH_AllocPipe>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	79db      	ldrb	r3, [r3, #7]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f002 fdb8 	bl	800b7fe <USBH_AllocPipe>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	461a      	mov	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fda4 	bl	80097e4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	7959      	ldrb	r1, [r3, #5]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	7998      	ldrb	r0, [r3, #6]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	8912      	ldrh	r2, [r2, #8]
 8008cb4:	9202      	str	r2, [sp, #8]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	9201      	str	r2, [sp, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4623      	mov	r3, r4
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 fd6d 	bl	800b7a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	7919      	ldrb	r1, [r3, #4]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	79d8      	ldrb	r0, [r3, #7]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	8952      	ldrh	r2, [r2, #10]
 8008cde:	9202      	str	r2, [sp, #8]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	9201      	str	r2, [sp, #4]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f002 fd58 	bl	800b7a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	791b      	ldrb	r3, [r3, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f005 fbe2 	bl	800e4c2 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	795b      	ldrb	r3, [r3, #5]
 8008d02:	2200      	movs	r2, #0
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f005 fbdb 	bl	800e4c2 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd90      	pop	{r4, r7, pc}

08008d16 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b084      	sub	sp, #16
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	795b      	ldrb	r3, [r3, #5]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00e      	beq.n	8008d4e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	795b      	ldrb	r3, [r3, #5]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f002 fd51 	bl	800b7de <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	795b      	ldrb	r3, [r3, #5]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f002 fd7c 	bl	800b840 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	791b      	ldrb	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00e      	beq.n	8008d74 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	791b      	ldrb	r3, [r3, #4]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f002 fd3e 	bl	800b7de <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	791b      	ldrb	r3, [r3, #4]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 fd69 	bl	800b840 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f006 fad1 	bl	800f330 <free>
    phost->pActiveClass->pData = 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d94:	2200      	movs	r2, #0
 8008d96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	7b9b      	ldrb	r3, [r3, #14]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d004      	beq.n	8008dca <USBH_MSC_ClassRequest+0x28>
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d03e      	beq.n	8008e42 <USBH_MSC_ClassRequest+0xa0>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d000      	beq.n	8008dca <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8008dc8:	e04a      	b.n	8008e60 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcea 	bl	80097a8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d104      	bne.n	8008de8 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d135      	bne.n	8008e5a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d804      	bhi.n	8008e00 <USBH_MSC_ClassRequest+0x5e>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	e000      	b.n	8008e02 <USBH_MSC_ClassRequest+0x60>
 8008e00:	2202      	movs	r2, #2
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]
 8008e0a:	e014      	b.n	8008e36 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	2134      	movs	r1, #52	; 0x34
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	3392      	adds	r3, #146	; 0x92
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	2134      	movs	r1, #52	; 0x34
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	4413      	add	r3, r2
 8008e2a:	33c1      	adds	r3, #193	; 0xc1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	3301      	adds	r3, #1
 8008e34:	73bb      	strb	r3, [r7, #14]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	7bba      	ldrb	r2, [r7, #14]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d3e5      	bcc.n	8008e0c <USBH_MSC_ClassRequest+0x6a>
      break;
 8008e40:	e00b      	b.n	8008e5a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f002 f878 	bl	800af3a <USBH_ClrFeature>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	7bda      	ldrb	r2, [r3, #15]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	739a      	strb	r2, [r3, #14]
      break;
 8008e58:	e001      	b.n	8008e5e <USBH_MSC_ClassRequest+0xbc>
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e000      	b.n	8008e60 <USBH_MSC_ClassRequest+0xbe>
      break;
 8008e5e:	bf00      	nop
  }

  return status;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e82:	2301      	movs	r3, #1
 8008e84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	7b1b      	ldrb	r3, [r3, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <USBH_MSC_Process+0x2e>
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	f000 8271 	beq.w	800937a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008e98:	e272      	b.n	8009380 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	f080 824f 	bcs.w	800934a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	2334      	movs	r3, #52	; 0x34
 8008eb8:	fb03 f301 	mul.w	r3, r3, r1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3391      	adds	r3, #145	; 0x91
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	2334      	movs	r3, #52	; 0x34
 8008ed0:	fb03 f301 	mul.w	r3, r3, r1
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3390      	adds	r3, #144	; 0x90
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	f200 8243 	bhi.w	8009366 <USBH_MSC_Process+0x4fa>
 8008ee0:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <USBH_MSC_Process+0x7c>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08009367 	.word	0x08009367
 8008ef0:	08008fd5 	.word	0x08008fd5
 8008ef4:	08009159 	.word	0x08009159
 8008ef8:	08008f33 	.word	0x08008f33
 8008efc:	08009225 	.word	0x08009225
 8008f00:	08009367 	.word	0x08009367
 8008f04:	08009367 	.word	0x08009367
 8008f08:	08009339 	.word	0x08009339
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f12:	4619      	mov	r1, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	2334      	movs	r3, #52	; 0x34
 8008f18:	fb03 f301 	mul.w	r3, r3, r1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3390      	adds	r3, #144	; 0x90
 8008f20:	2204      	movs	r2, #4
 8008f22:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f30:	e222      	b.n	8009378 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f38:	b2d9      	uxtb	r1, r3
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f40:	461a      	mov	r2, r3
 8008f42:	2334      	movs	r3, #52	; 0x34
 8008f44:	fb03 f302 	mul.w	r3, r3, r2
 8008f48:	3398      	adds	r3, #152	; 0x98
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3307      	adds	r3, #7
 8008f50:	461a      	mov	r2, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 ff68 	bl	8009e28 <USBH_MSC_SCSI_Inquiry>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10b      	bne.n	8008f7a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	2334      	movs	r3, #52	; 0x34
 8008f6e:	fb03 f301 	mul.w	r3, r3, r1
 8008f72:	4413      	add	r3, r2
 8008f74:	3390      	adds	r3, #144	; 0x90
 8008f76:	2202      	movs	r2, #2
 8008f78:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d10c      	bne.n	8008f9a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f86:	4619      	mov	r1, r3
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	2334      	movs	r3, #52	; 0x34
 8008f8c:	fb03 f301 	mul.w	r3, r3, r1
 8008f90:	4413      	add	r3, r2
 8008f92:	3390      	adds	r3, #144	; 0x90
 8008f94:	2205      	movs	r2, #5
 8008f96:	701a      	strb	r2, [r3, #0]
            break;
 8008f98:	e1e7      	b.n	800936a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	f040 81e4 	bne.w	800936a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa8:	4619      	mov	r1, r3
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	2334      	movs	r3, #52	; 0x34
 8008fae:	fb03 f301 	mul.w	r3, r3, r1
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3390      	adds	r3, #144	; 0x90
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	2334      	movs	r3, #52	; 0x34
 8008fc6:	fb03 f301 	mul.w	r3, r3, r1
 8008fca:	4413      	add	r3, r2
 8008fcc:	3391      	adds	r3, #145	; 0x91
 8008fce:	2202      	movs	r2, #2
 8008fd0:	701a      	strb	r2, [r3, #0]
            break;
 8008fd2:	e1ca      	b.n	800936a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fe64 	bl	8009cac <USBH_MSC_SCSI_TestUnitReady>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d149      	bne.n	8009082 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	2334      	movs	r3, #52	; 0x34
 8008ffa:	fb03 f301 	mul.w	r3, r3, r1
 8008ffe:	4413      	add	r3, r2
 8009000:	3392      	adds	r3, #146	; 0x92
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00c      	beq.n	8009022 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800900e:	4619      	mov	r1, r3
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	2334      	movs	r3, #52	; 0x34
 8009014:	fb03 f301 	mul.w	r3, r3, r1
 8009018:	4413      	add	r3, r2
 800901a:	33c1      	adds	r3, #193	; 0xc1
 800901c:	2201      	movs	r2, #1
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	e00b      	b.n	800903a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009028:	4619      	mov	r1, r3
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	2334      	movs	r3, #52	; 0x34
 800902e:	fb03 f301 	mul.w	r3, r3, r1
 8009032:	4413      	add	r3, r2
 8009034:	33c1      	adds	r3, #193	; 0xc1
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009040:	4619      	mov	r1, r3
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	2334      	movs	r3, #52	; 0x34
 8009046:	fb03 f301 	mul.w	r3, r3, r1
 800904a:	4413      	add	r3, r2
 800904c:	3390      	adds	r3, #144	; 0x90
 800904e:	2203      	movs	r2, #3
 8009050:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009058:	4619      	mov	r1, r3
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	2334      	movs	r3, #52	; 0x34
 800905e:	fb03 f301 	mul.w	r3, r3, r1
 8009062:	4413      	add	r3, r2
 8009064:	3391      	adds	r3, #145	; 0x91
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009070:	4619      	mov	r1, r3
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	2334      	movs	r3, #52	; 0x34
 8009076:	fb03 f301 	mul.w	r3, r3, r1
 800907a:	4413      	add	r3, r2
 800907c:	3392      	adds	r3, #146	; 0x92
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d14a      	bne.n	800911e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800908e:	4619      	mov	r1, r3
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	2334      	movs	r3, #52	; 0x34
 8009094:	fb03 f301 	mul.w	r3, r3, r1
 8009098:	4413      	add	r3, r2
 800909a:	3392      	adds	r3, #146	; 0x92
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d00c      	beq.n	80090bc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090a8:	4619      	mov	r1, r3
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	2334      	movs	r3, #52	; 0x34
 80090ae:	fb03 f301 	mul.w	r3, r3, r1
 80090b2:	4413      	add	r3, r2
 80090b4:	33c1      	adds	r3, #193	; 0xc1
 80090b6:	2201      	movs	r2, #1
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e00b      	b.n	80090d4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c2:	4619      	mov	r1, r3
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	2334      	movs	r3, #52	; 0x34
 80090c8:	fb03 f301 	mul.w	r3, r3, r1
 80090cc:	4413      	add	r3, r2
 80090ce:	33c1      	adds	r3, #193	; 0xc1
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090da:	4619      	mov	r1, r3
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	2334      	movs	r3, #52	; 0x34
 80090e0:	fb03 f301 	mul.w	r3, r3, r1
 80090e4:	4413      	add	r3, r2
 80090e6:	3390      	adds	r3, #144	; 0x90
 80090e8:	2205      	movs	r2, #5
 80090ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f2:	4619      	mov	r1, r3
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	2334      	movs	r3, #52	; 0x34
 80090f8:	fb03 f301 	mul.w	r3, r3, r1
 80090fc:	4413      	add	r3, r2
 80090fe:	3391      	adds	r3, #145	; 0x91
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910a:	4619      	mov	r1, r3
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	2334      	movs	r3, #52	; 0x34
 8009110:	fb03 f301 	mul.w	r3, r3, r1
 8009114:	4413      	add	r3, r2
 8009116:	3392      	adds	r3, #146	; 0x92
 8009118:	2202      	movs	r2, #2
 800911a:	701a      	strb	r2, [r3, #0]
            break;
 800911c:	e127      	b.n	800936e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b04      	cmp	r3, #4
 8009122:	f040 8124 	bne.w	800936e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800912c:	4619      	mov	r1, r3
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	2334      	movs	r3, #52	; 0x34
 8009132:	fb03 f301 	mul.w	r3, r3, r1
 8009136:	4413      	add	r3, r2
 8009138:	3390      	adds	r3, #144	; 0x90
 800913a:	2201      	movs	r2, #1
 800913c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009144:	4619      	mov	r1, r3
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	2334      	movs	r3, #52	; 0x34
 800914a:	fb03 f301 	mul.w	r3, r3, r1
 800914e:	4413      	add	r3, r2
 8009150:	3391      	adds	r3, #145	; 0x91
 8009152:	2202      	movs	r2, #2
 8009154:	701a      	strb	r2, [r3, #0]
            break;
 8009156:	e10a      	b.n	800936e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800915e:	b2d9      	uxtb	r1, r3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009166:	461a      	mov	r2, r3
 8009168:	2334      	movs	r3, #52	; 0x34
 800916a:	fb03 f302 	mul.w	r3, r3, r2
 800916e:	3390      	adds	r3, #144	; 0x90
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4413      	add	r3, r2
 8009174:	3304      	adds	r3, #4
 8009176:	461a      	mov	r2, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fdda 	bl	8009d32 <USBH_MSC_SCSI_ReadCapacity>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d120      	bne.n	80091ca <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800918e:	4619      	mov	r1, r3
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	2334      	movs	r3, #52	; 0x34
 8009194:	fb03 f301 	mul.w	r3, r3, r1
 8009198:	4413      	add	r3, r2
 800919a:	3390      	adds	r3, #144	; 0x90
 800919c:	2201      	movs	r2, #1
 800919e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a6:	4619      	mov	r1, r3
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	2334      	movs	r3, #52	; 0x34
 80091ac:	fb03 f301 	mul.w	r3, r3, r1
 80091b0:	4413      	add	r3, r2
 80091b2:	3391      	adds	r3, #145	; 0x91
 80091b4:	2200      	movs	r2, #0
 80091b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091be:	3301      	adds	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80091c8:	e0d3      	b.n	8009372 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d10c      	bne.n	80091ea <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091d6:	4619      	mov	r1, r3
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	2334      	movs	r3, #52	; 0x34
 80091dc:	fb03 f301 	mul.w	r3, r3, r1
 80091e0:	4413      	add	r3, r2
 80091e2:	3390      	adds	r3, #144	; 0x90
 80091e4:	2205      	movs	r2, #5
 80091e6:	701a      	strb	r2, [r3, #0]
            break;
 80091e8:	e0c3      	b.n	8009372 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	f040 80c0 	bne.w	8009372 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f8:	4619      	mov	r1, r3
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	2334      	movs	r3, #52	; 0x34
 80091fe:	fb03 f301 	mul.w	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	3390      	adds	r3, #144	; 0x90
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009210:	4619      	mov	r1, r3
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	2334      	movs	r3, #52	; 0x34
 8009216:	fb03 f301 	mul.w	r3, r3, r1
 800921a:	4413      	add	r3, r2
 800921c:	3391      	adds	r3, #145	; 0x91
 800921e:	2202      	movs	r2, #2
 8009220:	701a      	strb	r2, [r3, #0]
            break;
 8009222:	e0a6      	b.n	8009372 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922a:	b2d9      	uxtb	r1, r3
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009232:	461a      	mov	r2, r3
 8009234:	2334      	movs	r3, #52	; 0x34
 8009236:	fb03 f302 	mul.w	r3, r3, r2
 800923a:	3398      	adds	r3, #152	; 0x98
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	3304      	adds	r3, #4
 8009242:	461a      	mov	r2, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fe94 	bl	8009f72 <USBH_MSC_SCSI_RequestSense>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d145      	bne.n	80092e0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925a:	4619      	mov	r1, r3
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	2334      	movs	r3, #52	; 0x34
 8009260:	fb03 f301 	mul.w	r3, r3, r1
 8009264:	4413      	add	r3, r2
 8009266:	339c      	adds	r3, #156	; 0x9c
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b06      	cmp	r3, #6
 800926c:	d00c      	beq.n	8009288 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009274:	4619      	mov	r1, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	2334      	movs	r3, #52	; 0x34
 800927a:	fb03 f301 	mul.w	r3, r3, r1
 800927e:	4413      	add	r3, r2
 8009280:	339c      	adds	r3, #156	; 0x9c
 8009282:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009284:	2b02      	cmp	r3, #2
 8009286:	d117      	bne.n	80092b8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	f242 720f 	movw	r2, #9999	; 0x270f
 800929a:	4293      	cmp	r3, r2
 800929c:	d80c      	bhi.n	80092b8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a4:	4619      	mov	r1, r3
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	2334      	movs	r3, #52	; 0x34
 80092aa:	fb03 f301 	mul.w	r3, r3, r1
 80092ae:	4413      	add	r3, r2
 80092b0:	3390      	adds	r3, #144	; 0x90
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
                  break;
 80092b6:	e05f      	b.n	8009378 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092be:	4619      	mov	r1, r3
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	2334      	movs	r3, #52	; 0x34
 80092c4:	fb03 f301 	mul.w	r3, r3, r1
 80092c8:	4413      	add	r3, r2
 80092ca:	3390      	adds	r3, #144	; 0x90
 80092cc:	2201      	movs	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d6:	3301      	adds	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d10c      	bne.n	8009300 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ec:	4619      	mov	r1, r3
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	2334      	movs	r3, #52	; 0x34
 80092f2:	fb03 f301 	mul.w	r3, r3, r1
 80092f6:	4413      	add	r3, r2
 80092f8:	3390      	adds	r3, #144	; 0x90
 80092fa:	2208      	movs	r2, #8
 80092fc:	701a      	strb	r2, [r3, #0]
            break;
 80092fe:	e03a      	b.n	8009376 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	2b04      	cmp	r3, #4
 8009304:	d137      	bne.n	8009376 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800930c:	4619      	mov	r1, r3
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	2334      	movs	r3, #52	; 0x34
 8009312:	fb03 f301 	mul.w	r3, r3, r1
 8009316:	4413      	add	r3, r2
 8009318:	3390      	adds	r3, #144	; 0x90
 800931a:	2201      	movs	r2, #1
 800931c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009324:	4619      	mov	r1, r3
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	2334      	movs	r3, #52	; 0x34
 800932a:	fb03 f301 	mul.w	r3, r3, r1
 800932e:	4413      	add	r3, r2
 8009330:	3391      	adds	r3, #145	; 0x91
 8009332:	2202      	movs	r2, #2
 8009334:	701a      	strb	r2, [r3, #0]
            break;
 8009336:	e01e      	b.n	8009376 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800933e:	3301      	adds	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009348:	e016      	b.n	8009378 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2200      	movs	r2, #0
 800934e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2201      	movs	r2, #1
 8009356:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800935e:	2102      	movs	r1, #2
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      break;
 8009364:	e00c      	b.n	8009380 <USBH_MSC_Process+0x514>
            break;
 8009366:	bf00      	nop
 8009368:	e00a      	b.n	8009380 <USBH_MSC_Process+0x514>
            break;
 800936a:	bf00      	nop
 800936c:	e008      	b.n	8009380 <USBH_MSC_Process+0x514>
            break;
 800936e:	bf00      	nop
 8009370:	e006      	b.n	8009380 <USBH_MSC_Process+0x514>
            break;
 8009372:	bf00      	nop
 8009374:	e004      	b.n	8009380 <USBH_MSC_Process+0x514>
            break;
 8009376:	bf00      	nop
      break;
 8009378:	e002      	b.n	8009380 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]
      break;
 800937e:	bf00      	nop
  }
  return error;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop

0800938c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b088      	sub	sp, #32
 80093a6:	af02      	add	r7, sp, #8
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b4:	69db      	ldr	r3, [r3, #28]
 80093b6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80093b8:	2301      	movs	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	2134      	movs	r1, #52	; 0x34
 80093c6:	fb01 f303 	mul.w	r3, r1, r3
 80093ca:	4413      	add	r3, r2
 80093cc:	3390      	adds	r3, #144	; 0x90
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b06      	cmp	r3, #6
 80093d2:	d004      	beq.n	80093de <USBH_MSC_RdWrProcess+0x3c>
 80093d4:	2b07      	cmp	r3, #7
 80093d6:	d037      	beq.n	8009448 <USBH_MSC_RdWrProcess+0xa6>
 80093d8:	2b05      	cmp	r3, #5
 80093da:	d06a      	beq.n	80094b2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80093dc:	e0a6      	b.n	800952c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80093de:	78f9      	ldrb	r1, [r7, #3]
 80093e0:	2300      	movs	r3, #0
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2300      	movs	r3, #0
 80093e6:	2200      	movs	r2, #0
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fea6 	bl	800a13a <USBH_MSC_SCSI_Read>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	2134      	movs	r1, #52	; 0x34
 80093fe:	fb01 f303 	mul.w	r3, r1, r3
 8009402:	4413      	add	r3, r2
 8009404:	3390      	adds	r3, #144	; 0x90
 8009406:	2201      	movs	r2, #1
 8009408:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]
      break;
 800940e:	e088      	b.n	8009522 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d109      	bne.n	800942a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	2134      	movs	r1, #52	; 0x34
 800941c:	fb01 f303 	mul.w	r3, r1, r3
 8009420:	4413      	add	r3, r2
 8009422:	3390      	adds	r3, #144	; 0x90
 8009424:	2205      	movs	r2, #5
 8009426:	701a      	strb	r2, [r3, #0]
      break;
 8009428:	e07b      	b.n	8009522 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	2b04      	cmp	r3, #4
 800942e:	d178      	bne.n	8009522 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	2134      	movs	r1, #52	; 0x34
 8009436:	fb01 f303 	mul.w	r3, r1, r3
 800943a:	4413      	add	r3, r2
 800943c:	3390      	adds	r3, #144	; 0x90
 800943e:	2208      	movs	r2, #8
 8009440:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009442:	2302      	movs	r3, #2
 8009444:	75fb      	strb	r3, [r7, #23]
      break;
 8009446:	e06c      	b.n	8009522 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009448:	78f9      	ldrb	r1, [r7, #3]
 800944a:	2300      	movs	r3, #0
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	2300      	movs	r3, #0
 8009450:	2200      	movs	r2, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fe06 	bl	800a064 <USBH_MSC_SCSI_Write>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10b      	bne.n	800947a <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	2134      	movs	r1, #52	; 0x34
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	4413      	add	r3, r2
 800946e:	3390      	adds	r3, #144	; 0x90
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]
      break;
 8009478:	e055      	b.n	8009526 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b02      	cmp	r3, #2
 800947e:	d109      	bne.n	8009494 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	2134      	movs	r1, #52	; 0x34
 8009486:	fb01 f303 	mul.w	r3, r1, r3
 800948a:	4413      	add	r3, r2
 800948c:	3390      	adds	r3, #144	; 0x90
 800948e:	2205      	movs	r2, #5
 8009490:	701a      	strb	r2, [r3, #0]
      break;
 8009492:	e048      	b.n	8009526 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	2b04      	cmp	r3, #4
 8009498:	d145      	bne.n	8009526 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	2134      	movs	r1, #52	; 0x34
 80094a0:	fb01 f303 	mul.w	r3, r1, r3
 80094a4:	4413      	add	r3, r2
 80094a6:	3390      	adds	r3, #144	; 0x90
 80094a8:	2208      	movs	r2, #8
 80094aa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	75fb      	strb	r3, [r7, #23]
      break;
 80094b0:	e039      	b.n	8009526 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	2234      	movs	r2, #52	; 0x34
 80094b6:	fb02 f303 	mul.w	r3, r2, r3
 80094ba:	3398      	adds	r3, #152	; 0x98
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	1d1a      	adds	r2, r3, #4
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fd53 	bl	8009f72 <USBH_MSC_SCSI_RequestSense>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d113      	bne.n	80094fe <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	2134      	movs	r1, #52	; 0x34
 80094dc:	fb01 f303 	mul.w	r3, r1, r3
 80094e0:	4413      	add	r3, r2
 80094e2:	3390      	adds	r3, #144	; 0x90
 80094e4:	2201      	movs	r2, #1
 80094e6:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	2134      	movs	r1, #52	; 0x34
 80094ee:	fb01 f303 	mul.w	r3, r1, r3
 80094f2:	4413      	add	r3, r2
 80094f4:	3391      	adds	r3, #145	; 0x91
 80094f6:	2202      	movs	r2, #2
 80094f8:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 80094fa:	2302      	movs	r3, #2
 80094fc:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d012      	beq.n	800952a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b04      	cmp	r3, #4
 8009508:	d10f      	bne.n	800952a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	2134      	movs	r1, #52	; 0x34
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	3390      	adds	r3, #144	; 0x90
 8009518:	2208      	movs	r2, #8
 800951a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800951c:	2302      	movs	r3, #2
 800951e:	75fb      	strb	r3, [r7, #23]
      break;
 8009520:	e003      	b.n	800952a <USBH_MSC_RdWrProcess+0x188>
      break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800952a:	bf00      	nop

  }
  return error;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b0b      	cmp	r3, #11
 8009554:	d10c      	bne.n	8009570 <USBH_MSC_UnitIsReady+0x3a>
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	2134      	movs	r1, #52	; 0x34
 800955c:	fb01 f303 	mul.w	r3, r1, r3
 8009560:	4413      	add	r3, r2
 8009562:	3391      	adds	r3, #145	; 0x91
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d102      	bne.n	8009570 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800956a:	2301      	movs	r3, #1
 800956c:	73fb      	strb	r3, [r7, #15]
 800956e:	e001      	b.n	8009574 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	460b      	mov	r3, r1
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b0b      	cmp	r3, #11
 80095a2:	d10d      	bne.n	80095c0 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	2234      	movs	r2, #52	; 0x34
 80095a8:	fb02 f303 	mul.w	r3, r2, r3
 80095ac:	3390      	adds	r3, #144	; 0x90
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4413      	add	r3, r2
 80095b2:	2234      	movs	r2, #52	; 0x34
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f005 fec2 	bl	800f340 <memcpy>
    return USBH_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	e000      	b.n	80095c2 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095c0:	2302      	movs	r3, #2
  }
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b088      	sub	sp, #32
 80095ce:	af02      	add	r7, sp, #8
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	460b      	mov	r3, r1
 80095d8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00e      	beq.n	800960e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80095f6:	2b0b      	cmp	r3, #11
 80095f8:	d109      	bne.n	800960e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	2134      	movs	r1, #52	; 0x34
 8009600:	fb01 f303 	mul.w	r3, r1, r3
 8009604:	4413      	add	r3, r2
 8009606:	3390      	adds	r3, #144	; 0x90
 8009608:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800960e:	2302      	movs	r3, #2
 8009610:	e040      	b.n	8009694 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2206      	movs	r2, #6
 8009616:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	2134      	movs	r1, #52	; 0x34
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	4413      	add	r3, r2
 8009624:	3390      	adds	r3, #144	; 0x90
 8009626:	2206      	movs	r2, #6
 8009628:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	b29a      	uxth	r2, r3
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009634:	7af9      	ldrb	r1, [r7, #11]
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 fd7b 	bl	800a13a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800964a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800964c:	e016      	b.n	800967c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1ad2      	subs	r2, r2, r3
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	f242 7110 	movw	r1, #10000	; 0x2710
 800965e:	fb01 f303 	mul.w	r3, r1, r3
 8009662:	429a      	cmp	r2, r3
 8009664:	d805      	bhi.n	8009672 <USBH_MSC_Read+0xa8>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2201      	movs	r2, #1
 8009676:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009678:	2302      	movs	r3, #2
 800967a:	e00b      	b.n	8009694 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	4619      	mov	r1, r3
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7ff fe8e 	bl	80093a2 <USBH_MSC_RdWrProcess>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d0e0      	beq.n	800964e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2201      	movs	r2, #1
 8009690:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	460b      	mov	r3, r1
 80096aa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00e      	beq.n	80096e0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096c8:	2b0b      	cmp	r3, #11
 80096ca:	d109      	bne.n	80096e0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	2134      	movs	r1, #52	; 0x34
 80096d2:	fb01 f303 	mul.w	r3, r1, r3
 80096d6:	4413      	add	r3, r2
 80096d8:	3390      	adds	r3, #144	; 0x90
 80096da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d001      	beq.n	80096e4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80096e0:	2302      	movs	r3, #2
 80096e2:	e040      	b.n	8009766 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2207      	movs	r2, #7
 80096e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	2134      	movs	r1, #52	; 0x34
 80096f0:	fb01 f303 	mul.w	r3, r1, r3
 80096f4:	4413      	add	r3, r2
 80096f6:	3390      	adds	r3, #144	; 0x90
 80096f8:	2207      	movs	r2, #7
 80096fa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	b29a      	uxth	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009706:	7af9      	ldrb	r1, [r7, #11]
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fca7 	bl	800a064 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800971c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800971e:	e016      	b.n	800974e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	1ad2      	subs	r2, r2, r3
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009730:	fb01 f303 	mul.w	r3, r1, r3
 8009734:	429a      	cmp	r2, r3
 8009736:	d805      	bhi.n	8009744 <USBH_MSC_Write+0xa8>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2201      	movs	r2, #1
 8009748:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800974a:	2302      	movs	r3, #2
 800974c:	e00b      	b.n	8009766 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800974e:	7afb      	ldrb	r3, [r7, #11]
 8009750:	4619      	mov	r1, r3
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fe25 	bl	80093a2 <USBH_MSC_RdWrProcess>
 8009758:	4603      	mov	r3, r0
 800975a:	2b01      	cmp	r3, #1
 800975c:	d0e0      	beq.n	8009720 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2201      	movs	r2, #1
 8009762:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2221      	movs	r2, #33	; 0x21
 800977a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	22ff      	movs	r2, #255	; 0xff
 8009780:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009794:	2200      	movs	r2, #0
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fdae 	bl	800b2fa <USBH_CtlReq>
 800979e:	4603      	mov	r3, r0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	22a1      	movs	r2, #161	; 0xa1
 80097b6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	22fe      	movs	r2, #254	; 0xfe
 80097bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80097d0:	2201      	movs	r2, #1
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 fd90 	bl	800b2fa <USBH_CtlReq>
 80097da:	4603      	mov	r3, r0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4a09      	ldr	r2, [pc, #36]	; (8009820 <USBH_MSC_BOT_Init+0x3c>)
 80097fa:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4a09      	ldr	r2, [pc, #36]	; (8009824 <USBH_MSC_BOT_Init+0x40>)
 8009800:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	43425355 	.word	0x43425355
 8009824:	20304050 	.word	0x20304050

08009828 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009834:	2301      	movs	r3, #1
 8009836:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009838:	2301      	movs	r3, #1
 800983a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800983c:	2301      	movs	r3, #1
 800983e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009840:	2300      	movs	r3, #0
 8009842:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009858:	3b01      	subs	r3, #1
 800985a:	2b0a      	cmp	r3, #10
 800985c:	f200 81a1 	bhi.w	8009ba2 <USBH_MSC_BOT_Process+0x37a>
 8009860:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <USBH_MSC_BOT_Process+0x40>)
 8009862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009866:	bf00      	nop
 8009868:	08009895 	.word	0x08009895
 800986c:	080098bf 	.word	0x080098bf
 8009870:	08009929 	.word	0x08009929
 8009874:	08009947 	.word	0x08009947
 8009878:	080099cb 	.word	0x080099cb
 800987c:	080099ef 	.word	0x080099ef
 8009880:	08009a89 	.word	0x08009a89
 8009884:	08009aa5 	.word	0x08009aa5
 8009888:	08009af7 	.word	0x08009af7
 800988c:	08009b27 	.word	0x08009b27
 8009890:	08009b89 	.word	0x08009b89
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	795a      	ldrb	r2, [r3, #5]
 80098ae:	2301      	movs	r3, #1
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	4613      	mov	r3, r2
 80098b4:	221f      	movs	r2, #31
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 ff2f 	bl	800b71a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098bc:	e180      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	795b      	ldrb	r3, [r3, #5]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f004 fddb 	bl	800e480 <USBH_LL_GetURBState>
 80098ca:	4603      	mov	r3, r0
 80098cc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098ce:	7d3b      	ldrb	r3, [r7, #20]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d118      	bne.n	8009906 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00f      	beq.n	80098fc <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098e2:	b25b      	sxtb	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da04      	bge.n	80098f2 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2203      	movs	r2, #3
 80098ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098f0:	e159      	b.n	8009ba6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2205      	movs	r2, #5
 80098f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098fa:	e154      	b.n	8009ba6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2207      	movs	r2, #7
 8009900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009904:	e14f      	b.n	8009ba6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009906:	7d3b      	ldrb	r3, [r7, #20]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d104      	bne.n	8009916 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009914:	e147      	b.n	8009ba6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009916:	7d3b      	ldrb	r3, [r7, #20]
 8009918:	2b05      	cmp	r3, #5
 800991a:	f040 8144 	bne.w	8009ba6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	220a      	movs	r2, #10
 8009922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009926:	e13e      	b.n	8009ba6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	895a      	ldrh	r2, [r3, #10]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	791b      	ldrb	r3, [r3, #4]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 ff14 	bl	800b764 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2204      	movs	r2, #4
 8009940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009944:	e13c      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	791b      	ldrb	r3, [r3, #4]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f004 fd97 	bl	800e480 <USBH_LL_GetURBState>
 8009952:	4603      	mov	r3, r0
 8009954:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009956:	7d3b      	ldrb	r3, [r7, #20]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d12d      	bne.n	80099b8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	8952      	ldrh	r2, [r2, #10]
 8009964:	4293      	cmp	r3, r2
 8009966:	d910      	bls.n	800998a <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	8952      	ldrh	r2, [r2, #10]
 8009972:	441a      	add	r2, r3
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	8952      	ldrh	r2, [r2, #10]
 8009982:	1a9a      	subs	r2, r3, r2
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	65da      	str	r2, [r3, #92]	; 0x5c
 8009988:	e002      	b.n	8009990 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2200      	movs	r2, #0
 800998e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	895a      	ldrh	r2, [r3, #10]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fedc 	bl	800b764 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80099ac:	e0fd      	b.n	8009baa <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2207      	movs	r2, #7
 80099b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099b6:	e0f8      	b.n	8009baa <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80099b8:	7d3b      	ldrb	r3, [r7, #20]
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	f040 80f5 	bne.w	8009baa <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	2209      	movs	r2, #9
 80099c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099c8:	e0ef      	b.n	8009baa <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	891a      	ldrh	r2, [r3, #8]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	7958      	ldrb	r0, [r3, #5]
 80099d8:	2301      	movs	r3, #1
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fe9b 	bl	800b71a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2206      	movs	r2, #6
 80099e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099ec:	e0e8      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	795b      	ldrb	r3, [r3, #5]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f004 fd43 	bl	800e480 <USBH_LL_GetURBState>
 80099fa:	4603      	mov	r3, r0
 80099fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80099fe:	7d3b      	ldrb	r3, [r7, #20]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d130      	bne.n	8009a66 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	8912      	ldrh	r2, [r2, #8]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d910      	bls.n	8009a32 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	8912      	ldrh	r2, [r2, #8]
 8009a1a:	441a      	add	r2, r3
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	8912      	ldrh	r2, [r2, #8]
 8009a2a:	1a9a      	subs	r2, r3, r2
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a30:	e002      	b.n	8009a38 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2200      	movs	r2, #0
 8009a36:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00d      	beq.n	8009a5c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	891a      	ldrh	r2, [r3, #8]
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	7958      	ldrb	r0, [r3, #5]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	4603      	mov	r3, r0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fe60 	bl	800b71a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009a5a:	e0a8      	b.n	8009bae <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	2207      	movs	r2, #7
 8009a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a64:	e0a3      	b.n	8009bae <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a66:	7d3b      	ldrb	r3, [r7, #20]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d104      	bne.n	8009a76 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2205      	movs	r2, #5
 8009a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a74:	e09b      	b.n	8009bae <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009a76:	7d3b      	ldrb	r3, [r7, #20]
 8009a78:	2b05      	cmp	r3, #5
 8009a7a:	f040 8098 	bne.w	8009bae <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	220a      	movs	r2, #10
 8009a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a86:	e092      	b.n	8009bae <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	791b      	ldrb	r3, [r3, #4]
 8009a92:	220d      	movs	r2, #13
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 fe65 	bl	800b764 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aa2:	e08d      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	791b      	ldrb	r3, [r3, #4]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f004 fce8 	bl	800e480 <USBH_LL_GetURBState>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ab4:	7d3b      	ldrb	r3, [r7, #20]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d115      	bne.n	8009ae6 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f8aa 	bl	8009c24 <USBH_MSC_DecodeCSW>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009ad4:	7d7b      	ldrb	r3, [r7, #21]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ade:	e068      	b.n	8009bb2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e065      	b.n	8009bb2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009ae6:	7d3b      	ldrb	r3, [r7, #20]
 8009ae8:	2b05      	cmp	r3, #5
 8009aea:	d162      	bne.n	8009bb2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2209      	movs	r2, #9
 8009af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009af4:	e05d      	b.n	8009bb2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	2200      	movs	r2, #0
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f865 	bl	8009bcc <USBH_MSC_BOT_Abort>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b06:	7dbb      	ldrb	r3, [r7, #22]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2207      	movs	r2, #7
 8009b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009b14:	e04f      	b.n	8009bb6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009b16:	7dbb      	ldrb	r3, [r7, #22]
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d14c      	bne.n	8009bb6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	220b      	movs	r2, #11
 8009b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b24:	e047      	b.n	8009bb6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f84d 	bl	8009bcc <USBH_MSC_BOT_Abort>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b36:	7dbb      	ldrb	r3, [r7, #22]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11d      	bne.n	8009b78 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	795b      	ldrb	r3, [r3, #5]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f004 fcf0 	bl	800e528 <USBH_LL_GetToggle>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	7959      	ldrb	r1, [r3, #5]
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	f1c3 0301 	rsb	r3, r3, #1
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f004 fcb1 	bl	800e4c2 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	791b      	ldrb	r3, [r3, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f004 fcaa 	bl	800e4c2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2209      	movs	r2, #9
 8009b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009b76:	e020      	b.n	8009bba <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d11d      	bne.n	8009bba <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	220b      	movs	r2, #11
 8009b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b86:	e018      	b.n	8009bba <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff fdf0 	bl	800976e <USBH_MSC_BOT_REQ_Reset>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d112      	bne.n	8009bbe <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009ba0:	e00d      	b.n	8009bbe <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009ba2:	bf00      	nop
 8009ba4:	e00c      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009ba6:	bf00      	nop
 8009ba8:	e00a      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009baa:	bf00      	nop
 8009bac:	e008      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e006      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009bb2:	bf00      	nop
 8009bb4:	e004      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x398>
      break;
 8009bbe:	bf00      	nop
  }
  return status;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop

08009bcc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009bdc:	2302      	movs	r3, #2
 8009bde:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009bea:	78bb      	ldrb	r3, [r7, #2]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <USBH_MSC_BOT_Abort+0x2a>
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d009      	beq.n	8009c08 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009bf4:	e011      	b.n	8009c1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	79db      	ldrb	r3, [r3, #7]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 f99c 	bl	800af3a <USBH_ClrFeature>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
      break;
 8009c06:	e008      	b.n	8009c1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	799b      	ldrb	r3, [r3, #6]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 f993 	bl	800af3a <USBH_ClrFeature>
 8009c14:	4603      	mov	r3, r0
 8009c16:	73fb      	strb	r3, [r7, #15]
      break;
 8009c18:	bf00      	nop
  }
  return status;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009c36:	2301      	movs	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f004 fb8b 	bl	800e35c <USBH_LL_GetLastXferSize>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b0d      	cmp	r3, #13
 8009c4a:	d002      	beq.n	8009c52 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	73fb      	strb	r3, [r7, #15]
 8009c50:	e024      	b.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c56:	4a14      	ldr	r2, [pc, #80]	; (8009ca8 <USBH_MSC_DecodeCSW+0x84>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d11d      	bne.n	8009c98 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d119      	bne.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]
 8009c76:	e011      	b.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d102      	bne.n	8009c88 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009c82:	2301      	movs	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]
 8009c86:	e009      	b.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d104      	bne.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009c92:	2302      	movs	r3, #2
 8009c94:	73fb      	strb	r3, [r7, #15]
 8009c96:	e001      	b.n	8009c9c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	53425355 	.word	0x53425355

08009cac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cb8:	2302      	movs	r3, #2
 8009cba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d002      	beq.n	8009cd6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d021      	beq.n	8009d18 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009cd4:	e028      	b.n	8009d28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	220a      	movs	r2, #10
 8009ce8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3363      	adds	r3, #99	; 0x63
 8009cf0:	2210      	movs	r2, #16
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f005 fb2e 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d12:	2301      	movs	r3, #1
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	e007      	b.n	8009d28 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fd83 	bl	8009828 <USBH_MSC_BOT_Process>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73fb      	strb	r3, [r7, #15]
      break;
 8009d26:	bf00      	nop
  }

  return error;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b086      	sub	sp, #24
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	607a      	str	r2, [r7, #4]
 8009d3e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009d40:	2301      	movs	r3, #1
 8009d42:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d002      	beq.n	8009d5e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d027      	beq.n	8009dac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009d5c:	e05f      	b.n	8009e1e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2208      	movs	r2, #8
 8009d62:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2280      	movs	r2, #128	; 0x80
 8009d68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	220a      	movs	r2, #10
 8009d70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	3363      	adds	r3, #99	; 0x63
 8009d78:	2210      	movs	r2, #16
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f005 faea 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	2225      	movs	r2, #37	; 0x25
 8009d86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2202      	movs	r2, #2
 8009d96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f103 0210 	add.w	r2, r3, #16
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009da6:	2301      	movs	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
      break;
 8009daa:	e038      	b.n	8009e1e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	4619      	mov	r1, r3
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fd39 	bl	8009828 <USBH_MSC_BOT_Process>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d12d      	bne.n	8009e1c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dc6:	3303      	adds	r3, #3
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd2:	3302      	adds	r3, #2
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de0:	3301      	adds	r3, #1
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009de6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	061b      	lsls	r3, r3, #24
 8009df2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfe:	3307      	adds	r3, #7
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e0a:	3306      	adds	r3, #6
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	4313      	orrs	r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	809a      	strh	r2, [r3, #4]
      break;
 8009e1c:	bf00      	nop
  }

  return error;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	460b      	mov	r3, r1
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009e36:	2302      	movs	r3, #2
 8009e38:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d002      	beq.n	8009e54 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d03d      	beq.n	8009ece <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009e52:	e089      	b.n	8009f68 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2224      	movs	r2, #36	; 0x24
 8009e58:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2280      	movs	r2, #128	; 0x80
 8009e5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	220a      	movs	r2, #10
 8009e66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	3363      	adds	r3, #99	; 0x63
 8009e6e:	220a      	movs	r2, #10
 8009e70:	2100      	movs	r1, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	f005 fa6f 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2212      	movs	r2, #18
 8009e7c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	015b      	lsls	r3, r3, #5
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2224      	movs	r2, #36	; 0x24
 8009ea0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f103 0210 	add.w	r2, r3, #16
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	75fb      	strb	r3, [r7, #23]
      break;
 8009ecc:	e04c      	b.n	8009f68 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f7ff fca8 	bl	8009828 <USBH_MSC_BOT_Process>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d141      	bne.n	8009f66 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009ee2:	2222      	movs	r2, #34	; 0x22
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f005 fa35 	bl	800f356 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 031f 	and.w	r3, r3, #31
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f14:	3301      	adds	r3, #1
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	b25b      	sxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da03      	bge.n	8009f26 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	709a      	strb	r2, [r3, #2]
 8009f24:	e002      	b.n	8009f2c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	1cd8      	adds	r0, r3, #3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f36:	3308      	adds	r3, #8
 8009f38:	2208      	movs	r2, #8
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	f005 fa00 	bl	800f340 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f103 000c 	add.w	r0, r3, #12
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f4c:	3310      	adds	r3, #16
 8009f4e:	2210      	movs	r2, #16
 8009f50:	4619      	mov	r1, r3
 8009f52:	f005 f9f5 	bl	800f340 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	331d      	adds	r3, #29
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009f60:	3220      	adds	r2, #32
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	601a      	str	r2, [r3, #0]
      break;
 8009f66:	bf00      	nop
  }

  return error;
 8009f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b086      	sub	sp, #24
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	607a      	str	r2, [r7, #4]
 8009f7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f80:	2302      	movs	r3, #2
 8009f82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d002      	beq.n	8009f9e <USBH_MSC_SCSI_RequestSense+0x2c>
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d03d      	beq.n	800a018 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009f9c:	e05d      	b.n	800a05a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	220e      	movs	r2, #14
 8009fa2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2280      	movs	r2, #128	; 0x80
 8009fa8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	220a      	movs	r2, #10
 8009fb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	3363      	adds	r3, #99	; 0x63
 8009fb8:	2210      	movs	r2, #16
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f005 f9ca 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	015b      	lsls	r3, r3, #5
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	220e      	movs	r2, #14
 8009fea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2202      	movs	r2, #2
 800a002:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f103 0210 	add.w	r2, r3, #16
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a012:	2301      	movs	r3, #1
 800a014:	75fb      	strb	r3, [r7, #23]
      break;
 800a016:	e020      	b.n	800a05a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	4619      	mov	r1, r3
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff fc03 	bl	8009828 <USBH_MSC_BOT_Process>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d115      	bne.n	800a058 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a032:	3302      	adds	r3, #2
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	f003 030f 	and.w	r3, r3, #15
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a046:	7b1a      	ldrb	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a052:	7b5a      	ldrb	r2, [r3, #13]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	709a      	strb	r2, [r3, #2]
      break;
 800a058:	bf00      	nop
  }

  return error;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	460b      	mov	r3, r1
 800a072:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a074:	2302      	movs	r3, #2
 800a076:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d002      	beq.n	800a092 <USBH_MSC_SCSI_Write+0x2e>
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d047      	beq.n	800a120 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a090:	e04e      	b.n	800a130 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a098:	461a      	mov	r2, r3
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	fb03 f202 	mul.w	r2, r3, r2
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	220a      	movs	r2, #10
 800a0b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	3363      	adds	r3, #99	; 0x63
 800a0b8:	2210      	movs	r2, #16
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f005 f94a 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	222a      	movs	r2, #42	; 0x2a
 800a0c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0ca:	79fa      	ldrb	r2, [r7, #7]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0d2:	79ba      	ldrb	r2, [r7, #6]
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a0da:	797a      	ldrb	r2, [r7, #5]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a0e2:	1d3b      	adds	r3, r7, #4
 800a0e4:	781a      	ldrb	r2, [r3, #0]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a0ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a0f6:	f107 0320 	add.w	r3, r7, #32
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2202      	movs	r2, #2
 800a10e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a11a:	2301      	movs	r3, #1
 800a11c:	75fb      	strb	r3, [r7, #23]
      break;
 800a11e:	e007      	b.n	800a130 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a120:	7afb      	ldrb	r3, [r7, #11]
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fb7f 	bl	8009828 <USBH_MSC_BOT_Process>
 800a12a:	4603      	mov	r3, r0
 800a12c:	75fb      	strb	r3, [r7, #23]
      break;
 800a12e:	bf00      	nop
  }

  return error;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b086      	sub	sp, #24
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	607a      	str	r2, [r7, #4]
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	460b      	mov	r3, r1
 800a148:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a14a:	2302      	movs	r3, #2
 800a14c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d002      	beq.n	800a168 <USBH_MSC_SCSI_Read+0x2e>
 800a162:	2b02      	cmp	r3, #2
 800a164:	d047      	beq.n	800a1f6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a166:	e04e      	b.n	800a206 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a16e:	461a      	mov	r2, r3
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	fb03 f202 	mul.w	r2, r3, r2
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2280      	movs	r2, #128	; 0x80
 800a17e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	220a      	movs	r2, #10
 800a186:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3363      	adds	r3, #99	; 0x63
 800a18e:	2210      	movs	r2, #16
 800a190:	2100      	movs	r1, #0
 800a192:	4618      	mov	r0, r3
 800a194:	f005 f8df 	bl	800f356 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2228      	movs	r2, #40	; 0x28
 800a19c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a1a0:	79fa      	ldrb	r2, [r7, #7]
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a1a8:	79ba      	ldrb	r2, [r7, #6]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a1b0:	797a      	ldrb	r2, [r7, #5]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a1b8:	1d3b      	adds	r3, r7, #4
 800a1ba:	781a      	ldrb	r2, [r3, #0]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a1c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a1cc:	f107 0320 	add.w	r3, r7, #32
 800a1d0:	781a      	ldrb	r2, [r3, #0]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f4:	e007      	b.n	800a206 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fb14 	bl	8009828 <USBH_MSC_BOT_Process>
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]
      break;
 800a204:	bf00      	nop
  }

  return error;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	e029      	b.n	800a27c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	79fa      	ldrb	r2, [r7, #7]
 800a22c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 f81f 	bl	800a284 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f003 ffbf 	bl	800e1f8 <USBH_LL_Init>

  return USBH_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e009      	b.n	800a2aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	33e0      	adds	r3, #224	; 0xe0
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b0e      	cmp	r3, #14
 800a2ae:	d9f2      	bls.n	800a296 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e009      	b.n	800a2ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d0:	d3f1      	bcc.n	800a2b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2240      	movs	r2, #64	; 0x40
 800a2f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d016      	beq.n	800a36e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10e      	bne.n	800a368 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a350:	1c59      	adds	r1, r3, #1
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	33de      	adds	r3, #222	; 0xde
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73fb      	strb	r3, [r7, #15]
 800a366:	e004      	b.n	800a372 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a368:	2302      	movs	r3, #2
 800a36a:	73fb      	strb	r3, [r7, #15]
 800a36c:	e001      	b.n	800a372 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a36e:	2302      	movs	r3, #2
 800a370:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a372:	7bfb      	ldrb	r3, [r7, #15]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a396:	78fa      	ldrb	r2, [r7, #3]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d204      	bcs.n	800a3a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3a4:	e001      	b.n	800a3aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	70fb      	strb	r3, [r7, #3]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70bb      	strb	r3, [r7, #2]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3e2:	e025      	b.n	800a430 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	221a      	movs	r2, #26
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	795b      	ldrb	r3, [r3, #5]
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d002      	beq.n	800a406 <USBH_FindInterface+0x4e>
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	2bff      	cmp	r3, #255	; 0xff
 800a404:	d111      	bne.n	800a42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a40a:	78ba      	ldrb	r2, [r7, #2]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d002      	beq.n	800a416 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a410:	78bb      	ldrb	r3, [r7, #2]
 800a412:	2bff      	cmp	r3, #255	; 0xff
 800a414:	d109      	bne.n	800a42a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a41a:	787a      	ldrb	r2, [r7, #1]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d002      	beq.n	800a426 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a420:	787b      	ldrb	r3, [r7, #1]
 800a422:	2bff      	cmp	r3, #255	; 0xff
 800a424:	d101      	bne.n	800a42a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	e006      	b.n	800a438 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	3301      	adds	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d9d6      	bls.n	800a3e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a436:	23ff      	movs	r3, #255	; 0xff
}
 800a438:	4618      	mov	r0, r3
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f003 ff0f 	bl	800e270 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a452:	2101      	movs	r1, #1
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f004 f826 	bl	800e4a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af04      	add	r7, sp, #16
 800a46a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d102      	bne.n	800a486 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2203      	movs	r2, #3
 800a484:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b0b      	cmp	r3, #11
 800a48e:	f200 81b3 	bhi.w	800a7f8 <USBH_Process+0x394>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <USBH_Process+0x34>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4c9 	.word	0x0800a4c9
 800a49c:	0800a4fb 	.word	0x0800a4fb
 800a4a0:	0800a563 	.word	0x0800a563
 800a4a4:	0800a793 	.word	0x0800a793
 800a4a8:	0800a7f9 	.word	0x0800a7f9
 800a4ac:	0800a607 	.word	0x0800a607
 800a4b0:	0800a739 	.word	0x0800a739
 800a4b4:	0800a63d 	.word	0x0800a63d
 800a4b8:	0800a65d 	.word	0x0800a65d
 800a4bc:	0800a67d 	.word	0x0800a67d
 800a4c0:	0800a6ab 	.word	0x0800a6ab
 800a4c4:	0800a77b 	.word	0x0800a77b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8193 	beq.w	800a7fc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4dc:	20c8      	movs	r0, #200	; 0xc8
 800a4de:	f004 f856 	bl	800e58e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f003 ff1f 	bl	800e326 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a4f8:	e180      	b.n	800a7fc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a500:	2b01      	cmp	r3, #1
 800a502:	d107      	bne.n	800a514 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a512:	e182      	b.n	800a81a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a51a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a51e:	d914      	bls.n	800a54a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a526:	3301      	adds	r3, #1
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a536:	2b03      	cmp	r3, #3
 800a538:	d903      	bls.n	800a542 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	220d      	movs	r2, #13
 800a53e:	701a      	strb	r2, [r3, #0]
      break;
 800a540:	e16b      	b.n	800a81a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
      break;
 800a548:	e167      	b.n	800a81a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a550:	f103 020a 	add.w	r2, r3, #10
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a55a:	200a      	movs	r0, #10
 800a55c:	f004 f817 	bl	800e58e <USBH_Delay>
      break;
 800a560:	e15b      	b.n	800a81a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a572:	2104      	movs	r1, #4
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a578:	2064      	movs	r0, #100	; 0x64
 800a57a:	f004 f808 	bl	800e58e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f003 feac 	bl	800e2dc <USBH_LL_GetSpeed>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2205      	movs	r2, #5
 800a592:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a594:	2100      	movs	r1, #0
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f001 f931 	bl	800b7fe <USBH_AllocPipe>
 800a59c:	4603      	mov	r3, r0
 800a59e:	461a      	mov	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5a4:	2180      	movs	r1, #128	; 0x80
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f001 f929 	bl	800b7fe <USBH_AllocPipe>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	7919      	ldrb	r1, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5c8:	b292      	uxth	r2, r2
 800a5ca:	9202      	str	r2, [sp, #8]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	9201      	str	r2, [sp, #4]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2280      	movs	r2, #128	; 0x80
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 f8e2 	bl	800b7a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7959      	ldrb	r1, [r3, #5]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5f0:	b292      	uxth	r2, r2
 800a5f2:	9202      	str	r2, [sp, #8]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	9201      	str	r2, [sp, #4]
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 f8ce 	bl	800b7a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a604:	e109      	b.n	800a81a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f90c 	bl	800a824 <USBH_HandleEnum>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 80f3 	bne.w	800a800 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d103      	bne.n	800a634 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2208      	movs	r2, #8
 800a630:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a632:	e0e5      	b.n	800a800 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2207      	movs	r2, #7
 800a638:	701a      	strb	r2, [r3, #0]
      break;
 800a63a:	e0e1      	b.n	800a800 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80de 	beq.w	800a804 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a64e:	2101      	movs	r1, #1
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2208      	movs	r2, #8
 800a658:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a65a:	e0d3      	b.n	800a804 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a662:	b29b      	uxth	r3, r3
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fc20 	bl	800aeac <USBH_SetCfg>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f040 80ca 	bne.w	800a808 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2209      	movs	r2, #9
 800a678:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a67a:	e0c5      	b.n	800a808 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a68a:	2101      	movs	r1, #1
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fc30 	bl	800aef2 <USBH_SetFeature>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	f040 80b9 	bne.w	800a80c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	220a      	movs	r2, #10
 800a69e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6a0:	e0b4      	b.n	800a80c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	701a      	strb	r2, [r3, #0]
      break;
 800a6a8:	e0b0      	b.n	800a80c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 80ad 	beq.w	800a810 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
 800a6c2:	e016      	b.n	800a6f2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6c4:	7bfa      	ldrb	r2, [r7, #15]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	32de      	adds	r2, #222	; 0xde
 800a6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ce:	791a      	ldrb	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d108      	bne.n	800a6ec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6da:	7bfa      	ldrb	r2, [r7, #15]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	32de      	adds	r2, #222	; 0xde
 800a6e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a6ea:	e005      	b.n	800a6f8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0e5      	beq.n	800a6c4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d016      	beq.n	800a730 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d109      	bne.n	800a728 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2206      	movs	r2, #6
 800a718:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a720:	2103      	movs	r1, #3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a726:	e073      	b.n	800a810 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	220d      	movs	r2, #13
 800a72c:	701a      	strb	r2, [r3, #0]
      break;
 800a72e:	e06f      	b.n	800a810 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	220d      	movs	r2, #13
 800a734:	701a      	strb	r2, [r3, #0]
      break;
 800a736:	e06b      	b.n	800a810 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d017      	beq.n	800a772 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
 800a74e:	4603      	mov	r3, r0
 800a750:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	220b      	movs	r2, #11
 800a75e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a760:	e058      	b.n	800a814 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b02      	cmp	r3, #2
 800a768:	d154      	bne.n	800a814 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	220d      	movs	r2, #13
 800a76e:	701a      	strb	r2, [r3, #0]
      break;
 800a770:	e050      	b.n	800a814 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e04c      	b.n	800a814 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d049      	beq.n	800a818 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
      }
      break;
 800a790:	e042      	b.n	800a818 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff fd72 	bl	800a284 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d009      	beq.n	800a7be <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d005      	beq.n	800a7d4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ce:	2105      	movs	r1, #5
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d107      	bne.n	800a7f0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fe2b 	bl	800a444 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7ee:	e014      	b.n	800a81a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f003 fd3d 	bl	800e270 <USBH_LL_Start>
      break;
 800a7f6:	e010      	b.n	800a81a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e00e      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e00c      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a800:	bf00      	nop
 800a802:	e00a      	b.n	800a81a <USBH_Process+0x3b6>
    break;
 800a804:	bf00      	nop
 800a806:	e008      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a808:	bf00      	nop
 800a80a:	e006      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a80c:	bf00      	nop
 800a80e:	e004      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a810:	bf00      	nop
 800a812:	e002      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a814:	bf00      	nop
 800a816:	e000      	b.n	800a81a <USBH_Process+0x3b6>
      break;
 800a818:	bf00      	nop
  }
  return USBH_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af04      	add	r7, sp, #16
 800a82a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a82c:	2301      	movs	r3, #1
 800a82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a830:	2301      	movs	r3, #1
 800a832:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b07      	cmp	r3, #7
 800a83a:	f200 81c1 	bhi.w	800abc0 <USBH_HandleEnum+0x39c>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBH_HandleEnum+0x20>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a865 	.word	0x0800a865
 800a848:	0800a923 	.word	0x0800a923
 800a84c:	0800a98d 	.word	0x0800a98d
 800a850:	0800aa1b 	.word	0x0800aa1b
 800a854:	0800aa85 	.word	0x0800aa85
 800a858:	0800aaf5 	.word	0x0800aaf5
 800a85c:	0800ab3b 	.word	0x0800ab3b
 800a860:	0800ab81 	.word	0x0800ab81
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a864:	2108      	movs	r1, #8
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa50 	bl	800ad0c <USBH_Get_DevDesc>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d130      	bne.n	800a8d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7919      	ldrb	r1, [r3, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a89a:	b292      	uxth	r2, r2
 800a89c:	9202      	str	r2, [sp, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	9201      	str	r2, [sp, #4]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2280      	movs	r2, #128	; 0x80
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 ff79 	bl	800b7a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7959      	ldrb	r1, [r3, #5]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8c2:	b292      	uxth	r2, r2
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 ff65 	bl	800b7a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8d6:	e175      	b.n	800abc4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	f040 8172 	bne.w	800abc4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d903      	bls.n	800a902 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	220d      	movs	r2, #13
 800a8fe:	701a      	strb	r2, [r3, #0]
      break;
 800a900:	e160      	b.n	800abc4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	795b      	ldrb	r3, [r3, #5]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 ff99 	bl	800b840 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	791b      	ldrb	r3, [r3, #4]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 ff93 	bl	800b840 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
      break;
 800a920:	e150      	b.n	800abc4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a922:	2112      	movs	r1, #18
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f9f1 	bl	800ad0c <USBH_Get_DevDesc>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d103      	bne.n	800a93c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a93a:	e145      	b.n	800abc8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	2b03      	cmp	r3, #3
 800a940:	f040 8142 	bne.w	800abc8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a94a:	3301      	adds	r3, #1
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d903      	bls.n	800a966 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	220d      	movs	r2, #13
 800a962:	701a      	strb	r2, [r3, #0]
      break;
 800a964:	e130      	b.n	800abc8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	795b      	ldrb	r3, [r3, #5]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 ff67 	bl	800b840 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	791b      	ldrb	r3, [r3, #4]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 ff61 	bl	800b840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	701a      	strb	r2, [r3, #0]
      break;
 800a98a:	e11d      	b.n	800abc8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a98c:	2101      	movs	r1, #1
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fa68 	bl	800ae64 <USBH_SetAddress>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d132      	bne.n	800aa04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a99e:	2002      	movs	r0, #2
 800a9a0:	f003 fdf5 	bl	800e58e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7919      	ldrb	r1, [r3, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9c6:	b292      	uxth	r2, r2
 800a9c8:	9202      	str	r2, [sp, #8]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	9201      	str	r2, [sp, #4]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2280      	movs	r2, #128	; 0x80
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fee3 	bl	800b7a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7959      	ldrb	r1, [r3, #5]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ee:	b292      	uxth	r2, r2
 800a9f0:	9202      	str	r2, [sp, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fecf 	bl	800b7a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa02:	e0e3      	b.n	800abcc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	f040 80e0 	bne.w	800abcc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	220d      	movs	r2, #13
 800aa10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	705a      	strb	r2, [r3, #1]
      break;
 800aa18:	e0d8      	b.n	800abcc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa1a:	2109      	movs	r1, #9
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f99d 	bl	800ad5c <USBH_Get_CfgDesc>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d103      	bne.n	800aa34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa32:	e0cd      	b.n	800abd0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	f040 80ca 	bne.w	800abd0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d903      	bls.n	800aa5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	220d      	movs	r2, #13
 800aa5a:	701a      	strb	r2, [r3, #0]
      break;
 800aa5c:	e0b8      	b.n	800abd0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	795b      	ldrb	r3, [r3, #5]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 feeb 	bl	800b840 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fee5 	bl	800b840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
      break;
 800aa82:	e0a5      	b.n	800abd0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f965 	bl	800ad5c <USBH_Get_CfgDesc>
 800aa92:	4603      	mov	r3, r0
 800aa94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d103      	bne.n	800aaa4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aaa2:	e097      	b.n	800abd4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	f040 8094 	bne.w	800abd4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aab2:	3301      	adds	r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d903      	bls.n	800aace <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	220d      	movs	r2, #13
 800aaca:	701a      	strb	r2, [r3, #0]
      break;
 800aacc:	e082      	b.n	800abd4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	795b      	ldrb	r3, [r3, #5]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 feb3 	bl	800b840 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	791b      	ldrb	r3, [r3, #4]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fead 	bl	800b840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
      break;
 800aaf2:	e06f      	b.n	800abd4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d019      	beq.n	800ab32 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab0a:	23ff      	movs	r3, #255	; 0xff
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f949 	bl	800ada4 <USBH_Get_StringDesc>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2206      	movs	r2, #6
 800ab20:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab22:	e059      	b.n	800abd8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d156      	bne.n	800abd8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2206      	movs	r2, #6
 800ab2e:	705a      	strb	r2, [r3, #1]
      break;
 800ab30:	e052      	b.n	800abd8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2206      	movs	r2, #6
 800ab36:	705a      	strb	r2, [r3, #1]
      break;
 800ab38:	e04e      	b.n	800abd8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d019      	beq.n	800ab78 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab50:	23ff      	movs	r3, #255	; 0xff
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f926 	bl	800ada4 <USBH_Get_StringDesc>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2207      	movs	r2, #7
 800ab66:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab68:	e038      	b.n	800abdc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d135      	bne.n	800abdc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2207      	movs	r2, #7
 800ab74:	705a      	strb	r2, [r3, #1]
      break;
 800ab76:	e031      	b.n	800abdc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2207      	movs	r2, #7
 800ab7c:	705a      	strb	r2, [r3, #1]
      break;
 800ab7e:	e02d      	b.n	800abdc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d017      	beq.n	800abba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab96:	23ff      	movs	r3, #255	; 0xff
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f903 	bl	800ada4 <USBH_Get_StringDesc>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abac:	e018      	b.n	800abe0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d115      	bne.n	800abe0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
      break;
 800abb8:	e012      	b.n	800abe0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
      break;
 800abbe:	e00f      	b.n	800abe0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800abc0:	bf00      	nop
 800abc2:	e00e      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abc4:	bf00      	nop
 800abc6:	e00c      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abc8:	bf00      	nop
 800abca:	e00a      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abcc:	bf00      	nop
 800abce:	e008      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abd0:	bf00      	nop
 800abd2:	e006      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abd4:	bf00      	nop
 800abd6:	e004      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abd8:	bf00      	nop
 800abda:	e002      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abdc:	bf00      	nop
 800abde:	e000      	b.n	800abe2 <USBH_HandleEnum+0x3be>
      break;
 800abe0:	bf00      	nop
  }
  return Status;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f804 	bl	800ac2e <USBH_HandleSof>
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b0b      	cmp	r3, #11
 800ac3e:	d10a      	bne.n	800ac56 <USBH_HandleSof+0x28>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d005      	beq.n	800ac56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
  }
}
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ac6e:	bf00      	nop
}
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ac8a:	bf00      	nop
}
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f003 fade 	bl	800e2a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	791b      	ldrb	r3, [r3, #4]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fda5 	bl	800b840 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	795b      	ldrb	r3, [r3, #5]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fd9f 	bl	800b840 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	4613      	mov	r3, r2
 800ad26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f864 	bl	800adfa <USBH_GetDescriptor>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad48:	78fa      	ldrb	r2, [r7, #3]
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f000 f918 	bl	800af82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	331c      	adds	r3, #28
 800ad6c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad6e:	887b      	ldrh	r3, [r7, #2]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f83d 	bl	800adfa <USBH_GetDescriptor>
 800ad80:	4603      	mov	r3, r0
 800ad82:	72fb      	strb	r3, [r7, #11]
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d107      	bne.n	800ad9a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad90:	887a      	ldrh	r2, [r7, #2]
 800ad92:	68f9      	ldr	r1, [r7, #12]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f964 	bl	800b062 <USBH_ParseCfgDesc>
  }

  return status;
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	607a      	str	r2, [r7, #4]
 800adae:	461a      	mov	r2, r3
 800adb0:	460b      	mov	r3, r1
 800adb2:	72fb      	strb	r3, [r7, #11]
 800adb4:	4613      	mov	r3, r2
 800adb6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	b29b      	uxth	r3, r3
 800adbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800adc0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800adc8:	893b      	ldrh	r3, [r7, #8]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	460b      	mov	r3, r1
 800adce:	2100      	movs	r1, #0
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 f812 	bl	800adfa <USBH_GetDescriptor>
 800add6:	4603      	mov	r3, r0
 800add8:	75fb      	strb	r3, [r7, #23]
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ade6:	893a      	ldrh	r2, [r7, #8]
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4618      	mov	r0, r3
 800adec:	f000 fa37 	bl	800b25e <USBH_ParseStringDesc>
  }

  return status;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	72fb      	strb	r3, [r7, #11]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	789b      	ldrb	r3, [r3, #2]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d11c      	bne.n	800ae4e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2206      	movs	r2, #6
 800ae24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	893a      	ldrh	r2, [r7, #8]
 800ae2a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae2c:	893b      	ldrh	r3, [r7, #8]
 800ae2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae36:	d104      	bne.n	800ae42 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f240 4209 	movw	r2, #1033	; 0x409
 800ae3e:	829a      	strh	r2, [r3, #20]
 800ae40:	e002      	b.n	800ae48 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8b3a      	ldrh	r2, [r7, #24]
 800ae4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae4e:	8b3b      	ldrh	r3, [r7, #24]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6879      	ldr	r1, [r7, #4]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 fa50 	bl	800b2fa <USBH_CtlReq>
 800ae5a:	4603      	mov	r3, r0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	789b      	ldrb	r3, [r3, #2]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10f      	bne.n	800ae98 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2205      	movs	r2, #5
 800ae82:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ae84:	78fb      	ldrb	r3, [r7, #3]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fa2c 	bl	800b2fa <USBH_CtlReq>
 800aea2:	4603      	mov	r3, r0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	789b      	ldrb	r3, [r3, #2]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d10e      	bne.n	800aede <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2209      	movs	r2, #9
 800aeca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	887a      	ldrh	r2, [r7, #2]
 800aed0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aede:	2200      	movs	r2, #0
 800aee0:	2100      	movs	r1, #0
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fa09 	bl	800b2fa <USBH_CtlReq>
 800aee8:	4603      	mov	r3, r0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	460b      	mov	r3, r1
 800aefc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	789b      	ldrb	r3, [r3, #2]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d10f      	bne.n	800af26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2203      	movs	r2, #3
 800af10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	b29a      	uxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af26:	2200      	movs	r2, #0
 800af28:	2100      	movs	r1, #0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f9e5 	bl	800b2fa <USBH_CtlReq>
 800af30:	4603      	mov	r3, r0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	789b      	ldrb	r3, [r3, #2]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d10f      	bne.n	800af6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2202      	movs	r2, #2
 800af52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	b29a      	uxth	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800af6e:	2200      	movs	r2, #0
 800af70:	2100      	movs	r1, #0
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9c1 	bl	800b2fa <USBH_CtlReq>
 800af78:	4603      	mov	r3, r0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	4613      	mov	r3, r2
 800af8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	781a      	ldrb	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	785a      	ldrb	r2, [r3, #1]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	3302      	adds	r3, #2
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	3303      	adds	r3, #3
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	021b      	lsls	r3, r3, #8
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	791a      	ldrb	r2, [r3, #4]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	795a      	ldrb	r2, [r3, #5]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	799a      	ldrb	r2, [r3, #6]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	79da      	ldrb	r2, [r3, #7]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	2b08      	cmp	r3, #8
 800afe0:	d939      	bls.n	800b056 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3308      	adds	r3, #8
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b29a      	uxth	r2, r3
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	3309      	adds	r3, #9
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	b29a      	uxth	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	330a      	adds	r3, #10
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b29a      	uxth	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	330b      	adds	r3, #11
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	b29b      	uxth	r3, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	330c      	adds	r3, #12
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29a      	uxth	r2, r3
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	330d      	adds	r3, #13
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	b29a      	uxth	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	7b9a      	ldrb	r2, [r3, #14]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	7bda      	ldrb	r2, [r3, #15]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	7c1a      	ldrb	r2, [r3, #16]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	7c5a      	ldrb	r2, [r3, #17]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	745a      	strb	r2, [r3, #17]
  }
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b08a      	sub	sp, #40	; 0x28
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	60b9      	str	r1, [r7, #8]
 800b06c:	4613      	mov	r3, r2
 800b06e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	785a      	ldrb	r2, [r3, #1]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3302      	adds	r3, #2
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	3303      	adds	r3, #3
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	791a      	ldrb	r2, [r3, #4]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	795a      	ldrb	r2, [r3, #5]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	799a      	ldrb	r2, [r3, #6]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	79da      	ldrb	r2, [r3, #7]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	7a1a      	ldrb	r2, [r3, #8]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d95f      	bls.n	800b19e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b0de:	2309      	movs	r3, #9
 800b0e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b0e6:	e051      	b.n	800b18c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b0e8:	f107 0316 	add.w	r3, r7, #22
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0f0:	f000 f8e8 	bl	800b2c4 <USBH_GetNextDesc>
 800b0f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d146      	bne.n	800b18c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b0fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b102:	221a      	movs	r2, #26
 800b104:	fb02 f303 	mul.w	r3, r2, r3
 800b108:	3308      	adds	r3, #8
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	3302      	adds	r3, #2
 800b110:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b114:	69f8      	ldr	r0, [r7, #28]
 800b116:	f000 f846 	bl	800b1a6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b124:	e022      	b.n	800b16c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b126:	f107 0316 	add.w	r3, r7, #22
 800b12a:	4619      	mov	r1, r3
 800b12c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b12e:	f000 f8c9 	bl	800b2c4 <USBH_GetNextDesc>
 800b132:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b05      	cmp	r3, #5
 800b13a:	d117      	bne.n	800b16c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b13c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b140:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b144:	3201      	adds	r2, #1
 800b146:	00d2      	lsls	r2, r2, #3
 800b148:	211a      	movs	r1, #26
 800b14a:	fb01 f303 	mul.w	r3, r1, r3
 800b14e:	4413      	add	r3, r2
 800b150:	3308      	adds	r3, #8
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	3304      	adds	r3, #4
 800b158:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b15a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b15c:	69b8      	ldr	r0, [r7, #24]
 800b15e:	f000 f851 	bl	800b204 <USBH_ParseEPDesc>
            ep_ix++;
 800b162:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b166:	3301      	adds	r3, #1
 800b168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b174:	429a      	cmp	r2, r3
 800b176:	d204      	bcs.n	800b182 <USBH_ParseCfgDesc+0x120>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	885a      	ldrh	r2, [r3, #2]
 800b17c:	8afb      	ldrh	r3, [r7, #22]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d8d1      	bhi.n	800b126 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b186:	3301      	adds	r3, #1
 800b188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b18c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b190:	2b01      	cmp	r3, #1
 800b192:	d804      	bhi.n	800b19e <USBH_ParseCfgDesc+0x13c>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	885a      	ldrh	r2, [r3, #2]
 800b198:	8afb      	ldrh	r3, [r7, #22]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d8a4      	bhi.n	800b0e8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b19e:	bf00      	nop
 800b1a0:	3728      	adds	r7, #40	; 0x28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	785a      	ldrb	r2, [r3, #1]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	789a      	ldrb	r2, [r3, #2]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	78da      	ldrb	r2, [r3, #3]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	791a      	ldrb	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	795a      	ldrb	r2, [r3, #5]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	799a      	ldrb	r2, [r3, #6]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	79da      	ldrb	r2, [r3, #7]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	7a1a      	ldrb	r2, [r3, #8]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	721a      	strb	r2, [r3, #8]
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	785a      	ldrb	r2, [r3, #1]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	789a      	ldrb	r2, [r3, #2]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	78da      	ldrb	r2, [r3, #3]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	3304      	adds	r3, #4
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	b29a      	uxth	r2, r3
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	3305      	adds	r3, #5
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	4313      	orrs	r3, r2
 800b244:	b29a      	uxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	799a      	ldrb	r2, [r3, #6]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	719a      	strb	r2, [r3, #6]
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b25e:	b480      	push	{r7}
 800b260:	b087      	sub	sp, #28
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	4613      	mov	r3, r2
 800b26a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b03      	cmp	r3, #3
 800b274:	d120      	bne.n	800b2b8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	1e9a      	subs	r2, r3, #2
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	4293      	cmp	r3, r2
 800b280:	bf28      	it	cs
 800b282:	4613      	movcs	r3, r2
 800b284:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3302      	adds	r3, #2
 800b28a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b28c:	2300      	movs	r3, #0
 800b28e:	82fb      	strh	r3, [r7, #22]
 800b290:	e00b      	b.n	800b2aa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b292:	8afb      	ldrh	r3, [r7, #22]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	4413      	add	r3, r2
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b2a4:	8afb      	ldrh	r3, [r7, #22]
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	82fb      	strh	r3, [r7, #22]
 800b2aa:	8afa      	ldrh	r2, [r7, #22]
 800b2ac:	8abb      	ldrh	r3, [r7, #20]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d3ef      	bcc.n	800b292 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
  }
}
 800b2b8:	bf00      	nop
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	881a      	ldrh	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4413      	add	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b086      	sub	sp, #24
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	4613      	mov	r3, r2
 800b306:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b308:	2301      	movs	r3, #1
 800b30a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	789b      	ldrb	r3, [r3, #2]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d002      	beq.n	800b31a <USBH_CtlReq+0x20>
 800b314:	2b02      	cmp	r3, #2
 800b316:	d00f      	beq.n	800b338 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b318:	e027      	b.n	800b36a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	88fa      	ldrh	r2, [r7, #6]
 800b324:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2201      	movs	r2, #1
 800b32a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2202      	movs	r2, #2
 800b330:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b332:	2301      	movs	r3, #1
 800b334:	75fb      	strb	r3, [r7, #23]
      break;
 800b336:	e018      	b.n	800b36a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 f81b 	bl	800b374 <USBH_HandleControl>
 800b33e:	4603      	mov	r3, r0
 800b340:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <USBH_CtlReq+0x54>
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d106      	bne.n	800b35c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2201      	movs	r2, #1
 800b352:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	761a      	strb	r2, [r3, #24]
      break;
 800b35a:	e005      	b.n	800b368 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d102      	bne.n	800b368 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2201      	movs	r2, #1
 800b366:	709a      	strb	r2, [r3, #2]
      break;
 800b368:	bf00      	nop
  }
  return status;
 800b36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b37c:	2301      	movs	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b380:	2300      	movs	r3, #0
 800b382:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7e1b      	ldrb	r3, [r3, #24]
 800b388:	3b01      	subs	r3, #1
 800b38a:	2b0a      	cmp	r3, #10
 800b38c:	f200 8158 	bhi.w	800b640 <USBH_HandleControl+0x2cc>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <USBH_HandleControl+0x24>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	0800b3df 	.word	0x0800b3df
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b46f 	.word	0x0800b46f
 800b3a8:	0800b4a7 	.word	0x0800b4a7
 800b3ac:	0800b4d3 	.word	0x0800b4d3
 800b3b0:	0800b525 	.word	0x0800b525
 800b3b4:	0800b547 	.word	0x0800b547
 800b3b8:	0800b583 	.word	0x0800b583
 800b3bc:	0800b5ab 	.word	0x0800b5ab
 800b3c0:	0800b5e9 	.word	0x0800b5e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f103 0110 	add.w	r1, r3, #16
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	795b      	ldrb	r3, [r3, #5]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f945 	bl	800b660 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	761a      	strb	r2, [r3, #24]
      break;
 800b3dc:	e13b      	b.n	800b656 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	795b      	ldrb	r3, [r3, #5]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f003 f84b 	bl	800e480 <USBH_LL_GetURBState>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d11e      	bne.n	800b432 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7c1b      	ldrb	r3, [r3, #16]
 800b3f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8adb      	ldrh	r3, [r3, #22]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00a      	beq.n	800b41c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b406:	7b7b      	ldrb	r3, [r7, #13]
 800b408:	2b80      	cmp	r3, #128	; 0x80
 800b40a:	d103      	bne.n	800b414 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2203      	movs	r2, #3
 800b410:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b412:	e117      	b.n	800b644 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2205      	movs	r2, #5
 800b418:	761a      	strb	r2, [r3, #24]
      break;
 800b41a:	e113      	b.n	800b644 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b41c:	7b7b      	ldrb	r3, [r7, #13]
 800b41e:	2b80      	cmp	r3, #128	; 0x80
 800b420:	d103      	bne.n	800b42a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2209      	movs	r2, #9
 800b426:	761a      	strb	r2, [r3, #24]
      break;
 800b428:	e10c      	b.n	800b644 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2207      	movs	r2, #7
 800b42e:	761a      	strb	r2, [r3, #24]
      break;
 800b430:	e108      	b.n	800b644 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	2b04      	cmp	r3, #4
 800b436:	d003      	beq.n	800b440 <USBH_HandleControl+0xcc>
 800b438:	7bbb      	ldrb	r3, [r7, #14]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	f040 8102 	bne.w	800b644 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	220b      	movs	r2, #11
 800b444:	761a      	strb	r2, [r3, #24]
      break;
 800b446:	e0fd      	b.n	800b644 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b44e:	b29a      	uxth	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6899      	ldr	r1, [r3, #8]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	899a      	ldrh	r2, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	791b      	ldrb	r3, [r3, #4]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f93c 	bl	800b6de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2204      	movs	r2, #4
 800b46a:	761a      	strb	r2, [r3, #24]
      break;
 800b46c:	e0f3      	b.n	800b656 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	791b      	ldrb	r3, [r3, #4]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f003 f803 	bl	800e480 <USBH_LL_GetURBState>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d102      	bne.n	800b48a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2209      	movs	r2, #9
 800b488:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	2b05      	cmp	r3, #5
 800b48e:	d102      	bne.n	800b496 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b490:	2303      	movs	r3, #3
 800b492:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b494:	e0d8      	b.n	800b648 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	f040 80d5 	bne.w	800b648 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	220b      	movs	r2, #11
 800b4a2:	761a      	strb	r2, [r3, #24]
      break;
 800b4a4:	e0d0      	b.n	800b648 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6899      	ldr	r1, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	899a      	ldrh	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	7958      	ldrb	r0, [r3, #5]
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f8eb 	bl	800b694 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2206      	movs	r2, #6
 800b4ce:	761a      	strb	r2, [r3, #24]
      break;
 800b4d0:	e0c1      	b.n	800b656 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	795b      	ldrb	r3, [r3, #5]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f002 ffd1 	bl	800e480 <USBH_LL_GetURBState>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d103      	bne.n	800b4f0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2207      	movs	r2, #7
 800b4ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b4ee:	e0ad      	b.n	800b64c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b05      	cmp	r3, #5
 800b4f4:	d105      	bne.n	800b502 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	220c      	movs	r2, #12
 800b4fa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b500:	e0a4      	b.n	800b64c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d103      	bne.n	800b510 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2205      	movs	r2, #5
 800b50c:	761a      	strb	r2, [r3, #24]
      break;
 800b50e:	e09d      	b.n	800b64c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	2b04      	cmp	r3, #4
 800b514:	f040 809a 	bne.w	800b64c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	220b      	movs	r2, #11
 800b51c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b51e:	2302      	movs	r3, #2
 800b520:	73fb      	strb	r3, [r7, #15]
      break;
 800b522:	e093      	b.n	800b64c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	2100      	movs	r1, #0
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f8d6 	bl	800b6de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2208      	movs	r2, #8
 800b542:	761a      	strb	r2, [r3, #24]

      break;
 800b544:	e087      	b.n	800b656 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	791b      	ldrb	r3, [r3, #4]
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f002 ff97 	bl	800e480 <USBH_LL_GetURBState>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d105      	bne.n	800b568 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	220d      	movs	r2, #13
 800b560:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b566:	e073      	b.n	800b650 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d103      	bne.n	800b576 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	220b      	movs	r2, #11
 800b572:	761a      	strb	r2, [r3, #24]
      break;
 800b574:	e06c      	b.n	800b650 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b576:	7bbb      	ldrb	r3, [r7, #14]
 800b578:	2b05      	cmp	r3, #5
 800b57a:	d169      	bne.n	800b650 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b57c:	2303      	movs	r3, #3
 800b57e:	73fb      	strb	r3, [r7, #15]
      break;
 800b580:	e066      	b.n	800b650 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	795a      	ldrb	r2, [r3, #5]
 800b586:	2301      	movs	r3, #1
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4613      	mov	r3, r2
 800b58c:	2200      	movs	r2, #0
 800b58e:	2100      	movs	r1, #0
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f87f 	bl	800b694 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	761a      	strb	r2, [r3, #24]
      break;
 800b5a8:	e055      	b.n	800b656 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	795b      	ldrb	r3, [r3, #5]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f002 ff65 	bl	800e480 <USBH_LL_GetURBState>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d105      	bne.n	800b5cc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	220d      	movs	r2, #13
 800b5c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5ca:	e043      	b.n	800b654 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d103      	bne.n	800b5da <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2209      	movs	r2, #9
 800b5d6:	761a      	strb	r2, [r3, #24]
      break;
 800b5d8:	e03c      	b.n	800b654 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d139      	bne.n	800b654 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220b      	movs	r2, #11
 800b5e4:	761a      	strb	r2, [r3, #24]
      break;
 800b5e6:	e035      	b.n	800b654 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7e5b      	ldrb	r3, [r3, #25]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	765a      	strb	r2, [r3, #25]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	7e5b      	ldrb	r3, [r3, #25]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d806      	bhi.n	800b60a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b608:	e025      	b.n	800b656 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b610:	2106      	movs	r1, #6
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	795b      	ldrb	r3, [r3, #5]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f90c 	bl	800b840 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	791b      	ldrb	r3, [r3, #4]
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f906 	bl	800b840 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b63a:	2302      	movs	r3, #2
 800b63c:	73fb      	strb	r3, [r7, #15]
      break;
 800b63e:	e00a      	b.n	800b656 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b640:	bf00      	nop
 800b642:	e008      	b.n	800b656 <USBH_HandleControl+0x2e2>
      break;
 800b644:	bf00      	nop
 800b646:	e006      	b.n	800b656 <USBH_HandleControl+0x2e2>
      break;
 800b648:	bf00      	nop
 800b64a:	e004      	b.n	800b656 <USBH_HandleControl+0x2e2>
      break;
 800b64c:	bf00      	nop
 800b64e:	e002      	b.n	800b656 <USBH_HandleControl+0x2e2>
      break;
 800b650:	bf00      	nop
 800b652:	e000      	b.n	800b656 <USBH_HandleControl+0x2e2>
      break;
 800b654:	bf00      	nop
  }

  return status;
 800b656:	7bfb      	ldrb	r3, [r7, #15]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af04      	add	r7, sp, #16
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b66e:	79f9      	ldrb	r1, [r7, #7]
 800b670:	2300      	movs	r3, #0
 800b672:	9303      	str	r3, [sp, #12]
 800b674:	2308      	movs	r3, #8
 800b676:	9302      	str	r3, [sp, #8]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	2300      	movs	r3, #0
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2300      	movs	r3, #0
 800b682:	2200      	movs	r2, #0
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f002 feca 	bl	800e41e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af04      	add	r7, sp, #16
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4611      	mov	r1, r2
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	80fb      	strh	r3, [r7, #6]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6b8:	7979      	ldrb	r1, [r7, #5]
 800b6ba:	7e3b      	ldrb	r3, [r7, #24]
 800b6bc:	9303      	str	r3, [sp, #12]
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	9302      	str	r3, [sp, #8]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f002 fea5 	bl	800e41e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b088      	sub	sp, #32
 800b6e2:	af04      	add	r7, sp, #16
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	80fb      	strh	r3, [r7, #6]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6f4:	7979      	ldrb	r1, [r7, #5]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	88fb      	ldrh	r3, [r7, #6]
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	2301      	movs	r3, #1
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	2300      	movs	r3, #0
 800b708:	2201      	movs	r2, #1
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f002 fe87 	bl	800e41e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b710:	2300      	movs	r3, #0

}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b088      	sub	sp, #32
 800b71e:	af04      	add	r7, sp, #16
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	4611      	mov	r1, r2
 800b726:	461a      	mov	r2, r3
 800b728:	460b      	mov	r3, r1
 800b72a:	80fb      	strh	r3, [r7, #6]
 800b72c:	4613      	mov	r3, r2
 800b72e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b73a:	2300      	movs	r3, #0
 800b73c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b73e:	7979      	ldrb	r1, [r7, #5]
 800b740:	7e3b      	ldrb	r3, [r7, #24]
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	88fb      	ldrh	r3, [r7, #6]
 800b746:	9302      	str	r3, [sp, #8]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	2301      	movs	r3, #1
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2302      	movs	r3, #2
 800b752:	2200      	movs	r2, #0
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f002 fe62 	bl	800e41e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af04      	add	r7, sp, #16
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	4611      	mov	r1, r2
 800b770:	461a      	mov	r2, r3
 800b772:	460b      	mov	r3, r1
 800b774:	80fb      	strh	r3, [r7, #6]
 800b776:	4613      	mov	r3, r2
 800b778:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b77a:	7979      	ldrb	r1, [r7, #5]
 800b77c:	2300      	movs	r3, #0
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	2301      	movs	r3, #1
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	2302      	movs	r3, #2
 800b78e:	2201      	movs	r2, #1
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f002 fe44 	bl	800e41e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af04      	add	r7, sp, #16
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	70fb      	strb	r3, [r7, #3]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70bb      	strb	r3, [r7, #2]
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b7ba:	7878      	ldrb	r0, [r7, #1]
 800b7bc:	78ba      	ldrb	r2, [r7, #2]
 800b7be:	78f9      	ldrb	r1, [r7, #3]
 800b7c0:	8b3b      	ldrh	r3, [r7, #24]
 800b7c2:	9302      	str	r3, [sp, #8]
 800b7c4:	7d3b      	ldrb	r3, [r7, #20]
 800b7c6:	9301      	str	r3, [sp, #4]
 800b7c8:	7c3b      	ldrb	r3, [r7, #16]
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f002 fdd7 	bl	800e382 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f002 fdf6 	bl	800e3e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	460b      	mov	r3, r1
 800b808:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f836 	bl	800b87c <USBH_GetFreePipe>
 800b810:	4603      	mov	r3, r0
 800b812:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b814:	89fb      	ldrh	r3, [r7, #14]
 800b816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00a      	beq.n	800b834 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	89fb      	ldrh	r3, [r7, #14]
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	33e0      	adds	r3, #224	; 0xe0
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	440b      	add	r3, r1
 800b832:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b834:	89fb      	ldrh	r3, [r7, #14]
 800b836:	b2db      	uxtb	r3, r3
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b84c:	78fb      	ldrb	r3, [r7, #3]
 800b84e:	2b0a      	cmp	r3, #10
 800b850:	d80d      	bhi.n	800b86e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b852:	78fb      	ldrb	r3, [r7, #3]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	33e0      	adds	r3, #224	; 0xe0
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b864:	6879      	ldr	r1, [r7, #4]
 800b866:	33e0      	adds	r3, #224	; 0xe0
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	440b      	add	r3, r1
 800b86c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
 800b88c:	e00f      	b.n	800b8ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	33e0      	adds	r3, #224	; 0xe0
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d102      	bne.n	800b8a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	e007      	b.n	800b8b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	73fb      	strb	r3, [r7, #15]
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
 800b8b0:	2b0a      	cmp	r3, #10
 800b8b2:	d9ec      	bls.n	800b88e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b8b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	4a08      	ldr	r2, [pc, #32]	; (800b8f4 <disk_status+0x30>)
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	79fa      	ldrb	r2, [r7, #7]
 800b8dc:	4905      	ldr	r1, [pc, #20]	; (800b8f4 <disk_status+0x30>)
 800b8de:	440a      	add	r2, r1
 800b8e0:	7a12      	ldrb	r2, [r2, #8]
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	2000138c 	.word	0x2000138c

0800b8f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	4a0d      	ldr	r2, [pc, #52]	; (800b940 <disk_initialize+0x48>)
 800b90a:	5cd3      	ldrb	r3, [r2, r3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d111      	bne.n	800b934 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <disk_initialize+0x48>)
 800b914:	2101      	movs	r1, #1
 800b916:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <disk_initialize+0x48>)
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	79fa      	ldrb	r2, [r7, #7]
 800b926:	4906      	ldr	r1, [pc, #24]	; (800b940 <disk_initialize+0x48>)
 800b928:	440a      	add	r2, r1
 800b92a:	7a12      	ldrb	r2, [r2, #8]
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b934:	7bfb      	ldrb	r3, [r7, #15]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	2000138c 	.word	0x2000138c

0800b944 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b944:	b590      	push	{r4, r7, lr}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	4a0a      	ldr	r2, [pc, #40]	; (800b980 <disk_read+0x3c>)
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	689c      	ldr	r4, [r3, #8]
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	4a07      	ldr	r2, [pc, #28]	; (800b980 <disk_read+0x3c>)
 800b964:	4413      	add	r3, r2
 800b966:	7a18      	ldrb	r0, [r3, #8]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	47a0      	blx	r4
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
  return res;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd90      	pop	{r4, r7, pc}
 800b97e:	bf00      	nop
 800b980:	2000138c 	.word	0x2000138c

0800b984 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b984:	b590      	push	{r4, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4a0a      	ldr	r2, [pc, #40]	; (800b9c0 <disk_write+0x3c>)
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	68dc      	ldr	r4, [r3, #12]
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	4a07      	ldr	r2, [pc, #28]	; (800b9c0 <disk_write+0x3c>)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	7a18      	ldrb	r0, [r3, #8]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	47a0      	blx	r4
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd90      	pop	{r4, r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000138c 	.word	0x2000138c

0800b9c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	603a      	str	r2, [r7, #0]
 800b9ce:	71fb      	strb	r3, [r7, #7]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <disk_ioctl+0x38>)
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	79fa      	ldrb	r2, [r7, #7]
 800b9e2:	4906      	ldr	r1, [pc, #24]	; (800b9fc <disk_ioctl+0x38>)
 800b9e4:	440a      	add	r2, r1
 800b9e6:	7a10      	ldrb	r0, [r2, #8]
 800b9e8:	79b9      	ldrb	r1, [r7, #6]
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	4798      	blx	r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2000138c 	.word	0x2000138c

0800ba00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba10:	89fb      	ldrh	r3, [r7, #14]
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	b21a      	sxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	b21b      	sxth	r3, r3
 800ba20:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba22:	89fb      	ldrh	r3, [r7, #14]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3303      	adds	r3, #3
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	3202      	adds	r2, #2
 800ba48:	7812      	ldrb	r2, [r2, #0]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	3201      	adds	r2, #1
 800ba56:	7812      	ldrb	r2, [r2, #0]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	7812      	ldrb	r2, [r2, #0]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba76:	b480      	push	{r7}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	887a      	ldrh	r2, [r7, #2]
 800ba8a:	b2d2      	uxtb	r2, r2
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	887b      	ldrh	r3, [r7, #2]
 800ba90:	0a1b      	lsrs	r3, r3, #8
 800ba92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	607a      	str	r2, [r7, #4]
 800ba9a:	887a      	ldrh	r2, [r7, #2]
 800ba9c:	b2d2      	uxtb	r2, r2
 800ba9e:	701a      	strb	r2, [r3, #0]
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	607a      	str	r2, [r7, #4]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	607a      	str	r2, [r7, #4]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	b2d2      	uxtb	r2, r2
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	0a1b      	lsrs	r3, r3, #8
 800bad8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	b2d2      	uxtb	r2, r2
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	0a1b      	lsrs	r3, r3, #8
 800baea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	607a      	str	r2, [r7, #4]
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	b2d2      	uxtb	r2, r2
 800baf6:	701a      	strb	r2, [r3, #0]
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	1c53      	adds	r3, r2, #1
 800bb22:	613b      	str	r3, [r7, #16]
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	1c59      	adds	r1, r3, #1
 800bb28:	6179      	str	r1, [r7, #20]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	607b      	str	r3, [r7, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1f1      	bne.n	800bb1e <mem_cpy+0x1a>
	}
}
 800bb3a:	bf00      	nop
 800bb3c:	371c      	adds	r7, #28
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb46:	b480      	push	{r7}
 800bb48:	b087      	sub	sp, #28
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	60f8      	str	r0, [r7, #12]
 800bb4e:	60b9      	str	r1, [r7, #8]
 800bb50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	617a      	str	r2, [r7, #20]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	b2d2      	uxtb	r2, r2
 800bb60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1f3      	bne.n	800bb56 <mem_set+0x10>
}
 800bb6e:	bf00      	nop
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb7a:	b480      	push	{r7}
 800bb7c:	b089      	sub	sp, #36	; 0x24
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	61fb      	str	r3, [r7, #28]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	61fa      	str	r2, [r7, #28]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	61ba      	str	r2, [r7, #24]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	1acb      	subs	r3, r1, r3
 800bba6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <mem_cmp+0x40>
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0eb      	beq.n	800bb92 <mem_cmp+0x18>

	return r;
 800bbba:	697b      	ldr	r3, [r7, #20]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3724      	adds	r7, #36	; 0x24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bbd2:	e002      	b.n	800bbda <chk_chr+0x12>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	607b      	str	r3, [r7, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d005      	beq.n	800bbee <chk_chr+0x26>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d1f2      	bne.n	800bbd4 <chk_chr+0xc>
	return *str;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
	...

0800bc00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60bb      	str	r3, [r7, #8]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e029      	b.n	800bc68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc14:	4a27      	ldr	r2, [pc, #156]	; (800bcb4 <chk_lock+0xb4>)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	4413      	add	r3, r2
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d01d      	beq.n	800bc5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc22:	4a24      	ldr	r2, [pc, #144]	; (800bcb4 <chk_lock+0xb4>)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	4413      	add	r3, r2
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d116      	bne.n	800bc62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc34:	4a1f      	ldr	r2, [pc, #124]	; (800bcb4 <chk_lock+0xb4>)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	011b      	lsls	r3, r3, #4
 800bc3a:	4413      	add	r3, r2
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d10c      	bne.n	800bc62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc48:	4a1a      	ldr	r2, [pc, #104]	; (800bcb4 <chk_lock+0xb4>)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	011b      	lsls	r3, r3, #4
 800bc4e:	4413      	add	r3, r2
 800bc50:	3308      	adds	r3, #8
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d102      	bne.n	800bc62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc5c:	e007      	b.n	800bc6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	3301      	adds	r3, #1
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d9d2      	bls.n	800bc14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d109      	bne.n	800bc88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d102      	bne.n	800bc80 <chk_lock+0x80>
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d101      	bne.n	800bc84 <chk_lock+0x84>
 800bc80:	2300      	movs	r3, #0
 800bc82:	e010      	b.n	800bca6 <chk_lock+0xa6>
 800bc84:	2312      	movs	r3, #18
 800bc86:	e00e      	b.n	800bca6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d108      	bne.n	800bca0 <chk_lock+0xa0>
 800bc8e:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <chk_lock+0xb4>)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	011b      	lsls	r3, r3, #4
 800bc94:	4413      	add	r3, r2
 800bc96:	330c      	adds	r3, #12
 800bc98:	881b      	ldrh	r3, [r3, #0]
 800bc9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9e:	d101      	bne.n	800bca4 <chk_lock+0xa4>
 800bca0:	2310      	movs	r3, #16
 800bca2:	e000      	b.n	800bca6 <chk_lock+0xa6>
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	2000136c 	.word	0x2000136c

0800bcb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	607b      	str	r3, [r7, #4]
 800bcc2:	e002      	b.n	800bcca <enq_lock+0x12>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d806      	bhi.n	800bcde <enq_lock+0x26>
 800bcd0:	4a09      	ldr	r2, [pc, #36]	; (800bcf8 <enq_lock+0x40>)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	011b      	lsls	r3, r3, #4
 800bcd6:	4413      	add	r3, r2
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1f2      	bne.n	800bcc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	bf14      	ite	ne
 800bce4:	2301      	movne	r3, #1
 800bce6:	2300      	moveq	r3, #0
 800bce8:	b2db      	uxtb	r3, r3
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	2000136c 	.word	0x2000136c

0800bcfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	e01f      	b.n	800bd4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd0c:	4a41      	ldr	r2, [pc, #260]	; (800be14 <inc_lock+0x118>)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	011b      	lsls	r3, r3, #4
 800bd12:	4413      	add	r3, r2
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d113      	bne.n	800bd46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd1e:	4a3d      	ldr	r2, [pc, #244]	; (800be14 <inc_lock+0x118>)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	4413      	add	r3, r2
 800bd26:	3304      	adds	r3, #4
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d109      	bne.n	800bd46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd32:	4a38      	ldr	r2, [pc, #224]	; (800be14 <inc_lock+0x118>)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	011b      	lsls	r3, r3, #4
 800bd38:	4413      	add	r3, r2
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d006      	beq.n	800bd54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d9dc      	bls.n	800bd0c <inc_lock+0x10>
 800bd52:	e000      	b.n	800bd56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d132      	bne.n	800bdc2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e002      	b.n	800bd68 <inc_lock+0x6c>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3301      	adds	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d806      	bhi.n	800bd7c <inc_lock+0x80>
 800bd6e:	4a29      	ldr	r2, [pc, #164]	; (800be14 <inc_lock+0x118>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	4413      	add	r3, r2
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1f2      	bne.n	800bd62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d101      	bne.n	800bd86 <inc_lock+0x8a>
 800bd82:	2300      	movs	r3, #0
 800bd84:	e040      	b.n	800be08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4922      	ldr	r1, [pc, #136]	; (800be14 <inc_lock+0x118>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	440b      	add	r3, r1
 800bd92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	491e      	ldr	r1, [pc, #120]	; (800be14 <inc_lock+0x118>)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	440b      	add	r3, r1
 800bda0:	3304      	adds	r3, #4
 800bda2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	695a      	ldr	r2, [r3, #20]
 800bda8:	491a      	ldr	r1, [pc, #104]	; (800be14 <inc_lock+0x118>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	440b      	add	r3, r1
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bdb4:	4a17      	ldr	r2, [pc, #92]	; (800be14 <inc_lock+0x118>)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	4413      	add	r3, r2
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <inc_lock+0xe0>
 800bdc8:	4a12      	ldr	r2, [pc, #72]	; (800be14 <inc_lock+0x118>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	4413      	add	r3, r2
 800bdd0:	330c      	adds	r3, #12
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <inc_lock+0xe0>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	e015      	b.n	800be08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d108      	bne.n	800bdf4 <inc_lock+0xf8>
 800bde2:	4a0c      	ldr	r2, [pc, #48]	; (800be14 <inc_lock+0x118>)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	4413      	add	r3, r2
 800bdea:	330c      	adds	r3, #12
 800bdec:	881b      	ldrh	r3, [r3, #0]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	e001      	b.n	800bdf8 <inc_lock+0xfc>
 800bdf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdf8:	4906      	ldr	r1, [pc, #24]	; (800be14 <inc_lock+0x118>)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	440b      	add	r3, r1
 800be00:	330c      	adds	r3, #12
 800be02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	3301      	adds	r3, #1
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	2000136c 	.word	0x2000136c

0800be18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3b01      	subs	r3, #1
 800be24:	607b      	str	r3, [r7, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d825      	bhi.n	800be78 <dec_lock+0x60>
		n = Files[i].ctr;
 800be2c:	4a17      	ldr	r2, [pc, #92]	; (800be8c <dec_lock+0x74>)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	4413      	add	r3, r2
 800be34:	330c      	adds	r3, #12
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be3a:	89fb      	ldrh	r3, [r7, #14]
 800be3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be40:	d101      	bne.n	800be46 <dec_lock+0x2e>
 800be42:	2300      	movs	r3, #0
 800be44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be46:	89fb      	ldrh	r3, [r7, #14]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <dec_lock+0x3a>
 800be4c:	89fb      	ldrh	r3, [r7, #14]
 800be4e:	3b01      	subs	r3, #1
 800be50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be52:	4a0e      	ldr	r2, [pc, #56]	; (800be8c <dec_lock+0x74>)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	4413      	add	r3, r2
 800be5a:	330c      	adds	r3, #12
 800be5c:	89fa      	ldrh	r2, [r7, #14]
 800be5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be60:	89fb      	ldrh	r3, [r7, #14]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <dec_lock+0x5a>
 800be66:	4a09      	ldr	r2, [pc, #36]	; (800be8c <dec_lock+0x74>)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	011b      	lsls	r3, r3, #4
 800be6c:	4413      	add	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	737b      	strb	r3, [r7, #13]
 800be76:	e001      	b.n	800be7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be78:	2302      	movs	r3, #2
 800be7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be7c:	7b7b      	ldrb	r3, [r7, #13]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	2000136c 	.word	0x2000136c

0800be90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	e010      	b.n	800bec0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be9e:	4a0d      	ldr	r2, [pc, #52]	; (800bed4 <clear_lock+0x44>)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	4413      	add	r3, r2
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d105      	bne.n	800beba <clear_lock+0x2a>
 800beae:	4a09      	ldr	r2, [pc, #36]	; (800bed4 <clear_lock+0x44>)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	4413      	add	r3, r2
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d9eb      	bls.n	800be9e <clear_lock+0xe>
	}
}
 800bec6:	bf00      	nop
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	2000136c 	.word	0x2000136c

0800bed8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	78db      	ldrb	r3, [r3, #3]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d034      	beq.n	800bf56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7858      	ldrb	r0, [r3, #1]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800befc:	2301      	movs	r3, #1
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	f7ff fd40 	bl	800b984 <disk_write>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	73fb      	strb	r3, [r7, #15]
 800bf0e:	e022      	b.n	800bf56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	1ad2      	subs	r2, r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d217      	bcs.n	800bf56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	789b      	ldrb	r3, [r3, #2]
 800bf2a:	613b      	str	r3, [r7, #16]
 800bf2c:	e010      	b.n	800bf50 <sync_window+0x78>
					wsect += fs->fsize;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	699b      	ldr	r3, [r3, #24]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	4413      	add	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7858      	ldrb	r0, [r3, #1]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf42:	2301      	movs	r3, #1
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	f7ff fd1d 	bl	800b984 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	613b      	str	r3, [r7, #16]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d8eb      	bhi.n	800bf2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3718      	adds	r7, #24
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d01b      	beq.n	800bfb0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ffad 	bl	800bed8 <sync_window>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d113      	bne.n	800bfb0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	7858      	ldrb	r0, [r3, #1]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf92:	2301      	movs	r3, #1
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	f7ff fcd5 	bl	800b944 <disk_read>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ff87 	bl	800bed8 <sync_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d158      	bne.n	800c086 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	d148      	bne.n	800c06e <sync_fs+0xb2>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	791b      	ldrb	r3, [r3, #4]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d144      	bne.n	800c06e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3330      	adds	r3, #48	; 0x30
 800bfe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfec:	2100      	movs	r1, #0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff fda9 	bl	800bb46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3330      	adds	r3, #48	; 0x30
 800bff8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bffc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fd38 	bl	800ba76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3330      	adds	r3, #48	; 0x30
 800c00a:	4921      	ldr	r1, [pc, #132]	; (800c090 <sync_fs+0xd4>)
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff fd4d 	bl	800baac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3330      	adds	r3, #48	; 0x30
 800c016:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c01a:	491e      	ldr	r1, [pc, #120]	; (800c094 <sync_fs+0xd8>)
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fd45 	bl	800baac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3330      	adds	r3, #48	; 0x30
 800c026:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	4619      	mov	r1, r3
 800c030:	4610      	mov	r0, r2
 800c032:	f7ff fd3b 	bl	800baac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3330      	adds	r3, #48	; 0x30
 800c03a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f7ff fd31 	bl	800baac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7858      	ldrb	r0, [r3, #1]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	2301      	movs	r3, #1
 800c064:	f7ff fc8e 	bl	800b984 <disk_write>
			fs->fsi_flag = 0;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	785b      	ldrb	r3, [r3, #1]
 800c072:	2200      	movs	r2, #0
 800c074:	2100      	movs	r1, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fca4 	bl	800b9c4 <disk_ioctl>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <sync_fs+0xca>
 800c082:	2301      	movs	r3, #1
 800c084:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c086:	7bfb      	ldrb	r3, [r7, #15]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	41615252 	.word	0x41615252
 800c094:	61417272 	.word	0x61417272

0800c098 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	3b02      	subs	r3, #2
 800c0a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	3b02      	subs	r3, #2
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d301      	bcc.n	800c0b8 <clust2sect+0x20>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e008      	b.n	800c0ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	895b      	ldrh	r3, [r3, #10]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	fb03 f202 	mul.w	r2, r3, r2
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	4413      	add	r3, r2
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b086      	sub	sp, #24
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d904      	bls.n	800c0f6 <get_fat+0x20>
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d302      	bcc.n	800c0fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	617b      	str	r3, [r7, #20]
 800c0fa:	e08c      	b.n	800c216 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c100:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d045      	beq.n	800c196 <get_fat+0xc0>
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d05d      	beq.n	800c1ca <get_fat+0xf4>
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d177      	bne.n	800c202 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	085b      	lsrs	r3, r3, #1
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4413      	add	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	6a1a      	ldr	r2, [r3, #32]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	0a5b      	lsrs	r3, r3, #9
 800c128:	4413      	add	r3, r2
 800c12a:	4619      	mov	r1, r3
 800c12c:	6938      	ldr	r0, [r7, #16]
 800c12e:	f7ff ff17 	bl	800bf60 <move_window>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d167      	bne.n	800c208 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	60fa      	str	r2, [r7, #12]
 800c13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	4413      	add	r3, r2
 800c146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c14a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6a1a      	ldr	r2, [r3, #32]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	0a5b      	lsrs	r3, r3, #9
 800c154:	4413      	add	r3, r2
 800c156:	4619      	mov	r1, r3
 800c158:	6938      	ldr	r0, [r7, #16]
 800c15a:	f7ff ff01 	bl	800bf60 <move_window>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d153      	bne.n	800c20c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	4413      	add	r3, r2
 800c16e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c172:	021b      	lsls	r3, r3, #8
 800c174:	461a      	mov	r2, r3
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4313      	orrs	r3, r2
 800c17a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d002      	beq.n	800c18c <get_fat+0xb6>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	091b      	lsrs	r3, r3, #4
 800c18a:	e002      	b.n	800c192 <get_fat+0xbc>
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c192:	617b      	str	r3, [r7, #20]
			break;
 800c194:	e03f      	b.n	800c216 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	6a1a      	ldr	r2, [r3, #32]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	0a1b      	lsrs	r3, r3, #8
 800c19e:	4413      	add	r3, r2
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6938      	ldr	r0, [r7, #16]
 800c1a4:	f7ff fedc 	bl	800bf60 <move_window>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d130      	bne.n	800c210 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	005b      	lsls	r3, r3, #1
 800c1b8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1bc:	4413      	add	r3, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fc1e 	bl	800ba00 <ld_word>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	617b      	str	r3, [r7, #20]
			break;
 800c1c8:	e025      	b.n	800c216 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6a1a      	ldr	r2, [r3, #32]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	09db      	lsrs	r3, r3, #7
 800c1d2:	4413      	add	r3, r2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6938      	ldr	r0, [r7, #16]
 800c1d8:	f7ff fec2 	bl	800bf60 <move_window>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d118      	bne.n	800c214 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1f0:	4413      	add	r3, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fc1c 	bl	800ba30 <ld_dword>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1fe:	617b      	str	r3, [r7, #20]
			break;
 800c200:	e009      	b.n	800c216 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c202:	2301      	movs	r3, #1
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	e006      	b.n	800c216 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c208:	bf00      	nop
 800c20a:	e004      	b.n	800c216 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c20c:	bf00      	nop
 800c20e:	e002      	b.n	800c216 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c210:	bf00      	nop
 800c212:	e000      	b.n	800c216 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c214:	bf00      	nop
		}
	}

	return val;
 800c216:	697b      	ldr	r3, [r7, #20]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c220:	b590      	push	{r4, r7, lr}
 800c222:	b089      	sub	sp, #36	; 0x24
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c22c:	2302      	movs	r3, #2
 800c22e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b01      	cmp	r3, #1
 800c234:	f240 80d6 	bls.w	800c3e4 <put_fat+0x1c4>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	429a      	cmp	r2, r3
 800c240:	f080 80d0 	bcs.w	800c3e4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d073      	beq.n	800c334 <put_fat+0x114>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	f000 8091 	beq.w	800c374 <put_fat+0x154>
 800c252:	2b01      	cmp	r3, #1
 800c254:	f040 80c6 	bne.w	800c3e4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	085b      	lsrs	r3, r3, #1
 800c260:	69ba      	ldr	r2, [r7, #24]
 800c262:	4413      	add	r3, r2
 800c264:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6a1a      	ldr	r2, [r3, #32]
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	0a5b      	lsrs	r3, r3, #9
 800c26e:	4413      	add	r3, r2
 800c270:	4619      	mov	r1, r3
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f7ff fe74 	bl	800bf60 <move_window>
 800c278:	4603      	mov	r3, r0
 800c27a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c27c:	7ffb      	ldrb	r3, [r7, #31]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	f040 80a9 	bne.w	800c3d6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	1c59      	adds	r1, r3, #1
 800c28e:	61b9      	str	r1, [r7, #24]
 800c290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c294:	4413      	add	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00d      	beq.n	800c2be <put_fat+0x9e>
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	b25b      	sxtb	r3, r3
 800c2a8:	f003 030f 	and.w	r3, r3, #15
 800c2ac:	b25a      	sxtb	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	b25b      	sxtb	r3, r3
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	e001      	b.n	800c2c2 <put_fat+0xa2>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a1a      	ldr	r2, [r3, #32]
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	0a5b      	lsrs	r3, r3, #9
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f7ff fe41 	bl	800bf60 <move_window>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2e2:	7ffb      	ldrb	r3, [r7, #31]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d178      	bne.n	800c3da <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f4:	4413      	add	r3, r2
 800c2f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <put_fat+0xea>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	091b      	lsrs	r3, r3, #4
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e00e      	b.n	800c328 <put_fat+0x108>
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	b25b      	sxtb	r3, r3
 800c310:	f023 030f 	bic.w	r3, r3, #15
 800c314:	b25a      	sxtb	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	f003 030f 	and.w	r3, r3, #15
 800c320:	b25b      	sxtb	r3, r3
 800c322:	4313      	orrs	r3, r2
 800c324:	b25b      	sxtb	r3, r3
 800c326:	b2db      	uxtb	r3, r3
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2201      	movs	r2, #1
 800c330:	70da      	strb	r2, [r3, #3]
			break;
 800c332:	e057      	b.n	800c3e4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6a1a      	ldr	r2, [r3, #32]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	0a1b      	lsrs	r3, r3, #8
 800c33c:	4413      	add	r3, r2
 800c33e:	4619      	mov	r1, r3
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f7ff fe0d 	bl	800bf60 <move_window>
 800c346:	4603      	mov	r3, r0
 800c348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c34a:	7ffb      	ldrb	r3, [r7, #31]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d146      	bne.n	800c3de <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c35e:	4413      	add	r3, r2
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	b292      	uxth	r2, r2
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fb85 	bl	800ba76 <st_word>
			fs->wflag = 1;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2201      	movs	r2, #1
 800c370:	70da      	strb	r2, [r3, #3]
			break;
 800c372:	e037      	b.n	800c3e4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6a1a      	ldr	r2, [r3, #32]
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	09db      	lsrs	r3, r3, #7
 800c37c:	4413      	add	r3, r2
 800c37e:	4619      	mov	r1, r3
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7ff fded 	bl	800bf60 <move_window>
 800c386:	4603      	mov	r3, r0
 800c388:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c38a:	7ffb      	ldrb	r3, [r7, #31]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d128      	bne.n	800c3e2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3a4:	4413      	add	r3, r2
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff fb42 	bl	800ba30 <ld_dword>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3b2:	4323      	orrs	r3, r4
 800c3b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3c4:	4413      	add	r3, r2
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff fb6f 	bl	800baac <st_dword>
			fs->wflag = 1;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	70da      	strb	r2, [r3, #3]
			break;
 800c3d4:	e006      	b.n	800c3e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3d6:	bf00      	nop
 800c3d8:	e004      	b.n	800c3e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3da:	bf00      	nop
 800c3dc:	e002      	b.n	800c3e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3de:	bf00      	nop
 800c3e0:	e000      	b.n	800c3e4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3e2:	bf00      	nop
		}
	}
	return res;
 800c3e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3724      	adds	r7, #36	; 0x24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd90      	pop	{r4, r7, pc}

0800c3ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b088      	sub	sp, #32
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d904      	bls.n	800c414 <remove_chain+0x26>
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	695b      	ldr	r3, [r3, #20]
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	429a      	cmp	r2, r3
 800c412:	d301      	bcc.n	800c418 <remove_chain+0x2a>
 800c414:	2302      	movs	r3, #2
 800c416:	e04b      	b.n	800c4b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00c      	beq.n	800c438 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	69b8      	ldr	r0, [r7, #24]
 800c426:	f7ff fefb 	bl	800c220 <put_fat>
 800c42a:	4603      	mov	r3, r0
 800c42c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c42e:	7ffb      	ldrb	r3, [r7, #31]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <remove_chain+0x4a>
 800c434:	7ffb      	ldrb	r3, [r7, #31]
 800c436:	e03b      	b.n	800c4b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c438:	68b9      	ldr	r1, [r7, #8]
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff fe4b 	bl	800c0d6 <get_fat>
 800c440:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d031      	beq.n	800c4ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d101      	bne.n	800c452 <remove_chain+0x64>
 800c44e:	2302      	movs	r3, #2
 800c450:	e02e      	b.n	800c4b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d101      	bne.n	800c45e <remove_chain+0x70>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e028      	b.n	800c4b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c45e:	2200      	movs	r2, #0
 800c460:	68b9      	ldr	r1, [r7, #8]
 800c462:	69b8      	ldr	r0, [r7, #24]
 800c464:	f7ff fedc 	bl	800c220 <put_fat>
 800c468:	4603      	mov	r3, r0
 800c46a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c46c:	7ffb      	ldrb	r3, [r7, #31]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <remove_chain+0x88>
 800c472:	7ffb      	ldrb	r3, [r7, #31]
 800c474:	e01c      	b.n	800c4b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	691a      	ldr	r2, [r3, #16]
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	3b02      	subs	r3, #2
 800c480:	429a      	cmp	r2, r3
 800c482:	d20b      	bcs.n	800c49c <remove_chain+0xae>
			fs->free_clst++;
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	791b      	ldrb	r3, [r3, #4]
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	b2da      	uxtb	r2, r3
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d3c6      	bcc.n	800c438 <remove_chain+0x4a>
 800c4aa:	e000      	b.n	800c4ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3720      	adds	r7, #32
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b088      	sub	sp, #32
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10d      	bne.n	800c4ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d004      	beq.n	800c4e4 <create_chain+0x2c>
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d31b      	bcc.n	800c51c <create_chain+0x64>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	61bb      	str	r3, [r7, #24]
 800c4e8:	e018      	b.n	800c51c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7ff fdf2 	bl	800c0d6 <get_fat>
 800c4f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d801      	bhi.n	800c4fe <create_chain+0x46>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e070      	b.n	800c5e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c504:	d101      	bne.n	800c50a <create_chain+0x52>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	e06a      	b.n	800c5e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	429a      	cmp	r2, r3
 800c512:	d201      	bcs.n	800c518 <create_chain+0x60>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	e063      	b.n	800c5e0 <create_chain+0x128>
		scl = clst;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	3301      	adds	r3, #1
 800c524:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d307      	bcc.n	800c540 <create_chain+0x88>
				ncl = 2;
 800c530:	2302      	movs	r3, #2
 800c532:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c534:	69fa      	ldr	r2, [r7, #28]
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d901      	bls.n	800c540 <create_chain+0x88>
 800c53c:	2300      	movs	r3, #0
 800c53e:	e04f      	b.n	800c5e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c540:	69f9      	ldr	r1, [r7, #28]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fdc7 	bl	800c0d6 <get_fat>
 800c548:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00e      	beq.n	800c56e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d003      	beq.n	800c55e <create_chain+0xa6>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55c:	d101      	bne.n	800c562 <create_chain+0xaa>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	e03e      	b.n	800c5e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c562:	69fa      	ldr	r2, [r7, #28]
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	429a      	cmp	r2, r3
 800c568:	d1da      	bne.n	800c520 <create_chain+0x68>
 800c56a:	2300      	movs	r3, #0
 800c56c:	e038      	b.n	800c5e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c56e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c570:	f04f 32ff 	mov.w	r2, #4294967295
 800c574:	69f9      	ldr	r1, [r7, #28]
 800c576:	6938      	ldr	r0, [r7, #16]
 800c578:	f7ff fe52 	bl	800c220 <put_fat>
 800c57c:	4603      	mov	r3, r0
 800c57e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d109      	bne.n	800c59a <create_chain+0xe2>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d006      	beq.n	800c59a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6938      	ldr	r0, [r7, #16]
 800c592:	f7ff fe45 	bl	800c220 <put_fat>
 800c596:	4603      	mov	r3, r0
 800c598:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d116      	bne.n	800c5ce <create_chain+0x116>
		fs->last_clst = ncl;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	691a      	ldr	r2, [r3, #16]
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	3b02      	subs	r3, #2
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d804      	bhi.n	800c5be <create_chain+0x106>
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	1e5a      	subs	r2, r3, #1
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	791b      	ldrb	r3, [r3, #4]
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	711a      	strb	r2, [r3, #4]
 800c5cc:	e007      	b.n	800c5de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d102      	bne.n	800c5da <create_chain+0x122>
 800c5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d8:	e000      	b.n	800c5dc <create_chain+0x124>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5de:	69fb      	ldr	r3, [r7, #28]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b087      	sub	sp, #28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	0a5b      	lsrs	r3, r3, #9
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	8952      	ldrh	r2, [r2, #10]
 800c608:	fbb3 f3f2 	udiv	r3, r3, r2
 800c60c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	1d1a      	adds	r2, r3, #4
 800c612:	613a      	str	r2, [r7, #16]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <clmt_clust+0x3a>
 800c61e:	2300      	movs	r3, #0
 800c620:	e010      	b.n	800c644 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	429a      	cmp	r2, r3
 800c628:	d307      	bcc.n	800c63a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	3304      	adds	r3, #4
 800c636:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c638:	e7e9      	b.n	800c60e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c63a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	4413      	add	r3, r2
}
 800c644:	4618      	mov	r0, r3
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c666:	d204      	bcs.n	800c672 <dir_sdi+0x22>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	f003 031f 	and.w	r3, r3, #31
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c672:	2302      	movs	r3, #2
 800c674:	e063      	b.n	800c73e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d106      	bne.n	800c696 <dir_sdi+0x46>
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b02      	cmp	r3, #2
 800c68e:	d902      	bls.n	800c696 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10c      	bne.n	800c6b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	095b      	lsrs	r3, r3, #5
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	8912      	ldrh	r2, [r2, #8]
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d301      	bcc.n	800c6ac <dir_sdi+0x5c>
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	e048      	b.n	800c73e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	61da      	str	r2, [r3, #28]
 800c6b4:	e029      	b.n	800c70a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	895b      	ldrh	r3, [r3, #10]
 800c6ba:	025b      	lsls	r3, r3, #9
 800c6bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6be:	e019      	b.n	800c6f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6979      	ldr	r1, [r7, #20]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7ff fd06 	bl	800c0d6 <get_fat>
 800c6ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d2:	d101      	bne.n	800c6d8 <dir_sdi+0x88>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e032      	b.n	800c73e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d904      	bls.n	800c6e8 <dir_sdi+0x98>
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d301      	bcc.n	800c6ec <dir_sdi+0x9c>
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	e028      	b.n	800c73e <dir_sdi+0xee>
			ofs -= csz;
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d2e1      	bcs.n	800c6c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c6fc:	6979      	ldr	r1, [r7, #20]
 800c6fe:	6938      	ldr	r0, [r7, #16]
 800c700:	f7ff fcca 	bl	800c098 <clust2sect>
 800c704:	4602      	mov	r2, r0
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d101      	bne.n	800c71c <dir_sdi+0xcc>
 800c718:	2302      	movs	r3, #2
 800c71a:	e010      	b.n	800c73e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	69da      	ldr	r2, [r3, #28]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	0a5b      	lsrs	r3, r3, #9
 800c724:	441a      	add	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c736:	441a      	add	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b086      	sub	sp, #24
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	3320      	adds	r3, #32
 800c75c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <dir_next+0x28>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c76c:	d301      	bcc.n	800c772 <dir_next+0x2c>
 800c76e:	2304      	movs	r3, #4
 800c770:	e0aa      	b.n	800c8c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 8098 	bne.w	800c8ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10b      	bne.n	800c7a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	095b      	lsrs	r3, r3, #5
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	8912      	ldrh	r2, [r2, #8]
 800c798:	4293      	cmp	r3, r2
 800c79a:	f0c0 8088 	bcc.w	800c8ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	61da      	str	r2, [r3, #28]
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	e08f      	b.n	800c8c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	0a5b      	lsrs	r3, r3, #9
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	8952      	ldrh	r2, [r2, #10]
 800c7b0:	3a01      	subs	r2, #1
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d17a      	bne.n	800c8ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	f7ff fc88 	bl	800c0d6 <get_fat>
 800c7c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d801      	bhi.n	800c7d2 <dir_next+0x8c>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	e07a      	b.n	800c8c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d8:	d101      	bne.n	800c7de <dir_next+0x98>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e074      	b.n	800c8c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d358      	bcc.n	800c89a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d104      	bne.n	800c7f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	61da      	str	r2, [r3, #28]
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	e067      	b.n	800c8c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	4619      	mov	r1, r3
 800c800:	4610      	mov	r0, r2
 800c802:	f7ff fe59 	bl	800c4b8 <create_chain>
 800c806:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <dir_next+0xcc>
 800c80e:	2307      	movs	r3, #7
 800c810:	e05a      	b.n	800c8c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d101      	bne.n	800c81c <dir_next+0xd6>
 800c818:	2302      	movs	r3, #2
 800c81a:	e055      	b.n	800c8c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c822:	d101      	bne.n	800c828 <dir_next+0xe2>
 800c824:	2301      	movs	r3, #1
 800c826:	e04f      	b.n	800c8c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff fb55 	bl	800bed8 <sync_window>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <dir_next+0xf2>
 800c834:	2301      	movs	r3, #1
 800c836:	e047      	b.n	800c8c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3330      	adds	r3, #48	; 0x30
 800c83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff f97f 	bl	800bb46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	6979      	ldr	r1, [r7, #20]
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff fc22 	bl	800c098 <clust2sect>
 800c854:	4602      	mov	r2, r0
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	62da      	str	r2, [r3, #44]	; 0x2c
 800c85a:	e012      	b.n	800c882 <dir_next+0x13c>
						fs->wflag = 1;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2201      	movs	r2, #1
 800c860:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7ff fb38 	bl	800bed8 <sync_window>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <dir_next+0x12c>
 800c86e:	2301      	movs	r3, #1
 800c870:	e02a      	b.n	800c8c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	3301      	adds	r3, #1
 800c876:	613b      	str	r3, [r7, #16]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	62da      	str	r2, [r3, #44]	; 0x2c
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	895b      	ldrh	r3, [r3, #10]
 800c886:	461a      	mov	r2, r3
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d3e6      	bcc.n	800c85c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	1ad2      	subs	r2, r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8a0:	6979      	ldr	r1, [r7, #20]
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff fbf8 	bl	800c098 <clust2sect>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c0:	441a      	add	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff feb4 	bl	800c650 <dir_sdi>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d12b      	bne.n	800c94a <dir_alloc+0x7a>
		n = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff fb2f 	bl	800bf60 <move_window>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d11d      	bne.n	800c948 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2be5      	cmp	r3, #229	; 0xe5
 800c914:	d004      	beq.n	800c920 <dir_alloc+0x50>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a1b      	ldr	r3, [r3, #32]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	3301      	adds	r3, #1
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d102      	bne.n	800c934 <dir_alloc+0x64>
 800c92e:	e00c      	b.n	800c94a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c930:	2300      	movs	r3, #0
 800c932:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c934:	2101      	movs	r1, #1
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff ff05 	bl	800c746 <dir_next>
 800c93c:	4603      	mov	r3, r0
 800c93e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0d7      	beq.n	800c8f6 <dir_alloc+0x26>
 800c946:	e000      	b.n	800c94a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c948:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d101      	bne.n	800c954 <dir_alloc+0x84>
 800c950:	2307      	movs	r3, #7
 800c952:	75fb      	strb	r3, [r7, #23]
	return res;
 800c954:	7dfb      	ldrb	r3, [r7, #23]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	331a      	adds	r3, #26
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff f847 	bl	800ba00 <ld_word>
 800c972:	4603      	mov	r3, r0
 800c974:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d109      	bne.n	800c992 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	3314      	adds	r3, #20
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff f83c 	bl	800ba00 <ld_word>
 800c988:	4603      	mov	r3, r0
 800c98a:	041b      	lsls	r3, r3, #16
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c992:	68fb      	ldr	r3, [r7, #12]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	331a      	adds	r3, #26
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	b292      	uxth	r2, r2
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff f85f 	bl	800ba76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d109      	bne.n	800c9d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	f103 0214 	add.w	r2, r3, #20
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	0c1b      	lsrs	r3, r3, #16
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	f7ff f851 	bl	800ba76 <st_word>
	}
}
 800c9d4:	bf00      	nop
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff fe2f 	bl	800c650 <dir_sdi>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <dir_find+0x24>
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	e03e      	b.n	800ca7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	4619      	mov	r1, r3
 800ca06:	6938      	ldr	r0, [r7, #16]
 800ca08:	f7ff faaa 	bl	800bf60 <move_window>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d12f      	bne.n	800ca76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d102      	bne.n	800ca2a <dir_find+0x4e>
 800ca24:	2304      	movs	r3, #4
 800ca26:	75fb      	strb	r3, [r7, #23]
 800ca28:	e028      	b.n	800ca7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	330b      	adds	r3, #11
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	330b      	adds	r3, #11
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	f003 0308 	and.w	r3, r3, #8
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <dir_find+0x86>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a18      	ldr	r0, [r3, #32]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3324      	adds	r3, #36	; 0x24
 800ca54:	220b      	movs	r2, #11
 800ca56:	4619      	mov	r1, r3
 800ca58:	f7ff f88f 	bl	800bb7a <mem_cmp>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00b      	beq.n	800ca7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca62:	2100      	movs	r1, #0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff fe6e 	bl	800c746 <dir_next>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d0c5      	beq.n	800ca00 <dir_find+0x24>
 800ca74:	e002      	b.n	800ca7c <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca76:	bf00      	nop
 800ca78:	e000      	b.n	800ca7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca7a:	bf00      	nop

	return res;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ca94:	2101      	movs	r1, #1
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff ff1a 	bl	800c8d0 <dir_alloc>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d11c      	bne.n	800cae0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	4619      	mov	r1, r3
 800caac:	68b8      	ldr	r0, [r7, #8]
 800caae:	f7ff fa57 	bl	800bf60 <move_window>
 800cab2:	4603      	mov	r3, r0
 800cab4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d111      	bne.n	800cae0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	2220      	movs	r2, #32
 800cac2:	2100      	movs	r1, #0
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff f83e 	bl	800bb46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a18      	ldr	r0, [r3, #32]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	3324      	adds	r3, #36	; 0x24
 800cad2:	220b      	movs	r2, #11
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7ff f815 	bl	800bb04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2201      	movs	r2, #1
 800cade:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
	...

0800caec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	3324      	adds	r3, #36	; 0x24
 800cb00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb02:	220b      	movs	r2, #11
 800cb04:	2120      	movs	r1, #32
 800cb06:	68b8      	ldr	r0, [r7, #8]
 800cb08:	f7ff f81d 	bl	800bb46 <mem_set>
	si = i = 0; ni = 8;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	613b      	str	r3, [r7, #16]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	617b      	str	r3, [r7, #20]
 800cb14:	2308      	movs	r3, #8
 800cb16:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	617a      	str	r2, [r7, #20]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	4413      	add	r3, r2
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb26:	7ffb      	ldrb	r3, [r7, #31]
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	d94e      	bls.n	800cbca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb2c:	7ffb      	ldrb	r3, [r7, #31]
 800cb2e:	2b2f      	cmp	r3, #47	; 0x2f
 800cb30:	d006      	beq.n	800cb40 <create_name+0x54>
 800cb32:	7ffb      	ldrb	r3, [r7, #31]
 800cb34:	2b5c      	cmp	r3, #92	; 0x5c
 800cb36:	d110      	bne.n	800cb5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb38:	e002      	b.n	800cb40 <create_name+0x54>
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	4413      	add	r3, r2
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b2f      	cmp	r3, #47	; 0x2f
 800cb4a:	d0f6      	beq.n	800cb3a <create_name+0x4e>
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	4413      	add	r3, r2
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b5c      	cmp	r3, #92	; 0x5c
 800cb56:	d0f0      	beq.n	800cb3a <create_name+0x4e>
			break;
 800cb58:	e038      	b.n	800cbcc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb5a:	7ffb      	ldrb	r3, [r7, #31]
 800cb5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb5e:	d003      	beq.n	800cb68 <create_name+0x7c>
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d30c      	bcc.n	800cb82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	2b0b      	cmp	r3, #11
 800cb6c:	d002      	beq.n	800cb74 <create_name+0x88>
 800cb6e:	7ffb      	ldrb	r3, [r7, #31]
 800cb70:	2b2e      	cmp	r3, #46	; 0x2e
 800cb72:	d001      	beq.n	800cb78 <create_name+0x8c>
 800cb74:	2306      	movs	r3, #6
 800cb76:	e044      	b.n	800cc02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb78:	2308      	movs	r3, #8
 800cb7a:	613b      	str	r3, [r7, #16]
 800cb7c:	230b      	movs	r3, #11
 800cb7e:	61bb      	str	r3, [r7, #24]
			continue;
 800cb80:	e022      	b.n	800cbc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	da04      	bge.n	800cb94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
 800cb8c:	3b80      	subs	r3, #128	; 0x80
 800cb8e:	4a1f      	ldr	r2, [pc, #124]	; (800cc0c <create_name+0x120>)
 800cb90:	5cd3      	ldrb	r3, [r2, r3]
 800cb92:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cb94:	7ffb      	ldrb	r3, [r7, #31]
 800cb96:	4619      	mov	r1, r3
 800cb98:	481d      	ldr	r0, [pc, #116]	; (800cc10 <create_name+0x124>)
 800cb9a:	f7ff f815 	bl	800bbc8 <chk_chr>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <create_name+0xbc>
 800cba4:	2306      	movs	r3, #6
 800cba6:	e02c      	b.n	800cc02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cba8:	7ffb      	ldrb	r3, [r7, #31]
 800cbaa:	2b60      	cmp	r3, #96	; 0x60
 800cbac:	d905      	bls.n	800cbba <create_name+0xce>
 800cbae:	7ffb      	ldrb	r3, [r7, #31]
 800cbb0:	2b7a      	cmp	r3, #122	; 0x7a
 800cbb2:	d802      	bhi.n	800cbba <create_name+0xce>
 800cbb4:	7ffb      	ldrb	r3, [r7, #31]
 800cbb6:	3b20      	subs	r3, #32
 800cbb8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	613a      	str	r2, [r7, #16]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	7ffa      	ldrb	r2, [r7, #31]
 800cbc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cbc8:	e7a6      	b.n	800cb18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	441a      	add	r2, r3
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <create_name+0xf4>
 800cbdc:	2306      	movs	r3, #6
 800cbde:	e010      	b.n	800cc02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2be5      	cmp	r3, #229	; 0xe5
 800cbe6:	d102      	bne.n	800cbee <create_name+0x102>
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	2205      	movs	r2, #5
 800cbec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cbee:	7ffb      	ldrb	r3, [r7, #31]
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d801      	bhi.n	800cbf8 <create_name+0x10c>
 800cbf4:	2204      	movs	r2, #4
 800cbf6:	e000      	b.n	800cbfa <create_name+0x10e>
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	330b      	adds	r3, #11
 800cbfe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3720      	adds	r7, #32
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0800f63c 	.word	0x0800f63c
 800cc10:	0800f564 	.word	0x0800f564

0800cc14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc28:	e002      	b.n	800cc30 <follow_path+0x1c>
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b2f      	cmp	r3, #47	; 0x2f
 800cc36:	d0f8      	beq.n	800cc2a <follow_path+0x16>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b5c      	cmp	r3, #92	; 0x5c
 800cc3e:	d0f4      	beq.n	800cc2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	2200      	movs	r2, #0
 800cc44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b1f      	cmp	r3, #31
 800cc4c:	d80a      	bhi.n	800cc64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2280      	movs	r2, #128	; 0x80
 800cc52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc56:	2100      	movs	r1, #0
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff fcf9 	bl	800c650 <dir_sdi>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	75fb      	strb	r3, [r7, #23]
 800cc62:	e043      	b.n	800ccec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc64:	463b      	mov	r3, r7
 800cc66:	4619      	mov	r1, r3
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7ff ff3f 	bl	800caec <create_name>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d134      	bne.n	800cce2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff feaf 	bl	800c9dc <dir_find>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	d127      	bne.n	800cce6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc96:	7afb      	ldrb	r3, [r7, #11]
 800cc98:	f003 0304 	and.w	r3, r3, #4
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d122      	bne.n	800cce6 <follow_path+0xd2>
 800cca0:	2305      	movs	r3, #5
 800cca2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cca4:	e01f      	b.n	800cce6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cca6:	7afb      	ldrb	r3, [r7, #11]
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d11c      	bne.n	800ccea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	799b      	ldrb	r3, [r3, #6]
 800ccb4:	f003 0310 	and.w	r3, r3, #16
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccbc:	2305      	movs	r3, #5
 800ccbe:	75fb      	strb	r3, [r7, #23]
 800ccc0:	e014      	b.n	800ccec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff fe42 	bl	800c95e <ld_clust>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cce0:	e7c0      	b.n	800cc64 <follow_path+0x50>
			if (res != FR_OK) break;
 800cce2:	bf00      	nop
 800cce4:	e002      	b.n	800ccec <follow_path+0xd8>
				break;
 800cce6:	bf00      	nop
 800cce8:	e000      	b.n	800ccec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccea:	bf00      	nop
			}
		}
	}

	return res;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b087      	sub	sp, #28
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
 800cd02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d031      	beq.n	800cd70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e002      	b.n	800cd1a <get_ldnumber+0x24>
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	3301      	adds	r3, #1
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b20      	cmp	r3, #32
 800cd20:	d903      	bls.n	800cd2a <get_ldnumber+0x34>
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b3a      	cmp	r3, #58	; 0x3a
 800cd28:	d1f4      	bne.n	800cd14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b3a      	cmp	r3, #58	; 0x3a
 800cd30:	d11c      	bne.n	800cd6c <get_ldnumber+0x76>
			tp = *path;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	60fa      	str	r2, [r7, #12]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	3b30      	subs	r3, #48	; 0x30
 800cd42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d80e      	bhi.n	800cd68 <get_ldnumber+0x72>
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d10a      	bne.n	800cd68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d107      	bne.n	800cd68 <get_ldnumber+0x72>
					vol = (int)i;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	e002      	b.n	800cd72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd70:	693b      	ldr	r3, [r7, #16]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	371c      	adds	r7, #28
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
	...

0800cd80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	70da      	strb	r2, [r3, #3]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f04f 32ff 	mov.w	r2, #4294967295
 800cd96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cd98:	6839      	ldr	r1, [r7, #0]
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff f8e0 	bl	800bf60 <move_window>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d001      	beq.n	800cdaa <check_fs+0x2a>
 800cda6:	2304      	movs	r3, #4
 800cda8:	e038      	b.n	800ce1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	3330      	adds	r3, #48	; 0x30
 800cdae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fe fe24 	bl	800ba00 <ld_word>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d001      	beq.n	800cdc8 <check_fs+0x48>
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e029      	b.n	800ce1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdce:	2be9      	cmp	r3, #233	; 0xe9
 800cdd0:	d009      	beq.n	800cde6 <check_fs+0x66>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdd8:	2beb      	cmp	r3, #235	; 0xeb
 800cdda:	d11e      	bne.n	800ce1a <check_fs+0x9a>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cde2:	2b90      	cmp	r3, #144	; 0x90
 800cde4:	d119      	bne.n	800ce1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3330      	adds	r3, #48	; 0x30
 800cdea:	3336      	adds	r3, #54	; 0x36
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fe1f 	bl	800ba30 <ld_dword>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cdf8:	4a0a      	ldr	r2, [pc, #40]	; (800ce24 <check_fs+0xa4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d101      	bne.n	800ce02 <check_fs+0x82>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e00c      	b.n	800ce1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3330      	adds	r3, #48	; 0x30
 800ce06:	3352      	adds	r3, #82	; 0x52
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe fe11 	bl	800ba30 <ld_dword>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	4b05      	ldr	r3, [pc, #20]	; (800ce28 <check_fs+0xa8>)
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d101      	bne.n	800ce1a <check_fs+0x9a>
 800ce16:	2300      	movs	r3, #0
 800ce18:	e000      	b.n	800ce1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce1a:	2302      	movs	r3, #2
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	00544146 	.word	0x00544146
 800ce28:	33544146 	.word	0x33544146

0800ce2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b096      	sub	sp, #88	; 0x58
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	4613      	mov	r3, r2
 800ce38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff ff58 	bl	800ccf6 <get_ldnumber>
 800ce46:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	da01      	bge.n	800ce52 <find_volume+0x26>
 800ce4e:	230b      	movs	r3, #11
 800ce50:	e22e      	b.n	800d2b0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce52:	4aa8      	ldr	r2, [pc, #672]	; (800d0f4 <find_volume+0x2c8>)
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce5a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <find_volume+0x3a>
 800ce62:	230c      	movs	r3, #12
 800ce64:	e224      	b.n	800d2b0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	f023 0301 	bic.w	r3, r3, #1
 800ce72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d01a      	beq.n	800ceb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	785b      	ldrb	r3, [r3, #1]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe fd1f 	bl	800b8c4 <disk_status>
 800ce86:	4603      	mov	r3, r0
 800ce88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10c      	bne.n	800ceb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d007      	beq.n	800ceae <find_volume+0x82>
 800ce9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cea2:	f003 0304 	and.w	r3, r3, #4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ceaa:	230a      	movs	r3, #10
 800ceac:	e200      	b.n	800d2b0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e1fe      	b.n	800d2b0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ceb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	785b      	ldrb	r3, [r3, #1]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe fd17 	bl	800b8f8 <disk_initialize>
 800ceca:	4603      	mov	r3, r0
 800cecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ced0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cedc:	2303      	movs	r3, #3
 800cede:	e1e7      	b.n	800d2b0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d007      	beq.n	800cef6 <find_volume+0xca>
 800cee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceea:	f003 0304 	and.w	r3, r3, #4
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cef2:	230a      	movs	r3, #10
 800cef4:	e1dc      	b.n	800d2b0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cefe:	f7ff ff3f 	bl	800cd80 <check_fs>
 800cf02:	4603      	mov	r3, r0
 800cf04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d14b      	bne.n	800cfa8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf10:	2300      	movs	r3, #0
 800cf12:	643b      	str	r3, [r7, #64]	; 0x40
 800cf14:	e01f      	b.n	800cf56 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf24:	4413      	add	r3, r2
 800cf26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d006      	beq.n	800cf40 <find_volume+0x114>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	3308      	adds	r3, #8
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fd7a 	bl	800ba30 <ld_dword>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	e000      	b.n	800cf42 <find_volume+0x116>
 800cf40:	2200      	movs	r2, #0
 800cf42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cf4a:	440b      	add	r3, r1
 800cf4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf52:	3301      	adds	r3, #1
 800cf54:	643b      	str	r3, [r7, #64]	; 0x40
 800cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d9dc      	bls.n	800cf16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <find_volume+0x140>
 800cf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cf74:	4413      	add	r3, r2
 800cf76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d005      	beq.n	800cf8e <find_volume+0x162>
 800cf82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf86:	f7ff fefb 	bl	800cd80 <check_fs>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	e000      	b.n	800cf90 <find_volume+0x164>
 800cf8e:	2303      	movs	r3, #3
 800cf90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d905      	bls.n	800cfa8 <find_volume+0x17c>
 800cf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	d9e1      	bls.n	800cf6c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d101      	bne.n	800cfb4 <find_volume+0x188>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e17d      	b.n	800d2b0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cfb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d901      	bls.n	800cfc0 <find_volume+0x194>
 800cfbc:	230d      	movs	r3, #13
 800cfbe:	e177      	b.n	800d2b0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	3330      	adds	r3, #48	; 0x30
 800cfc4:	330b      	adds	r3, #11
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fd1a 	bl	800ba00 <ld_word>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfd2:	d001      	beq.n	800cfd8 <find_volume+0x1ac>
 800cfd4:	230d      	movs	r3, #13
 800cfd6:	e16b      	b.n	800d2b0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	3330      	adds	r3, #48	; 0x30
 800cfdc:	3316      	adds	r3, #22
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe fd0e 	bl	800ba00 <ld_word>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cfe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d106      	bne.n	800cffc <find_volume+0x1d0>
 800cfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff0:	3330      	adds	r3, #48	; 0x30
 800cff2:	3324      	adds	r3, #36	; 0x24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fd1b 	bl	800ba30 <ld_dword>
 800cffa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d000:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d004:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	789b      	ldrb	r3, [r3, #2]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d005      	beq.n	800d020 <find_volume+0x1f4>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	789b      	ldrb	r3, [r3, #2]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d001      	beq.n	800d020 <find_volume+0x1f4>
 800d01c:	230d      	movs	r3, #13
 800d01e:	e147      	b.n	800d2b0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	789b      	ldrb	r3, [r3, #2]
 800d024:	461a      	mov	r2, r3
 800d026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d028:	fb02 f303 	mul.w	r3, r2, r3
 800d02c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d034:	b29a      	uxth	r2, r3
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	895b      	ldrh	r3, [r3, #10]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d008      	beq.n	800d054 <find_volume+0x228>
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	895b      	ldrh	r3, [r3, #10]
 800d046:	461a      	mov	r2, r3
 800d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	4013      	ands	r3, r2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d001      	beq.n	800d058 <find_volume+0x22c>
 800d054:	230d      	movs	r3, #13
 800d056:	e12b      	b.n	800d2b0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05a:	3330      	adds	r3, #48	; 0x30
 800d05c:	3311      	adds	r3, #17
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fcce 	bl	800ba00 <ld_word>
 800d064:	4603      	mov	r3, r0
 800d066:	461a      	mov	r2, r3
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	891b      	ldrh	r3, [r3, #8]
 800d070:	f003 030f 	and.w	r3, r3, #15
 800d074:	b29b      	uxth	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <find_volume+0x252>
 800d07a:	230d      	movs	r3, #13
 800d07c:	e118      	b.n	800d2b0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d080:	3330      	adds	r3, #48	; 0x30
 800d082:	3313      	adds	r3, #19
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe fcbb 	bl	800ba00 <ld_word>
 800d08a:	4603      	mov	r3, r0
 800d08c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d08e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <find_volume+0x276>
 800d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d096:	3330      	adds	r3, #48	; 0x30
 800d098:	3320      	adds	r3, #32
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe fcc8 	bl	800ba30 <ld_dword>
 800d0a0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a4:	3330      	adds	r3, #48	; 0x30
 800d0a6:	330e      	adds	r3, #14
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fca9 	bl	800ba00 <ld_word>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <find_volume+0x290>
 800d0b8:	230d      	movs	r3, #13
 800d0ba:	e0f9      	b.n	800d2b0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d0bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c0:	4413      	add	r3, r2
 800d0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0c4:	8912      	ldrh	r2, [r2, #8]
 800d0c6:	0912      	lsrs	r2, r2, #4
 800d0c8:	b292      	uxth	r2, r2
 800d0ca:	4413      	add	r3, r2
 800d0cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d201      	bcs.n	800d0da <find_volume+0x2ae>
 800d0d6:	230d      	movs	r3, #13
 800d0d8:	e0ea      	b.n	800d2b0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0e2:	8952      	ldrh	r2, [r2, #10]
 800d0e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d103      	bne.n	800d0f8 <find_volume+0x2cc>
 800d0f0:	230d      	movs	r3, #13
 800d0f2:	e0dd      	b.n	800d2b0 <find_volume+0x484>
 800d0f4:	20001364 	.word	0x20001364
		fmt = FS_FAT32;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d104:	4293      	cmp	r3, r2
 800d106:	d802      	bhi.n	800d10e <find_volume+0x2e2>
 800d108:	2302      	movs	r3, #2
 800d10a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d114:	4293      	cmp	r3, r2
 800d116:	d802      	bhi.n	800d11e <find_volume+0x2f2>
 800d118:	2301      	movs	r3, #1
 800d11a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	1c9a      	adds	r2, r3, #2
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d12a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d12c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d130:	441a      	add	r2, r3
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d136:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	441a      	add	r2, r3
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d144:	2b03      	cmp	r3, #3
 800d146:	d11e      	bne.n	800d186 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14a:	3330      	adds	r3, #48	; 0x30
 800d14c:	332a      	adds	r3, #42	; 0x2a
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fc56 	bl	800ba00 <ld_word>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <find_volume+0x332>
 800d15a:	230d      	movs	r3, #13
 800d15c:	e0a8      	b.n	800d2b0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <find_volume+0x33e>
 800d166:	230d      	movs	r3, #13
 800d168:	e0a2      	b.n	800d2b0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	3330      	adds	r3, #48	; 0x30
 800d16e:	332c      	adds	r3, #44	; 0x2c
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fc5d 	bl	800ba30 <ld_dword>
 800d176:	4602      	mov	r2, r0
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	647b      	str	r3, [r7, #68]	; 0x44
 800d184:	e01f      	b.n	800d1c6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	891b      	ldrh	r3, [r3, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <find_volume+0x366>
 800d18e:	230d      	movs	r3, #13
 800d190:	e08e      	b.n	800d2b0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	6a1a      	ldr	r2, [r3, #32]
 800d196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d198:	441a      	add	r2, r3
 800d19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d19e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d103      	bne.n	800d1ae <find_volume+0x382>
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	e00a      	b.n	800d1c4 <find_volume+0x398>
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	695a      	ldr	r2, [r3, #20]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	085a      	lsrs	r2, r3, #1
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d1c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	699a      	ldr	r2, [r3, #24]
 800d1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d1d0:	0a5b      	lsrs	r3, r3, #9
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d201      	bcs.n	800d1da <find_volume+0x3ae>
 800d1d6:	230d      	movs	r3, #13
 800d1d8:	e06a      	b.n	800d2b0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e0:	611a      	str	r2, [r3, #16]
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	691a      	ldr	r2, [r3, #16]
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	2280      	movs	r2, #128	; 0x80
 800d1ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d1f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d149      	bne.n	800d28c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	3330      	adds	r3, #48	; 0x30
 800d1fc:	3330      	adds	r3, #48	; 0x30
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fbfe 	bl	800ba00 <ld_word>
 800d204:	4603      	mov	r3, r0
 800d206:	2b01      	cmp	r3, #1
 800d208:	d140      	bne.n	800d28c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d20c:	3301      	adds	r3, #1
 800d20e:	4619      	mov	r1, r3
 800d210:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d212:	f7fe fea5 	bl	800bf60 <move_window>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d137      	bne.n	800d28c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	2200      	movs	r2, #0
 800d220:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d224:	3330      	adds	r3, #48	; 0x30
 800d226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fbe8 	bl	800ba00 <ld_word>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d238:	429a      	cmp	r2, r3
 800d23a:	d127      	bne.n	800d28c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	3330      	adds	r3, #48	; 0x30
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe fbf5 	bl	800ba30 <ld_dword>
 800d246:	4602      	mov	r2, r0
 800d248:	4b1b      	ldr	r3, [pc, #108]	; (800d2b8 <find_volume+0x48c>)
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d11e      	bne.n	800d28c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d250:	3330      	adds	r3, #48	; 0x30
 800d252:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fbea 	bl	800ba30 <ld_dword>
 800d25c:	4602      	mov	r2, r0
 800d25e:	4b17      	ldr	r3, [pc, #92]	; (800d2bc <find_volume+0x490>)
 800d260:	429a      	cmp	r2, r3
 800d262:	d113      	bne.n	800d28c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	3330      	adds	r3, #48	; 0x30
 800d268:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe fbdf 	bl	800ba30 <ld_dword>
 800d272:	4602      	mov	r2, r0
 800d274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d276:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	3330      	adds	r3, #48	; 0x30
 800d27c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fbd5 	bl	800ba30 <ld_dword>
 800d286:	4602      	mov	r2, r0
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d292:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d294:	4b0a      	ldr	r3, [pc, #40]	; (800d2c0 <find_volume+0x494>)
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <find_volume+0x494>)
 800d29e:	801a      	strh	r2, [r3, #0]
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <find_volume+0x494>)
 800d2a2:	881a      	ldrh	r2, [r3, #0]
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d2a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2aa:	f7fe fdf1 	bl	800be90 <clear_lock>
#endif
	return FR_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3758      	adds	r7, #88	; 0x58
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	41615252 	.word	0x41615252
 800d2bc:	61417272 	.word	0x61417272
 800d2c0:	20001368 	.word	0x20001368

0800d2c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2ce:	2309      	movs	r3, #9
 800d2d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d01c      	beq.n	800d312 <validate+0x4e>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d018      	beq.n	800d312 <validate+0x4e>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d013      	beq.n	800d312 <validate+0x4e>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	889a      	ldrh	r2, [r3, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	88db      	ldrh	r3, [r3, #6]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d10c      	bne.n	800d312 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	785b      	ldrb	r3, [r3, #1]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fae0 	bl	800b8c4 <disk_status>
 800d304:	4603      	mov	r3, r0
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <validate+0x4e>
			res = FR_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d102      	bne.n	800d31e <validate+0x5a>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	e000      	b.n	800d320 <validate+0x5c>
 800d31e:	2300      	movs	r3, #0
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	6013      	str	r3, [r2, #0]
	return res;
 800d324:	7bfb      	ldrb	r3, [r7, #15]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
	...

0800d330 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	4613      	mov	r3, r2
 800d33c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d342:	f107 0310 	add.w	r3, r7, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff fcd5 	bl	800ccf6 <get_ldnumber>
 800d34c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	2b00      	cmp	r3, #0
 800d352:	da01      	bge.n	800d358 <f_mount+0x28>
 800d354:	230b      	movs	r3, #11
 800d356:	e02b      	b.n	800d3b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d358:	4a17      	ldr	r2, [pc, #92]	; (800d3b8 <f_mount+0x88>)
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d360:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d005      	beq.n	800d374 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d368:	69b8      	ldr	r0, [r7, #24]
 800d36a:	f7fe fd91 	bl	800be90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	2200      	movs	r2, #0
 800d372:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	490d      	ldr	r1, [pc, #52]	; (800d3b8 <f_mount+0x88>)
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <f_mount+0x66>
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d001      	beq.n	800d39a <f_mount+0x6a>
 800d396:	2300      	movs	r3, #0
 800d398:	e00a      	b.n	800d3b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d39a:	f107 010c 	add.w	r1, r7, #12
 800d39e:	f107 0308 	add.w	r3, r7, #8
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fd41 	bl	800ce2c <find_volume>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20001364 	.word	0x20001364

0800d3bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b098      	sub	sp, #96	; 0x60
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <f_open+0x18>
 800d3d0:	2309      	movs	r3, #9
 800d3d2:	e1ad      	b.n	800d730 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3dc:	79fa      	ldrb	r2, [r7, #7]
 800d3de:	f107 0110 	add.w	r1, r7, #16
 800d3e2:	f107 0308 	add.w	r3, r7, #8
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fd20 	bl	800ce2c <find_volume>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d3f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f040 8191 	bne.w	800d71e <f_open+0x362>
		dj.obj.fs = fs;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	f107 0314 	add.w	r3, r7, #20
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fc03 	bl	800cc14 <follow_path>
 800d40e:	4603      	mov	r3, r0
 800d410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d11a      	bne.n	800d452 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d41c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d420:	b25b      	sxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	da03      	bge.n	800d42e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d426:	2306      	movs	r3, #6
 800d428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d42c:	e011      	b.n	800d452 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	f023 0301 	bic.w	r3, r3, #1
 800d434:	2b00      	cmp	r3, #0
 800d436:	bf14      	ite	ne
 800d438:	2301      	movne	r3, #1
 800d43a:	2300      	moveq	r3, #0
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	461a      	mov	r2, r3
 800d440:	f107 0314 	add.w	r3, r7, #20
 800d444:	4611      	mov	r1, r2
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fbda 	bl	800bc00 <chk_lock>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	f003 031c 	and.w	r3, r3, #28
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d07f      	beq.n	800d55c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d45c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d460:	2b00      	cmp	r3, #0
 800d462:	d017      	beq.n	800d494 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d468:	2b04      	cmp	r3, #4
 800d46a:	d10e      	bne.n	800d48a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d46c:	f7fe fc24 	bl	800bcb8 <enq_lock>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d006      	beq.n	800d484 <f_open+0xc8>
 800d476:	f107 0314 	add.w	r3, r7, #20
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff fb03 	bl	800ca86 <dir_register>
 800d480:	4603      	mov	r3, r0
 800d482:	e000      	b.n	800d486 <f_open+0xca>
 800d484:	2312      	movs	r3, #18
 800d486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	f043 0308 	orr.w	r3, r3, #8
 800d490:	71fb      	strb	r3, [r7, #7]
 800d492:	e010      	b.n	800d4b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d494:	7ebb      	ldrb	r3, [r7, #26]
 800d496:	f003 0311 	and.w	r3, r3, #17
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <f_open+0xea>
					res = FR_DENIED;
 800d49e:	2307      	movs	r3, #7
 800d4a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4a4:	e007      	b.n	800d4b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d002      	beq.n	800d4b6 <f_open+0xfa>
 800d4b0:	2308      	movs	r3, #8
 800d4b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d168      	bne.n	800d590 <f_open+0x1d4>
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	f003 0308 	and.w	r3, r3, #8
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d063      	beq.n	800d590 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d4c8:	f7fb fa04 	bl	80088d4 <get_fattime>
 800d4cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	330e      	adds	r3, #14
 800d4d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fae9 	bl	800baac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	3316      	adds	r3, #22
 800d4de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fae3 	bl	800baac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	330b      	adds	r3, #11
 800d4ea:	2220      	movs	r2, #32
 800d4ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fa32 	bl	800c95e <ld_clust>
 800d4fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d500:	2200      	movs	r2, #0
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fa4a 	bl	800c99c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	331c      	adds	r3, #28
 800d50c:	2100      	movs	r1, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe facc 	bl	800baac <st_dword>
					fs->wflag = 1;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2201      	movs	r2, #1
 800d518:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d037      	beq.n	800d590 <f_open+0x1d4>
						dw = fs->winsect;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d526:	f107 0314 	add.w	r3, r7, #20
 800d52a:	2200      	movs	r2, #0
 800d52c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fe ff5d 	bl	800c3ee <remove_chain>
 800d534:	4603      	mov	r3, r0
 800d536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d126      	bne.n	800d590 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fd0a 	bl	800bf60 <move_window>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d556:	3a01      	subs	r2, #1
 800d558:	60da      	str	r2, [r3, #12]
 800d55a:	e019      	b.n	800d590 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d55c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d560:	2b00      	cmp	r3, #0
 800d562:	d115      	bne.n	800d590 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d564:	7ebb      	ldrb	r3, [r7, #26]
 800d566:	f003 0310 	and.w	r3, r3, #16
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d56e:	2304      	movs	r3, #4
 800d570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d574:	e00c      	b.n	800d590 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d576:	79fb      	ldrb	r3, [r7, #7]
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d007      	beq.n	800d590 <f_open+0x1d4>
 800d580:	7ebb      	ldrb	r3, [r7, #26]
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <f_open+0x1d4>
						res = FR_DENIED;
 800d58a:	2307      	movs	r3, #7
 800d58c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d594:	2b00      	cmp	r3, #0
 800d596:	d128      	bne.n	800d5ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	f003 0308 	and.w	r3, r3, #8
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d5b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	f023 0301 	bic.w	r3, r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	bf14      	ite	ne
 800d5c2:	2301      	movne	r3, #1
 800d5c4:	2300      	moveq	r3, #0
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	f107 0314 	add.w	r3, r7, #20
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fb93 	bl	800bcfc <inc_lock>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d102      	bne.n	800d5ea <f_open+0x22e>
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f040 8095 	bne.w	800d71e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7ff f9af 	bl	800c95e <ld_clust>
 800d600:	4602      	mov	r2, r0
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d608:	331c      	adds	r3, #28
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe fa10 	bl	800ba30 <ld_dword>
 800d610:	4602      	mov	r2, r0
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2200      	movs	r2, #0
 800d61a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	88da      	ldrh	r2, [r3, #6]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	79fa      	ldrb	r2, [r7, #7]
 800d62e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2200      	movs	r2, #0
 800d640:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3330      	adds	r3, #48	; 0x30
 800d646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fe fa7a 	bl	800bb46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d652:	79fb      	ldrb	r3, [r7, #7]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d060      	beq.n	800d71e <f_open+0x362>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d05c      	beq.n	800d71e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	895b      	ldrh	r3, [r3, #10]
 800d670:	025b      	lsls	r3, r3, #9
 800d672:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	657b      	str	r3, [r7, #84]	; 0x54
 800d680:	e016      	b.n	800d6b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fd25 	bl	800c0d6 <get_fat>
 800d68c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d690:	2b01      	cmp	r3, #1
 800d692:	d802      	bhi.n	800d69a <f_open+0x2de>
 800d694:	2302      	movs	r3, #2
 800d696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a0:	d102      	bne.n	800d6a8 <f_open+0x2ec>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ac:	1ad3      	subs	r3, r2, r3
 800d6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800d6b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d103      	bne.n	800d6c0 <f_open+0x304>
 800d6b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d8e0      	bhi.n	800d682 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d127      	bne.n	800d71e <f_open+0x362>
 800d6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d022      	beq.n	800d71e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fe fcdb 	bl	800c098 <clust2sect>
 800d6e2:	6478      	str	r0, [r7, #68]	; 0x44
 800d6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <f_open+0x336>
						res = FR_INT_ERR;
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6f0:	e015      	b.n	800d71e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f4:	0a5a      	lsrs	r2, r3, #9
 800d6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6f8:	441a      	add	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	7858      	ldrb	r0, [r3, #1]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6a1a      	ldr	r2, [r3, #32]
 800d70c:	2301      	movs	r3, #1
 800d70e:	f7fe f919 	bl	800b944 <disk_read>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <f_open+0x362>
 800d718:	2301      	movs	r3, #1
 800d71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <f_open+0x370>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d72c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d730:	4618      	mov	r0, r3
 800d732:	3760      	adds	r7, #96	; 0x60
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	; 0x38
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f107 0214 	add.w	r2, r7, #20
 800d756:	4611      	mov	r1, r2
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff fdb3 	bl	800d2c4 <validate>
 800d75e:	4603      	mov	r3, r0
 800d760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d107      	bne.n	800d77c <f_read+0x44>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	7d5b      	ldrb	r3, [r3, #21]
 800d770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <f_read+0x4a>
 800d77c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d780:	e115      	b.n	800d9ae <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	7d1b      	ldrb	r3, [r3, #20]
 800d786:	f003 0301 	and.w	r3, r3, #1
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <f_read+0x5a>
 800d78e:	2307      	movs	r3, #7
 800d790:	e10d      	b.n	800d9ae <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	f240 80fe 	bls.w	800d9a4 <f_read+0x26c>
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d7ac:	e0fa      	b.n	800d9a4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f040 80c6 	bne.w	800d948 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	0a5b      	lsrs	r3, r3, #9
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	8952      	ldrh	r2, [r2, #10]
 800d7c6:	3a01      	subs	r2, #1
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d12f      	bne.n	800d832 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d103      	bne.n	800d7e2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	633b      	str	r3, [r7, #48]	; 0x30
 800d7e0:	e013      	b.n	800d80a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d007      	beq.n	800d7fa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7fe fef9 	bl	800c5e8 <clmt_clust>
 800d7f6:	6338      	str	r0, [r7, #48]	; 0x30
 800d7f8:	e007      	b.n	800d80a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	69db      	ldr	r3, [r3, #28]
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fe fc67 	bl	800c0d6 <get_fat>
 800d808:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d804      	bhi.n	800d81a <f_read+0xe2>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2202      	movs	r2, #2
 800d814:	755a      	strb	r2, [r3, #21]
 800d816:	2302      	movs	r3, #2
 800d818:	e0c9      	b.n	800d9ae <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d820:	d104      	bne.n	800d82c <f_read+0xf4>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2201      	movs	r2, #1
 800d826:	755a      	strb	r2, [r3, #21]
 800d828:	2301      	movs	r3, #1
 800d82a:	e0c0      	b.n	800d9ae <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d830:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d832:	697a      	ldr	r2, [r7, #20]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	69db      	ldr	r3, [r3, #28]
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f7fe fc2c 	bl	800c098 <clust2sect>
 800d840:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d104      	bne.n	800d852 <f_read+0x11a>
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2202      	movs	r2, #2
 800d84c:	755a      	strb	r2, [r3, #21]
 800d84e:	2302      	movs	r3, #2
 800d850:	e0ad      	b.n	800d9ae <f_read+0x276>
			sect += csect;
 800d852:	69ba      	ldr	r2, [r7, #24]
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	4413      	add	r3, r2
 800d858:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	0a5b      	lsrs	r3, r3, #9
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	2b00      	cmp	r3, #0
 800d864:	d039      	beq.n	800d8da <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d866:	69fa      	ldr	r2, [r7, #28]
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	4413      	add	r3, r2
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	8952      	ldrh	r2, [r2, #10]
 800d870:	4293      	cmp	r3, r2
 800d872:	d905      	bls.n	800d880 <f_read+0x148>
					cc = fs->csize - csect;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	461a      	mov	r2, r3
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	7858      	ldrb	r0, [r3, #1]
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	69ba      	ldr	r2, [r7, #24]
 800d888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d88a:	f7fe f85b 	bl	800b944 <disk_read>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d004      	beq.n	800d89e <f_read+0x166>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2201      	movs	r2, #1
 800d898:	755a      	strb	r2, [r3, #21]
 800d89a:	2301      	movs	r3, #1
 800d89c:	e087      	b.n	800d9ae <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	7d1b      	ldrb	r3, [r3, #20]
 800d8a2:	b25b      	sxtb	r3, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	da14      	bge.n	800d8d2 <f_read+0x19a>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6a1a      	ldr	r2, [r3, #32]
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d90d      	bls.n	800d8d2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6a1a      	ldr	r2, [r3, #32]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	025b      	lsls	r3, r3, #9
 800d8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c2:	18d0      	adds	r0, r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	3330      	adds	r3, #48	; 0x30
 800d8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	f7fe f919 	bl	800bb04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	025b      	lsls	r3, r3, #9
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d8d8:	e050      	b.n	800d97c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	69ba      	ldr	r2, [r7, #24]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d02e      	beq.n	800d942 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	b25b      	sxtb	r3, r3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	da18      	bge.n	800d920 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	7858      	ldrb	r0, [r3, #1]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6a1a      	ldr	r2, [r3, #32]
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f7fe f841 	bl	800b984 <disk_write>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <f_read+0x1da>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2201      	movs	r2, #1
 800d90c:	755a      	strb	r2, [r3, #21]
 800d90e:	2301      	movs	r3, #1
 800d910:	e04d      	b.n	800d9ae <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	7d1b      	ldrb	r3, [r3, #20]
 800d916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	7858      	ldrb	r0, [r3, #1]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d92a:	2301      	movs	r3, #1
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	f7fe f809 	bl	800b944 <disk_read>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d004      	beq.n	800d942 <f_read+0x20a>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2201      	movs	r2, #1
 800d93c:	755a      	strb	r2, [r3, #21]
 800d93e:	2301      	movs	r3, #1
 800d940:	e035      	b.n	800d9ae <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	69ba      	ldr	r2, [r7, #24]
 800d946:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d950:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d954:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d901      	bls.n	800d962 <f_read+0x22a>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d970:	4413      	add	r3, r2
 800d972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d974:	4619      	mov	r1, r3
 800d976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d978:	f7fe f8c4 	bl	800bb04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	4413      	add	r3, r2
 800d982:	627b      	str	r3, [r7, #36]	; 0x24
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	699a      	ldr	r2, [r3, #24]
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	441a      	add	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	619a      	str	r2, [r3, #24]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	441a      	add	r2, r3
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f47f af01 	bne.w	800d7ae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3738      	adds	r7, #56	; 0x38
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b086      	sub	sp, #24
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f107 0208 	add.w	r2, r7, #8
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fc7c 	bl	800d2c4 <validate>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d168      	bne.n	800daa8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	7d1b      	ldrb	r3, [r3, #20]
 800d9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d062      	beq.n	800daa8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	da15      	bge.n	800da18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	7858      	ldrb	r0, [r3, #1]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1a      	ldr	r2, [r3, #32]
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	f7fd ffc2 	bl	800b984 <disk_write>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <f_sync+0x54>
 800da06:	2301      	movs	r3, #1
 800da08:	e04f      	b.n	800daaa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7d1b      	ldrb	r3, [r3, #20]
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da18:	f7fa ff5c 	bl	80088d4 <get_fattime>
 800da1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7fe fa9a 	bl	800bf60 <move_window>
 800da2c:	4603      	mov	r3, r0
 800da2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d138      	bne.n	800daa8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	330b      	adds	r3, #11
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	330b      	adds	r3, #11
 800da46:	f042 0220 	orr.w	r2, r2, #32
 800da4a:	b2d2      	uxtb	r2, r2
 800da4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6818      	ldr	r0, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	461a      	mov	r2, r3
 800da58:	68f9      	ldr	r1, [r7, #12]
 800da5a:	f7fe ff9f 	bl	800c99c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f103 021c 	add.w	r2, r3, #28
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	4619      	mov	r1, r3
 800da6a:	4610      	mov	r0, r2
 800da6c:	f7fe f81e 	bl	800baac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3316      	adds	r3, #22
 800da74:	6939      	ldr	r1, [r7, #16]
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe f818 	bl	800baac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3312      	adds	r3, #18
 800da80:	2100      	movs	r1, #0
 800da82:	4618      	mov	r0, r3
 800da84:	f7fd fff7 	bl	800ba76 <st_word>
					fs->wflag = 1;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2201      	movs	r2, #1
 800da8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	4618      	mov	r0, r3
 800da92:	f7fe fa93 	bl	800bfbc <sync_fs>
 800da96:	4603      	mov	r3, r0
 800da98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ff7b 	bl	800d9b6 <f_sync>
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d118      	bne.n	800dafc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f107 0208 	add.w	r2, r7, #8
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fbf6 	bl	800d2c4 <validate>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10c      	bne.n	800dafc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f996 	bl	800be18 <dec_lock>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b090      	sub	sp, #64	; 0x40
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f107 0208 	add.w	r2, r7, #8
 800db16:	4611      	mov	r1, r2
 800db18:	4618      	mov	r0, r3
 800db1a:	f7ff fbd3 	bl	800d2c4 <validate>
 800db1e:	4603      	mov	r3, r0
 800db20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800db24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d103      	bne.n	800db34 <f_lseek+0x2e>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7d5b      	ldrb	r3, [r3, #21]
 800db30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800db34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <f_lseek+0x3c>
 800db3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db40:	e1e6      	b.n	800df10 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 80d1 	beq.w	800dcee <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d15a      	bne.n	800dc0a <f_lseek+0x104>
			tbl = fp->cltbl;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	1d1a      	adds	r2, r3, #4
 800db5e:	627a      	str	r2, [r7, #36]	; 0x24
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	617b      	str	r3, [r7, #20]
 800db64:	2302      	movs	r3, #2
 800db66:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	2b00      	cmp	r3, #0
 800db72:	d03a      	beq.n	800dbea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	2300      	movs	r3, #0
 800db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	3302      	adds	r3, #2
 800db80:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800db82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	3301      	adds	r3, #1
 800db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db90:	4618      	mov	r0, r3
 800db92:	f7fe faa0 	bl	800c0d6 <get_fat>
 800db96:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d804      	bhi.n	800dba8 <f_lseek+0xa2>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2202      	movs	r2, #2
 800dba2:	755a      	strb	r2, [r3, #21]
 800dba4:	2302      	movs	r3, #2
 800dba6:	e1b3      	b.n	800df10 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d104      	bne.n	800dbba <f_lseek+0xb4>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	755a      	strb	r2, [r3, #21]
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e1aa      	b.n	800df10 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d0de      	beq.n	800db82 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dbc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d809      	bhi.n	800dbe0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	1d1a      	adds	r2, r3, #4
 800dbd0:	627a      	str	r2, [r7, #36]	; 0x24
 800dbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd4:	601a      	str	r2, [r3, #0]
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	1d1a      	adds	r2, r3, #4
 800dbda:	627a      	str	r2, [r7, #36]	; 0x24
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d3c4      	bcc.n	800db74 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dbf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d803      	bhi.n	800dc02 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	601a      	str	r2, [r3, #0]
 800dc00:	e184      	b.n	800df0c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dc02:	2311      	movs	r3, #17
 800dc04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc08:	e180      	b.n	800df0c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d902      	bls.n	800dc1a <f_lseek+0x114>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 8172 	beq.w	800df0c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fe fcda 	bl	800c5e8 <clmt_clust>
 800dc34:	4602      	mov	r2, r0
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	4619      	mov	r1, r3
 800dc42:	4610      	mov	r0, r2
 800dc44:	f7fe fa28 	bl	800c098 <clust2sect>
 800dc48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d104      	bne.n	800dc5a <f_lseek+0x154>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2202      	movs	r2, #2
 800dc54:	755a      	strb	r2, [r3, #21]
 800dc56:	2302      	movs	r3, #2
 800dc58:	e15a      	b.n	800df10 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	0a5b      	lsrs	r3, r3, #9
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	8952      	ldrh	r2, [r2, #10]
 800dc64:	3a01      	subs	r2, #1
 800dc66:	4013      	ands	r3, r2
 800dc68:	69ba      	ldr	r2, [r7, #24]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 8148 	beq.w	800df0c <f_lseek+0x406>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a1b      	ldr	r3, [r3, #32]
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	f000 8142 	beq.w	800df0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7d1b      	ldrb	r3, [r3, #20]
 800dc8c:	b25b      	sxtb	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	da18      	bge.n	800dcc4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	7858      	ldrb	r0, [r3, #1]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a1a      	ldr	r2, [r3, #32]
 800dca0:	2301      	movs	r3, #1
 800dca2:	f7fd fe6f 	bl	800b984 <disk_write>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <f_lseek+0x1b0>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	755a      	strb	r2, [r3, #21]
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e12c      	b.n	800df10 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	7d1b      	ldrb	r3, [r3, #20]
 800dcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	7858      	ldrb	r0, [r3, #1]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dcce:	2301      	movs	r3, #1
 800dcd0:	69ba      	ldr	r2, [r7, #24]
 800dcd2:	f7fd fe37 	bl	800b944 <disk_read>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d004      	beq.n	800dce6 <f_lseek+0x1e0>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	755a      	strb	r2, [r3, #21]
 800dce2:	2301      	movs	r3, #1
 800dce4:	e114      	b.n	800df10 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	69ba      	ldr	r2, [r7, #24]
 800dcea:	621a      	str	r2, [r3, #32]
 800dcec:	e10e      	b.n	800df0c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d908      	bls.n	800dd0a <f_lseek+0x204>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7d1b      	ldrb	r3, [r3, #20]
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	699b      	ldr	r3, [r3, #24]
 800dd0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	637b      	str	r3, [r7, #52]	; 0x34
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd18:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 80a7 	beq.w	800de70 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	895b      	ldrh	r3, [r3, #10]
 800dd26:	025b      	lsls	r3, r3, #9
 800dd28:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01b      	beq.n	800dd68 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	1e5a      	subs	r2, r3, #1
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	1e59      	subs	r1, r3, #1
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d30f      	bcc.n	800dd68 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	1e5a      	subs	r2, r3, #1
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	425b      	negs	r3, r3
 800dd50:	401a      	ands	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	699b      	ldr	r3, [r3, #24]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd66:	e022      	b.n	800ddae <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d119      	bne.n	800dda8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2100      	movs	r1, #0
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fe fb9d 	bl	800c4b8 <create_chain>
 800dd7e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d104      	bne.n	800dd90 <f_lseek+0x28a>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	755a      	strb	r2, [r3, #21]
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	e0bf      	b.n	800df10 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	d104      	bne.n	800dda2 <f_lseek+0x29c>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	755a      	strb	r2, [r3, #21]
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e0b6      	b.n	800df10 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dda6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d05d      	beq.n	800de70 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ddb4:	e03a      	b.n	800de2c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	603b      	str	r3, [r7, #0]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	699a      	ldr	r2, [r3, #24]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	441a      	add	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	7d1b      	ldrb	r3, [r3, #20]
 800ddce:	f003 0302 	and.w	r3, r3, #2
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fb6c 	bl	800c4b8 <create_chain>
 800dde0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d108      	bne.n	800ddfa <f_lseek+0x2f4>
							ofs = 0; break;
 800dde8:	2300      	movs	r3, #0
 800ddea:	603b      	str	r3, [r7, #0]
 800ddec:	e022      	b.n	800de34 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe f96f 	bl	800c0d6 <get_fat>
 800ddf8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de00:	d104      	bne.n	800de0c <f_lseek+0x306>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2201      	movs	r2, #1
 800de06:	755a      	strb	r2, [r3, #21]
 800de08:	2301      	movs	r3, #1
 800de0a:	e081      	b.n	800df10 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800de0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d904      	bls.n	800de1c <f_lseek+0x316>
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de18:	429a      	cmp	r2, r3
 800de1a:	d304      	bcc.n	800de26 <f_lseek+0x320>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	755a      	strb	r2, [r3, #21]
 800de22:	2302      	movs	r3, #2
 800de24:	e074      	b.n	800df10 <f_lseek+0x40a>
					fp->clust = clst;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de2a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	429a      	cmp	r2, r3
 800de32:	d8c0      	bhi.n	800ddb6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	699a      	ldr	r2, [r3, #24]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	441a      	add	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de46:	2b00      	cmp	r3, #0
 800de48:	d012      	beq.n	800de70 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fe f922 	bl	800c098 <clust2sect>
 800de54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800de56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d104      	bne.n	800de66 <f_lseek+0x360>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	755a      	strb	r2, [r3, #21]
 800de62:	2302      	movs	r3, #2
 800de64:	e054      	b.n	800df10 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	0a5b      	lsrs	r3, r3, #9
 800de6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de6c:	4413      	add	r3, r2
 800de6e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	699a      	ldr	r2, [r3, #24]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d90a      	bls.n	800de92 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	699a      	ldr	r2, [r3, #24]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7d1b      	ldrb	r3, [r3, #20]
 800de88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d036      	beq.n	800df0c <f_lseek+0x406>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d031      	beq.n	800df0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	b25b      	sxtb	r3, r3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	da18      	bge.n	800dee4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	7858      	ldrb	r0, [r3, #1]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a1a      	ldr	r2, [r3, #32]
 800dec0:	2301      	movs	r3, #1
 800dec2:	f7fd fd5f 	bl	800b984 <disk_write>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <f_lseek+0x3d0>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	755a      	strb	r2, [r3, #21]
 800ded2:	2301      	movs	r3, #1
 800ded4:	e01c      	b.n	800df10 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7d1b      	ldrb	r3, [r3, #20]
 800deda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	7858      	ldrb	r0, [r3, #1]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800deee:	2301      	movs	r3, #1
 800def0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def2:	f7fd fd27 	bl	800b944 <disk_read>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d004      	beq.n	800df06 <f_lseek+0x400>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	755a      	strb	r2, [r3, #21]
 800df02:	2301      	movs	r3, #1
 800df04:	e004      	b.n	800df10 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df0a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800df0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800df10:	4618      	mov	r0, r3
 800df12:	3740      	adds	r7, #64	; 0x40
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df26:	2301      	movs	r3, #1
 800df28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df2e:	4b1f      	ldr	r3, [pc, #124]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df30:	7a5b      	ldrb	r3, [r3, #9]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d131      	bne.n	800df9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df38:	4b1c      	ldr	r3, [pc, #112]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df3a:	7a5b      	ldrb	r3, [r3, #9]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	461a      	mov	r2, r3
 800df40:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df42:	2100      	movs	r1, #0
 800df44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df46:	4b19      	ldr	r3, [pc, #100]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df48:	7a5b      	ldrb	r3, [r3, #9]
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	4a17      	ldr	r2, [pc, #92]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df56:	4b15      	ldr	r3, [pc, #84]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df58:	7a5b      	ldrb	r3, [r3, #9]
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	461a      	mov	r2, r3
 800df5e:	4b13      	ldr	r3, [pc, #76]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df60:	4413      	add	r3, r2
 800df62:	79fa      	ldrb	r2, [r7, #7]
 800df64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df68:	7a5b      	ldrb	r3, [r3, #9]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	1c5a      	adds	r2, r3, #1
 800df6e:	b2d1      	uxtb	r1, r2
 800df70:	4a0e      	ldr	r2, [pc, #56]	; (800dfac <FATFS_LinkDriverEx+0x94>)
 800df72:	7251      	strb	r1, [r2, #9]
 800df74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df76:	7dbb      	ldrb	r3, [r7, #22]
 800df78:	3330      	adds	r3, #48	; 0x30
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3301      	adds	r3, #1
 800df84:	223a      	movs	r2, #58	; 0x3a
 800df86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3302      	adds	r3, #2
 800df8c:	222f      	movs	r2, #47	; 0x2f
 800df8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	3303      	adds	r3, #3
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	2000138c 	.word	0x2000138c

0800dfb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfba:	2200      	movs	r2, #0
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff ffaa 	bl	800df18 <FATFS_LinkDriverEx>
 800dfc4:	4603      	mov	r3, r0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	490e      	ldr	r1, [pc, #56]	; (800e010 <MX_USB_HOST_Init+0x40>)
 800dfd8:	480e      	ldr	r0, [pc, #56]	; (800e014 <MX_USB_HOST_Init+0x44>)
 800dfda:	f7fc f919 	bl	800a210 <USBH_Init>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d001      	beq.n	800dfe8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dfe4:	f7f3 fb54 	bl	8001690 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dfe8:	490b      	ldr	r1, [pc, #44]	; (800e018 <MX_USB_HOST_Init+0x48>)
 800dfea:	480a      	ldr	r0, [pc, #40]	; (800e014 <MX_USB_HOST_Init+0x44>)
 800dfec:	f7fc f99e 	bl	800a32c <USBH_RegisterClass>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dff6:	f7f3 fb4b 	bl	8001690 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dffa:	4806      	ldr	r0, [pc, #24]	; (800e014 <MX_USB_HOST_Init+0x44>)
 800dffc:	f7fc fa22 	bl	800a444 <USBH_Start>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e006:	f7f3 fb43 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e00a:	bf00      	nop
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	0800e031 	.word	0x0800e031
 800e014:	20001bf4 	.word	0x20001bf4
 800e018:	20000014 	.word	0x20000014

0800e01c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e020:	4802      	ldr	r0, [pc, #8]	; (800e02c <MX_USB_HOST_Process+0x10>)
 800e022:	f7fc fa1f 	bl	800a464 <USBH_Process>
}
 800e026:	bf00      	nop
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20001bf4 	.word	0x20001bf4

0800e030 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	460b      	mov	r3, r1
 800e03a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e03c:	78fb      	ldrb	r3, [r7, #3]
 800e03e:	3b01      	subs	r3, #1
 800e040:	2b04      	cmp	r3, #4
 800e042:	d819      	bhi.n	800e078 <USBH_UserProcess+0x48>
 800e044:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <USBH_UserProcess+0x1c>)
 800e046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04a:	bf00      	nop
 800e04c:	0800e079 	.word	0x0800e079
 800e050:	0800e069 	.word	0x0800e069
 800e054:	0800e079 	.word	0x0800e079
 800e058:	0800e071 	.word	0x0800e071
 800e05c:	0800e061 	.word	0x0800e061
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e060:	4b09      	ldr	r3, [pc, #36]	; (800e088 <USBH_UserProcess+0x58>)
 800e062:	2203      	movs	r2, #3
 800e064:	701a      	strb	r2, [r3, #0]
  break;
 800e066:	e008      	b.n	800e07a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e068:	4b07      	ldr	r3, [pc, #28]	; (800e088 <USBH_UserProcess+0x58>)
 800e06a:	2202      	movs	r2, #2
 800e06c:	701a      	strb	r2, [r3, #0]
  break;
 800e06e:	e004      	b.n	800e07a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e070:	4b05      	ldr	r3, [pc, #20]	; (800e088 <USBH_UserProcess+0x58>)
 800e072:	2201      	movs	r2, #1
 800e074:	701a      	strb	r2, [r3, #0]
  break;
 800e076:	e000      	b.n	800e07a <USBH_UserProcess+0x4a>

  default:
  break;
 800e078:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e07a:	bf00      	nop
 800e07c:	370c      	adds	r7, #12
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	20001398 	.word	0x20001398

0800e08c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08a      	sub	sp, #40	; 0x28
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e094:	f107 0314 	add.w	r3, r7, #20
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	605a      	str	r2, [r3, #4]
 800e09e:	609a      	str	r2, [r3, #8]
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0ac:	d147      	bne.n	800e13e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	4b25      	ldr	r3, [pc, #148]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b6:	4a24      	ldr	r2, [pc, #144]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e0b8:	f043 0301 	orr.w	r3, r3, #1
 800e0bc:	6313      	str	r3, [r2, #48]	; 0x30
 800e0be:	4b22      	ldr	r3, [pc, #136]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c2:	f003 0301 	and.w	r3, r3, #1
 800e0c6:	613b      	str	r3, [r7, #16]
 800e0c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e0ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0d8:	f107 0314 	add.w	r3, r7, #20
 800e0dc:	4619      	mov	r1, r3
 800e0de:	481b      	ldr	r0, [pc, #108]	; (800e14c <HAL_HCD_MspInit+0xc0>)
 800e0e0:	f7f4 faa8 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e0e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e0e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e0f6:	230a      	movs	r3, #10
 800e0f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0fa:	f107 0314 	add.w	r3, r7, #20
 800e0fe:	4619      	mov	r1, r3
 800e100:	4812      	ldr	r0, [pc, #72]	; (800e14c <HAL_HCD_MspInit+0xc0>)
 800e102:	f7f4 fa97 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e106:	4b10      	ldr	r3, [pc, #64]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	4a0f      	ldr	r2, [pc, #60]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e110:	6353      	str	r3, [r2, #52]	; 0x34
 800e112:	2300      	movs	r3, #0
 800e114:	60fb      	str	r3, [r7, #12]
 800e116:	4b0c      	ldr	r3, [pc, #48]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11a:	4a0b      	ldr	r2, [pc, #44]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e11c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e120:	6453      	str	r3, [r2, #68]	; 0x44
 800e122:	4b09      	ldr	r3, [pc, #36]	; (800e148 <HAL_HCD_MspInit+0xbc>)
 800e124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e12a:	60fb      	str	r3, [r7, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e12e:	2200      	movs	r2, #0
 800e130:	2100      	movs	r1, #0
 800e132:	2043      	movs	r0, #67	; 0x43
 800e134:	f7f3 fe69 	bl	8001e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e138:	2043      	movs	r0, #67	; 0x43
 800e13a:	f7f3 fe82 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e13e:	bf00      	nop
 800e140:	3728      	adds	r7, #40	; 0x28
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	40023800 	.word	0x40023800
 800e14c:	40020000 	.word	0x40020000

0800e150 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fc fd53 	bl	800ac0a <USBH_LL_IncTimer>
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fc fd8b 	bl	800ac96 <USBH_LL_Connect>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e196:	4618      	mov	r0, r3
 800e198:	f7fc fd94 	bl	800acc4 <USBH_LL_Disconnect>
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc fd45 	bl	800ac5e <USBH_LL_PortEnabled>
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fc fd45 	bl	800ac7a <USBH_LL_PortDisabled>
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e206:	2b01      	cmp	r3, #1
 800e208:	d12a      	bne.n	800e260 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e20a:	4a18      	ldr	r2, [pc, #96]	; (800e26c <USBH_LL_Init+0x74>)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a15      	ldr	r2, [pc, #84]	; (800e26c <USBH_LL_Init+0x74>)
 800e216:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e21a:	4b14      	ldr	r3, [pc, #80]	; (800e26c <USBH_LL_Init+0x74>)
 800e21c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e220:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e222:	4b12      	ldr	r3, [pc, #72]	; (800e26c <USBH_LL_Init+0x74>)
 800e224:	2208      	movs	r2, #8
 800e226:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e228:	4b10      	ldr	r3, [pc, #64]	; (800e26c <USBH_LL_Init+0x74>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e22e:	4b0f      	ldr	r3, [pc, #60]	; (800e26c <USBH_LL_Init+0x74>)
 800e230:	2200      	movs	r2, #0
 800e232:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e234:	4b0d      	ldr	r3, [pc, #52]	; (800e26c <USBH_LL_Init+0x74>)
 800e236:	2202      	movs	r2, #2
 800e238:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e23a:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <USBH_LL_Init+0x74>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e240:	480a      	ldr	r0, [pc, #40]	; (800e26c <USBH_LL_Init+0x74>)
 800e242:	f7f4 fbc2 	bl	80029ca <HAL_HCD_Init>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e24c:	f7f3 fa20 	bl	8001690 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e250:	4806      	ldr	r0, [pc, #24]	; (800e26c <USBH_LL_Init+0x74>)
 800e252:	f7f4 ffc5 	bl	80031e0 <HAL_HCD_GetCurrentFrame>
 800e256:	4603      	mov	r3, r0
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7fc fcc6 	bl	800abec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20001fcc 	.word	0x20001fcc

0800e270 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e286:	4618      	mov	r0, r3
 800e288:	f7f4 ff32 	bl	80030f0 <HAL_HCD_Start>
 800e28c:	4603      	mov	r3, r0
 800e28e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e290:	7bfb      	ldrb	r3, [r7, #15]
 800e292:	4618      	mov	r0, r3
 800e294:	f000 f986 	bl	800e5a4 <USBH_Get_USB_Status>
 800e298:	4603      	mov	r3, r0
 800e29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3710      	adds	r7, #16
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f4 ff3a 	bl	8003136 <HAL_HCD_Stop>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 f96b 	bl	800e5a4 <USBH_Get_USB_Status>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7f4 ff84 	bl	80031fc <HAL_HCD_GetCurrentSpeed>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d007      	beq.n	800e30a <USBH_LL_GetSpeed+0x2e>
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d302      	bcc.n	800e304 <USBH_LL_GetSpeed+0x28>
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d006      	beq.n	800e310 <USBH_LL_GetSpeed+0x34>
 800e302:	e008      	b.n	800e316 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e304:	2300      	movs	r3, #0
 800e306:	73fb      	strb	r3, [r7, #15]
    break;
 800e308:	e008      	b.n	800e31c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e30a:	2301      	movs	r3, #1
 800e30c:	73fb      	strb	r3, [r7, #15]
    break;
 800e30e:	e005      	b.n	800e31c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e310:	2302      	movs	r3, #2
 800e312:	73fb      	strb	r3, [r7, #15]
    break;
 800e314:	e002      	b.n	800e31c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e316:	2301      	movs	r3, #1
 800e318:	73fb      	strb	r3, [r7, #15]
    break;
 800e31a:	bf00      	nop
  }
  return  speed;
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e332:	2300      	movs	r3, #0
 800e334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7f4 ff17 	bl	8003170 <HAL_HCD_ResetPort>
 800e342:	4603      	mov	r3, r0
 800e344:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 f92b 	bl	800e5a4 <USBH_Get_USB_Status>
 800e34e:	4603      	mov	r3, r0
 800e350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e352:	7bbb      	ldrb	r3, [r7, #14]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e36e:	78fa      	ldrb	r2, [r7, #3]
 800e370:	4611      	mov	r1, r2
 800e372:	4618      	mov	r0, r3
 800e374:	f7f4 ff1f 	bl	80031b6 <HAL_HCD_HC_GetXferCount>
 800e378:	4603      	mov	r3, r0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e382:	b590      	push	{r4, r7, lr}
 800e384:	b089      	sub	sp, #36	; 0x24
 800e386:	af04      	add	r7, sp, #16
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	4608      	mov	r0, r1
 800e38c:	4611      	mov	r1, r2
 800e38e:	461a      	mov	r2, r3
 800e390:	4603      	mov	r3, r0
 800e392:	70fb      	strb	r3, [r7, #3]
 800e394:	460b      	mov	r3, r1
 800e396:	70bb      	strb	r3, [r7, #2]
 800e398:	4613      	mov	r3, r2
 800e39a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e3aa:	787c      	ldrb	r4, [r7, #1]
 800e3ac:	78ba      	ldrb	r2, [r7, #2]
 800e3ae:	78f9      	ldrb	r1, [r7, #3]
 800e3b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3b2:	9302      	str	r3, [sp, #8]
 800e3b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	4623      	mov	r3, r4
 800e3c2:	f7f4 fb64 	bl	8002a8e <HAL_HCD_HC_Init>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3ca:	7bfb      	ldrb	r3, [r7, #15]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f8e9 	bl	800e5a4 <USBH_Get_USB_Status>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd90      	pop	{r4, r7, pc}

0800e3e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3fa:	78fa      	ldrb	r2, [r7, #3]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f4 fbdd 	bl	8002bbe <HAL_HCD_HC_Halt>
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e408:	7bfb      	ldrb	r3, [r7, #15]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f000 f8ca 	bl	800e5a4 <USBH_Get_USB_Status>
 800e410:	4603      	mov	r3, r0
 800e412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e414:	7bbb      	ldrb	r3, [r7, #14]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e41e:	b590      	push	{r4, r7, lr}
 800e420:	b089      	sub	sp, #36	; 0x24
 800e422:	af04      	add	r7, sp, #16
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	4608      	mov	r0, r1
 800e428:	4611      	mov	r1, r2
 800e42a:	461a      	mov	r2, r3
 800e42c:	4603      	mov	r3, r0
 800e42e:	70fb      	strb	r3, [r7, #3]
 800e430:	460b      	mov	r3, r1
 800e432:	70bb      	strb	r3, [r7, #2]
 800e434:	4613      	mov	r3, r2
 800e436:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e446:	787c      	ldrb	r4, [r7, #1]
 800e448:	78ba      	ldrb	r2, [r7, #2]
 800e44a:	78f9      	ldrb	r1, [r7, #3]
 800e44c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e450:	9303      	str	r3, [sp, #12]
 800e452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e454:	9302      	str	r3, [sp, #8]
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	4623      	mov	r3, r4
 800e462:	f7f4 fbcf 	bl	8002c04 <HAL_HCD_HC_SubmitRequest>
 800e466:	4603      	mov	r3, r0
 800e468:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e46a:	7bfb      	ldrb	r3, [r7, #15]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 f899 	bl	800e5a4 <USBH_Get_USB_Status>
 800e472:	4603      	mov	r3, r0
 800e474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e476:	7bbb      	ldrb	r3, [r7, #14]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd90      	pop	{r4, r7, pc}

0800e480 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	460b      	mov	r3, r1
 800e48a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e492:	78fa      	ldrb	r2, [r7, #3]
 800e494:	4611      	mov	r1, r2
 800e496:	4618      	mov	r0, r3
 800e498:	f7f4 fe78 	bl	800318c <HAL_HCD_HC_GetURBState>
 800e49c:	4603      	mov	r3, r0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b082      	sub	sp, #8
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e4b2:	20c8      	movs	r0, #200	; 0xc8
 800e4b4:	f7f3 fbac 	bl	8001c10 <HAL_Delay>
  return USBH_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e4c2:	b480      	push	{r7}
 800e4c4:	b085      	sub	sp, #20
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	70fb      	strb	r3, [r7, #3]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4d8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e4da:	78fa      	ldrb	r2, [r7, #3]
 800e4dc:	68f9      	ldr	r1, [r7, #12]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4413      	add	r3, r2
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	440b      	add	r3, r1
 800e4e8:	333b      	adds	r3, #59	; 0x3b
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00a      	beq.n	800e506 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e4f0:	78fa      	ldrb	r2, [r7, #3]
 800e4f2:	68f9      	ldr	r1, [r7, #12]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4413      	add	r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	440b      	add	r3, r1
 800e4fe:	3350      	adds	r3, #80	; 0x50
 800e500:	78ba      	ldrb	r2, [r7, #2]
 800e502:	701a      	strb	r2, [r3, #0]
 800e504:	e009      	b.n	800e51a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	68f9      	ldr	r1, [r7, #12]
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	00db      	lsls	r3, r3, #3
 800e512:	440b      	add	r3, r1
 800e514:	3351      	adds	r3, #81	; 0x51
 800e516:	78ba      	ldrb	r2, [r7, #2]
 800e518:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e53e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e540:	78fa      	ldrb	r2, [r7, #3]
 800e542:	68b9      	ldr	r1, [r7, #8]
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	440b      	add	r3, r1
 800e54e:	333b      	adds	r3, #59	; 0x3b
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00a      	beq.n	800e56c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e556:	78fa      	ldrb	r2, [r7, #3]
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	4613      	mov	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	4413      	add	r3, r2
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	440b      	add	r3, r1
 800e564:	3350      	adds	r3, #80	; 0x50
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	73fb      	strb	r3, [r7, #15]
 800e56a:	e009      	b.n	800e580 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e56c:	78fa      	ldrb	r2, [r7, #3]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	4613      	mov	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	440b      	add	r3, r1
 800e57a:	3351      	adds	r3, #81	; 0x51
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e580:	7bfb      	ldrb	r3, [r7, #15]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b082      	sub	sp, #8
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f3 fb3a 	bl	8001c10 <HAL_Delay>
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	2b03      	cmp	r3, #3
 800e5b6:	d817      	bhi.n	800e5e8 <USBH_Get_USB_Status+0x44>
 800e5b8:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <USBH_Get_USB_Status+0x1c>)
 800e5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5be:	bf00      	nop
 800e5c0:	0800e5d1 	.word	0x0800e5d1
 800e5c4:	0800e5d7 	.word	0x0800e5d7
 800e5c8:	0800e5dd 	.word	0x0800e5dd
 800e5cc:	0800e5e3 	.word	0x0800e5e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d4:	e00b      	b.n	800e5ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5da:	e008      	b.n	800e5ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e0:	e005      	b.n	800e5ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e6:	e002      	b.n	800e5ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e5e8:	2302      	movs	r3, #2
 800e5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ec:	bf00      	nop
  }
  return usb_status;
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr

0800e5fc <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	4603      	mov	r3, r0
 800e604:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800e606:	79fb      	ldrb	r3, [r7, #7]
 800e608:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800e60a:	4b11      	ldr	r3, [pc, #68]	; (800e650 <ILI9341_SendCommand+0x54>)
 800e60c:	6818      	ldr	r0, [r3, #0]
 800e60e:	4b11      	ldr	r3, [pc, #68]	; (800e654 <ILI9341_SendCommand+0x58>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	4619      	mov	r1, r3
 800e616:	f7f4 f9bf 	bl	8002998 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800e61a:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <ILI9341_SendCommand+0x5c>)
 800e61c:	6818      	ldr	r0, [r3, #0]
 800e61e:	4b0f      	ldr	r3, [pc, #60]	; (800e65c <ILI9341_SendCommand+0x60>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	2200      	movs	r2, #0
 800e624:	4619      	mov	r1, r3
 800e626:	f7f4 f9b7 	bl	8002998 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800e62a:	f107 010f 	add.w	r1, r7, #15
 800e62e:	2305      	movs	r3, #5
 800e630:	2201      	movs	r2, #1
 800e632:	480b      	ldr	r0, [pc, #44]	; (800e660 <ILI9341_SendCommand+0x64>)
 800e634:	f7f8 fc06 	bl	8006e44 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800e638:	4b07      	ldr	r3, [pc, #28]	; (800e658 <ILI9341_SendCommand+0x5c>)
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	4b07      	ldr	r3, [pc, #28]	; (800e65c <ILI9341_SendCommand+0x60>)
 800e63e:	881b      	ldrh	r3, [r3, #0]
 800e640:	2201      	movs	r2, #1
 800e642:	4619      	mov	r1, r3
 800e644:	f7f4 f9a8 	bl	8002998 <HAL_GPIO_WritePin>
}
 800e648:	bf00      	nop
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	200013fc 	.word	0x200013fc
 800e654:	20001400 	.word	0x20001400
 800e658:	200013f4 	.word	0x200013f4
 800e65c:	200013f8 	.word	0x200013f8
 800e660:	2000139c 	.word	0x2000139c

0800e664 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	4603      	mov	r3, r0
 800e66c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800e66e:	79fb      	ldrb	r3, [r7, #7]
 800e670:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800e672:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <ILI9341_SendData+0x54>)
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <ILI9341_SendData+0x58>)
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	2201      	movs	r2, #1
 800e67c:	4619      	mov	r1, r3
 800e67e:	f7f4 f98b 	bl	8002998 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800e682:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <ILI9341_SendData+0x5c>)
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <ILI9341_SendData+0x60>)
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	2200      	movs	r2, #0
 800e68c:	4619      	mov	r1, r3
 800e68e:	f7f4 f983 	bl	8002998 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800e692:	f107 010f 	add.w	r1, r7, #15
 800e696:	2305      	movs	r3, #5
 800e698:	2201      	movs	r2, #1
 800e69a:	480b      	ldr	r0, [pc, #44]	; (800e6c8 <ILI9341_SendData+0x64>)
 800e69c:	f7f8 fbd2 	bl	8006e44 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800e6a0:	4b07      	ldr	r3, [pc, #28]	; (800e6c0 <ILI9341_SendData+0x5c>)
 800e6a2:	6818      	ldr	r0, [r3, #0]
 800e6a4:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <ILI9341_SendData+0x60>)
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	f7f4 f974 	bl	8002998 <HAL_GPIO_WritePin>
}
 800e6b0:	bf00      	nop
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200013fc 	.word	0x200013fc
 800e6bc:	20001400 	.word	0x20001400
 800e6c0:	200013f4 	.word	0x200013f4
 800e6c4:	200013f8 	.word	0x200013f8
 800e6c8:	2000139c 	.word	0x2000139c

0800e6cc <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	461a      	mov	r2, r3
 800e6da:	4623      	mov	r3, r4
 800e6dc:	80fb      	strh	r3, [r7, #6]
 800e6de:	4603      	mov	r3, r0
 800e6e0:	80bb      	strh	r3, [r7, #4]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	807b      	strh	r3, [r7, #2]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 800e6ea:	202a      	movs	r0, #42	; 0x2a
 800e6ec:	f7ff ff86 	bl	800e5fc <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 800e6f0:	88fb      	ldrh	r3, [r7, #6]
 800e6f2:	0a1b      	lsrs	r3, r3, #8
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7ff ffb3 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 800e6fe:	88fb      	ldrh	r3, [r7, #6]
 800e700:	b2db      	uxtb	r3, r3
 800e702:	4618      	mov	r0, r3
 800e704:	f7ff ffae 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800e708:	887b      	ldrh	r3, [r7, #2]
 800e70a:	0a1b      	lsrs	r3, r3, #8
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff ffa7 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800e716:	887b      	ldrh	r3, [r7, #2]
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7ff ffa2 	bl	800e664 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 800e720:	202b      	movs	r0, #43	; 0x2b
 800e722:	f7ff ff6b 	bl	800e5fc <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800e726:	88bb      	ldrh	r3, [r7, #4]
 800e728:	0a1b      	lsrs	r3, r3, #8
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff ff98 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 800e734:	88bb      	ldrh	r3, [r7, #4]
 800e736:	b2db      	uxtb	r3, r3
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff ff93 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800e73e:	883b      	ldrh	r3, [r7, #0]
 800e740:	0a1b      	lsrs	r3, r3, #8
 800e742:	b29b      	uxth	r3, r3
 800e744:	b2db      	uxtb	r3, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff ff8c 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 800e74c:	883b      	ldrh	r3, [r7, #0]
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff ff87 	bl	800e664 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800e756:	202c      	movs	r0, #44	; 0x2c
 800e758:	f7ff ff50 	bl	800e5fc <ILI9341_SendCommand>
}
 800e75c:	bf00      	nop
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	bd90      	pop	{r4, r7, pc}

0800e764 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	603b      	str	r3, [r7, #0]
 800e770:	4613      	mov	r3, r2
 800e772:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 800e774:	2258      	movs	r2, #88	; 0x58
 800e776:	68f9      	ldr	r1, [r7, #12]
 800e778:	4853      	ldr	r0, [pc, #332]	; (800e8c8 <ILI9341_Init+0x164>)
 800e77a:	f000 fde1 	bl	800f340 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 800e77e:	4a53      	ldr	r2, [pc, #332]	; (800e8cc <ILI9341_Init+0x168>)
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 800e784:	4a52      	ldr	r2, [pc, #328]	; (800e8d0 <ILI9341_Init+0x16c>)
 800e786:	88fb      	ldrh	r3, [r7, #6]
 800e788:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800e78a:	4a52      	ldr	r2, [pc, #328]	; (800e8d4 <ILI9341_Init+0x170>)
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 800e790:	4a51      	ldr	r2, [pc, #324]	; (800e8d8 <ILI9341_Init+0x174>)
 800e792:	8b3b      	ldrh	r3, [r7, #24]
 800e794:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800e796:	4b4d      	ldr	r3, [pc, #308]	; (800e8cc <ILI9341_Init+0x168>)
 800e798:	6818      	ldr	r0, [r3, #0]
 800e79a:	4b4d      	ldr	r3, [pc, #308]	; (800e8d0 <ILI9341_Init+0x16c>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	f7f4 f8f9 	bl	8002998 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800e7a6:	4a4d      	ldr	r2, [pc, #308]	; (800e8dc <ILI9341_Init+0x178>)
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 800e7ac:	4a4c      	ldr	r2, [pc, #304]	; (800e8e0 <ILI9341_Init+0x17c>)
 800e7ae:	8c3b      	ldrh	r3, [r7, #32]
 800e7b0:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 800e7b2:	8c3b      	ldrh	r3, [r7, #32]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	69f8      	ldr	r0, [r7, #28]
 800e7ba:	f7f4 f8ed 	bl	8002998 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 800e7be:	2001      	movs	r0, #1
 800e7c0:	f7ff ff1c 	bl	800e5fc <ILI9341_SendCommand>
   HAL_Delay(100);
 800e7c4:	2064      	movs	r0, #100	; 0x64
 800e7c6:	f7f3 fa23 	bl	8001c10 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800e7ca:	2028      	movs	r0, #40	; 0x28
 800e7cc:	f7ff ff16 	bl	800e5fc <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 800e7d0:	20c0      	movs	r0, #192	; 0xc0
 800e7d2:	f7ff ff13 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800e7d6:	2026      	movs	r0, #38	; 0x26
 800e7d8:	f7ff ff44 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 800e7dc:	20c1      	movs	r0, #193	; 0xc1
 800e7de:	f7ff ff0d 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 800e7e2:	2011      	movs	r0, #17
 800e7e4:	f7ff ff3e 	bl	800e664 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 800e7e8:	20c5      	movs	r0, #197	; 0xc5
 800e7ea:	f7ff ff07 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 800e7ee:	2035      	movs	r0, #53	; 0x35
 800e7f0:	f7ff ff38 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 800e7f4:	203e      	movs	r0, #62	; 0x3e
 800e7f6:	f7ff ff35 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 800e7fa:	20c7      	movs	r0, #199	; 0xc7
 800e7fc:	f7ff fefe 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 800e800:	20be      	movs	r0, #190	; 0xbe
 800e802:	f7ff ff2f 	bl	800e664 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800e806:	2036      	movs	r0, #54	; 0x36
 800e808:	f7ff fef8 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 800e80c:	2048      	movs	r0, #72	; 0x48
 800e80e:	f7ff ff29 	bl	800e664 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 800e812:	203a      	movs	r0, #58	; 0x3a
 800e814:	f7ff fef2 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800e818:	2055      	movs	r0, #85	; 0x55
 800e81a:	f7ff ff23 	bl	800e664 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 800e81e:	20b1      	movs	r0, #177	; 0xb1
 800e820:	f7ff feec 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData(0);
 800e824:	2000      	movs	r0, #0
 800e826:	f7ff ff1d 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800e82a:	201f      	movs	r0, #31
 800e82c:	f7ff ff1a 	bl	800e664 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 800e830:	202a      	movs	r0, #42	; 0x2a
 800e832:	f7ff fee3 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 800e836:	2000      	movs	r0, #0
 800e838:	f7ff ff14 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 800e83c:	2000      	movs	r0, #0
 800e83e:	f7ff ff11 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 800e842:	2000      	movs	r0, #0
 800e844:	f7ff ff0e 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800e848:	20ef      	movs	r0, #239	; 0xef
 800e84a:	f7ff ff0b 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800e84e:	202b      	movs	r0, #43	; 0x2b
 800e850:	f7ff fed4 	bl	800e5fc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 800e854:	2000      	movs	r0, #0
 800e856:	f7ff ff05 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800e85a:	2000      	movs	r0, #0
 800e85c:	f7ff ff02 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 800e860:	2001      	movs	r0, #1
 800e862:	f7ff feff 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800e866:	203f      	movs	r0, #63	; 0x3f
 800e868:	f7ff fefc 	bl	800e664 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 800e86c:	2034      	movs	r0, #52	; 0x34
 800e86e:	f7ff fec5 	bl	800e5fc <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 800e872:	20b7      	movs	r0, #183	; 0xb7
 800e874:	f7ff fec2 	bl	800e5fc <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800e878:	2007      	movs	r0, #7
 800e87a:	f7ff fef3 	bl	800e664 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800e87e:	20b6      	movs	r0, #182	; 0xb6
 800e880:	f7ff febc 	bl	800e5fc <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 800e884:	200a      	movs	r0, #10
 800e886:	f7ff feed 	bl	800e664 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800e88a:	2082      	movs	r0, #130	; 0x82
 800e88c:	f7ff feea 	bl	800e664 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 800e890:	2027      	movs	r0, #39	; 0x27
 800e892:	f7ff fee7 	bl	800e664 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800e896:	2000      	movs	r0, #0
 800e898:	f7ff fee4 	bl	800e664 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 800e89c:	2011      	movs	r0, #17
 800e89e:	f7ff fead 	bl	800e5fc <ILI9341_SendCommand>
   HAL_Delay(100);
 800e8a2:	2064      	movs	r0, #100	; 0x64
 800e8a4:	f7f3 f9b4 	bl	8001c10 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 800e8a8:	2029      	movs	r0, #41	; 0x29
 800e8aa:	f7ff fea7 	bl	800e5fc <ILI9341_SendCommand>
   HAL_Delay(100);
 800e8ae:	2064      	movs	r0, #100	; 0x64
 800e8b0:	f7f3 f9ae 	bl	8001c10 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 800e8b4:	202c      	movs	r0, #44	; 0x2c
 800e8b6:	f7ff fea1 	bl	800e5fc <ILI9341_SendCommand>
   HAL_Delay(5);
 800e8ba:	2005      	movs	r0, #5
 800e8bc:	f7f3 f9a8 	bl	8001c10 <HAL_Delay>
 }
 800e8c0:	bf00      	nop
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	2000139c 	.word	0x2000139c
 800e8cc:	200013f4 	.word	0x200013f4
 800e8d0:	200013f8 	.word	0x200013f8
 800e8d4:	200013fc 	.word	0x200013fc
 800e8d8:	20001400 	.word	0x20001400
 800e8dc:	20001404 	.word	0x20001404
 800e8e0:	20001408 	.word	0x20001408

0800e8e4 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	80fb      	strh	r3, [r7, #6]
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	80bb      	strh	r3, [r7, #4]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 800e8f6:	88bb      	ldrh	r3, [r7, #4]
 800e8f8:	88fa      	ldrh	r2, [r7, #6]
 800e8fa:	88b9      	ldrh	r1, [r7, #4]
 800e8fc:	88f8      	ldrh	r0, [r7, #6]
 800e8fe:	f7ff fee5 	bl	800e6cc <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 800e902:	887b      	ldrh	r3, [r7, #2]
 800e904:	0a1b      	lsrs	r3, r3, #8
 800e906:	b29b      	uxth	r3, r3
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff feaa 	bl	800e664 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 800e910:	887b      	ldrh	r3, [r7, #2]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff fea5 	bl	800e664 <ILI9341_SendData>
}
 800e91a:	bf00      	nop
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <ILI9341_Fill>:

//6. Fill the entire screen with a background color
void ILI9341_Fill(uint8_t* screen) {
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
	ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800e92c:	f240 133f 	movw	r3, #319	; 0x13f
 800e930:	22ef      	movs	r2, #239	; 0xef
 800e932:	2100      	movs	r1, #0
 800e934:	2000      	movs	r0, #0
 800e936:	f7ff fec9 	bl	800e6cc <ILI9341_SetCursorPosition>
	//Write byte using SPI

	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800e93a:	4b17      	ldr	r3, [pc, #92]	; (800e998 <ILI9341_Fill+0x74>)
 800e93c:	6818      	ldr	r0, [r3, #0]
 800e93e:	4b17      	ldr	r3, [pc, #92]	; (800e99c <ILI9341_Fill+0x78>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	2201      	movs	r2, #1
 800e944:	4619      	mov	r1, r3
 800e946:	f7f4 f827 	bl	8002998 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800e94a:	4b15      	ldr	r3, [pc, #84]	; (800e9a0 <ILI9341_Fill+0x7c>)
 800e94c:	6818      	ldr	r0, [r3, #0]
 800e94e:	4b15      	ldr	r3, [pc, #84]	; (800e9a4 <ILI9341_Fill+0x80>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	2200      	movs	r2, #0
 800e954:	4619      	mov	r1, r3
 800e956:	f7f4 f81f 	bl	8002998 <HAL_GPIO_WritePin>

	for(int lcv = 0; lcv < ILI9341_HEIGHT; lcv++){
 800e95a:	2300      	movs	r3, #0
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	e00a      	b.n	800e976 <ILI9341_Fill+0x52>
		HAL_SPI_Transmit(&lcdSPIhandle, screen, ILI9341_WIDTH * 2, 2000);
 800e960:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e964:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e968:	6879      	ldr	r1, [r7, #4]
 800e96a:	480f      	ldr	r0, [pc, #60]	; (800e9a8 <ILI9341_Fill+0x84>)
 800e96c:	f7f8 fa6a 	bl	8006e44 <HAL_SPI_Transmit>
	for(int lcv = 0; lcv < ILI9341_HEIGHT; lcv++){
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	3301      	adds	r3, #1
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800e97c:	dbf0      	blt.n	800e960 <ILI9341_Fill+0x3c>
	}

	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800e97e:	4b08      	ldr	r3, [pc, #32]	; (800e9a0 <ILI9341_Fill+0x7c>)
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <ILI9341_Fill+0x80>)
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	2201      	movs	r2, #1
 800e988:	4619      	mov	r1, r3
 800e98a:	f7f4 f805 	bl	8002998 <HAL_GPIO_WritePin>
}
 800e98e:	bf00      	nop
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	200013fc 	.word	0x200013fc
 800e99c:	20001400 	.word	0x20001400
 800e9a0:	200013f4 	.word	0x200013f4
 800e9a4:	200013f8 	.word	0x200013f8
 800e9a8:	2000139c 	.word	0x2000139c

0800e9ac <ILI9341_Fill_Line>:

void ILI9341_Fill_Line (uint8_t* each_line, unsigned int index) {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	1d3b      	adds	r3, r7, #4
 800e9b6:	6018      	str	r0, [r3, #0]
 800e9b8:	463b      	mov	r3, r7
 800e9ba:	6019      	str	r1, [r3, #0]
	ILI9341_SetCursorPosition(0, index,   ILI9341_WIDTH -1, ILI9341_HEIGHT-1);
 800e9bc:	463b      	mov	r3, r7
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	b299      	uxth	r1, r3
 800e9c2:	f240 133f 	movw	r3, #319	; 0x13f
 800e9c6:	22ef      	movs	r2, #239	; 0xef
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	f7ff fe7f 	bl	800e6cc <ILI9341_SetCursorPosition>
	//Write byte using SPI

	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800e9ce:	4b5f      	ldr	r3, [pc, #380]	; (800eb4c <ILI9341_Fill_Line+0x1a0>)
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	4b5f      	ldr	r3, [pc, #380]	; (800eb50 <ILI9341_Fill_Line+0x1a4>)
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f7f3 ffdd 	bl	8002998 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800e9de:	4b5d      	ldr	r3, [pc, #372]	; (800eb54 <ILI9341_Fill_Line+0x1a8>)
 800e9e0:	6818      	ldr	r0, [r3, #0]
 800e9e2:	4b5d      	ldr	r3, [pc, #372]	; (800eb58 <ILI9341_Fill_Line+0x1ac>)
 800e9e4:	881b      	ldrh	r3, [r3, #0]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	f7f3 ffd5 	bl	8002998 <HAL_GPIO_WritePin>

	uint16_t orig_line[ILI9341_WIDTH*2] = {0x0000};
 800e9ee:	f107 030c 	add.w	r3, r7, #12
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	f000 fcab 	bl	800f356 <memset>
	if (each_line[0] == 1){
 800ea00:	1d3b      	adds	r3, r7, #4
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d116      	bne.n	800ea38 <ILI9341_Fill_Line+0x8c>
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800ea10:	e00e      	b.n	800ea30 <ILI9341_Fill_Line+0x84>
			orig_line[15+lcv] = COLOR_RED;
 800ea12:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800ea16:	f103 020f 	add.w	r2, r3, #15
 800ea1a:	f107 030c 	add.w	r3, r7, #12
 800ea1e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800ea22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea26:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800ea30:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800ea34:	2b18      	cmp	r3, #24
 800ea36:	ddec      	ble.n	800ea12 <ILI9341_Fill_Line+0x66>
		}
	}
	if (each_line[1] == 1){
 800ea38:	1d3b      	adds	r3, r7, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d116      	bne.n	800ea72 <ILI9341_Fill_Line+0xc6>
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea44:	2300      	movs	r3, #0
 800ea46:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800ea4a:	e00e      	b.n	800ea6a <ILI9341_Fill_Line+0xbe>
			orig_line[60+lcv] = COLOR_PURPLE;
 800ea4c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800ea50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	f647 010f 	movw	r1, #30735	; 0x780f
 800ea5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea60:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800ea64:	3301      	adds	r3, #1
 800ea66:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800ea6a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800ea6e:	2b18      	cmp	r3, #24
 800ea70:	ddec      	ble.n	800ea4c <ILI9341_Fill_Line+0xa0>
		}
	}
	if (each_line[2] == 1){
 800ea72:	1d3b      	adds	r3, r7, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3302      	adds	r3, #2
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d116      	bne.n	800eaac <ILI9341_Fill_Line+0x100>
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800ea84:	e00e      	b.n	800eaa4 <ILI9341_Fill_Line+0xf8>
			orig_line[105+lcv] = COLOR_YELLOW;
 800ea86:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800ea8a:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800ea8e:	f107 030c 	add.w	r3, r7, #12
 800ea92:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800ea96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ea9a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800eaa4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800eaa8:	2b18      	cmp	r3, #24
 800eaaa:	ddec      	ble.n	800ea86 <ILI9341_Fill_Line+0xda>
		}
	}
	if (each_line[3] == 1){
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3303      	adds	r3, #3
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d115      	bne.n	800eae4 <ILI9341_Fill_Line+0x138>
		for(int lcv = 0; lcv < 25; lcv ++) {
 800eab8:	2300      	movs	r3, #0
 800eaba:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800eabe:	e00d      	b.n	800eadc <ILI9341_Fill_Line+0x130>
			orig_line[150+lcv] = COLOR_NAVY;
 800eac0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800eac4:	f103 0296 	add.w	r2, r3, #150	; 0x96
 800eac8:	f107 030c 	add.w	r3, r7, #12
 800eacc:	210f      	movs	r1, #15
 800eace:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int lcv = 0; lcv < 25; lcv ++) {
 800ead2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800ead6:	3301      	adds	r3, #1
 800ead8:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800eadc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800eae0:	2b18      	cmp	r3, #24
 800eae2:	dded      	ble.n	800eac0 <ILI9341_Fill_Line+0x114>
		}
	}
	if (each_line[4] == 1){
 800eae4:	1d3b      	adds	r3, r7, #4
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	3304      	adds	r3, #4
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d116      	bne.n	800eb1e <ILI9341_Fill_Line+0x172>
		for(int lcv = 0; lcv < 25; lcv ++) {
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800eaf6:	e00e      	b.n	800eb16 <ILI9341_Fill_Line+0x16a>
			orig_line[195+lcv] = COLOR_WHITE;
 800eaf8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800eafc:	f103 02c3 	add.w	r2, r3, #195	; 0xc3
 800eb00:	f107 030c 	add.w	r3, r7, #12
 800eb04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int lcv = 0; lcv < 25; lcv ++) {
 800eb0c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800eb10:	3301      	adds	r3, #1
 800eb12:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800eb16:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800eb1a:	2b18      	cmp	r3, #24
 800eb1c:	ddec      	ble.n	800eaf8 <ILI9341_Fill_Line+0x14c>
		}
	}

	HAL_SPI_Transmit(&lcdSPIhandle, orig_line, ILI9341_WIDTH*2, 2000);
 800eb1e:	f107 010c 	add.w	r1, r7, #12
 800eb22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eb26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb2a:	480c      	ldr	r0, [pc, #48]	; (800eb5c <ILI9341_Fill_Line+0x1b0>)
 800eb2c:	f7f8 f98a 	bl	8006e44 <HAL_SPI_Transmit>

	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800eb30:	4b08      	ldr	r3, [pc, #32]	; (800eb54 <ILI9341_Fill_Line+0x1a8>)
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	4b08      	ldr	r3, [pc, #32]	; (800eb58 <ILI9341_Fill_Line+0x1ac>)
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	f7f3 ff2c 	bl	8002998 <HAL_GPIO_WritePin>
}
 800eb40:	bf00      	nop
 800eb42:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	200013fc 	.word	0x200013fc
 800eb50:	20001400 	.word	0x20001400
 800eb54:	200013f4 	.word	0x200013f4
 800eb58:	200013f8 	.word	0x200013f8
 800eb5c:	2000139c 	.word	0x2000139c

0800eb60 <ILI9341_Fill_Rect>:

//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	3301      	adds	r3, #1
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	1a8a      	subs	r2, r1, r2
 800eb7c:	3201      	adds	r2, #1
 800eb7e:	fb02 f303 	mul.w	r3, r2, r3
 800eb82:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800eb8a:	d902      	bls.n	800eb92 <ILI9341_Fill_Rect+0x32>
 800eb8c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800eb90:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	b298      	uxth	r0, r3
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	b299      	uxth	r1, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	f7ff fd93 	bl	800e6cc <ILI9341_SetCursorPosition>
	while (n) {
 800eba6:	e00e      	b.n	800ebc6 <ILI9341_Fill_Rect+0x66>
			n--;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 800ebae:	8c3b      	ldrh	r3, [r7, #32]
 800ebb0:	0a1b      	lsrs	r3, r3, #8
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff fd54 	bl	800e664 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800ebbc:	8c3b      	ldrh	r3, [r7, #32]
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff fd4f 	bl	800e664 <ILI9341_SendData>
	while (n) {
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1ed      	bne.n	800eba8 <ILI9341_Fill_Rect+0x48>
	}
}
 800ebcc:	bf00      	nop
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 800ebd4:	b590      	push	{r4, r7, lr}
 800ebd6:	b087      	sub	sp, #28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4604      	mov	r4, r0
 800ebdc:	4608      	mov	r0, r1
 800ebde:	4611      	mov	r1, r2
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	4623      	mov	r3, r4
 800ebe4:	80fb      	strh	r3, [r7, #6]
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	80bb      	strh	r3, [r7, #4]
 800ebea:	460b      	mov	r3, r1
 800ebec:	807b      	strh	r3, [r7, #2]
 800ebee:	4613      	mov	r3, r2
 800ebf0:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 800ebf2:	887b      	ldrh	r3, [r7, #2]
 800ebf4:	f1c3 0301 	rsb	r3, r3, #1
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800ec00:	887b      	ldrh	r3, [r7, #2]
 800ec02:	461a      	mov	r2, r3
 800ec04:	03d2      	lsls	r2, r2, #15
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 800ec12:	887b      	ldrh	r3, [r7, #2]
 800ec14:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 800ec16:	e083      	b.n	800ed20 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800ec18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	db0e      	blt.n	800ec3e <fillCircleHelper+0x6a>
      y--;
 800ec20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3b01      	subs	r3, #1
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800ec2c:	8a7b      	ldrh	r3, [r7, #18]
 800ec2e:	3302      	adds	r3, #2
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800ec34:	8afa      	ldrh	r2, [r7, #22]
 800ec36:	8a7b      	ldrh	r3, [r7, #18]
 800ec38:	4413      	add	r3, r2
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800ec3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	3301      	adds	r3, #1
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800ec4a:	8abb      	ldrh	r3, [r7, #20]
 800ec4c:	3302      	adds	r3, #2
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800ec52:	8afa      	ldrh	r2, [r7, #22]
 800ec54:	8abb      	ldrh	r3, [r7, #20]
 800ec56:	4413      	add	r3, r2
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 800ec5c:	787b      	ldrb	r3, [r7, #1]
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d02b      	beq.n	800ecbe <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800ec66:	88fa      	ldrh	r2, [r7, #6]
 800ec68:	8a3b      	ldrh	r3, [r7, #16]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	b218      	sxth	r0, r3
 800ec70:	88ba      	ldrh	r2, [r7, #4]
 800ec72:	89fb      	ldrh	r3, [r7, #14]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	b219      	sxth	r1, r3
 800ec7a:	89fb      	ldrh	r3, [r7, #14]
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec82:	4413      	add	r3, r2
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	3301      	adds	r3, #1
 800ec88:	b29b      	uxth	r3, r3
 800ec8a:	b21a      	sxth	r2, r3
 800ec8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ec8e:	f000 f91f 	bl	800eed0 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 800ec92:	88fa      	ldrh	r2, [r7, #6]
 800ec94:	89fb      	ldrh	r3, [r7, #14]
 800ec96:	4413      	add	r3, r2
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	b218      	sxth	r0, r3
 800ec9c:	88ba      	ldrh	r2, [r7, #4]
 800ec9e:	8a3b      	ldrh	r3, [r7, #16]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	b219      	sxth	r1, r3
 800eca6:	8a3b      	ldrh	r3, [r7, #16]
 800eca8:	005b      	lsls	r3, r3, #1
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecae:	4413      	add	r3, r2
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	b21a      	sxth	r2, r3
 800ecb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ecba:	f000 f909 	bl	800eed0 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 800ecbe:	787b      	ldrb	r3, [r7, #1]
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d02b      	beq.n	800ed20 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800ecc8:	88fa      	ldrh	r2, [r7, #6]
 800ecca:	8a3b      	ldrh	r3, [r7, #16]
 800eccc:	1ad3      	subs	r3, r2, r3
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	b218      	sxth	r0, r3
 800ecd2:	88ba      	ldrh	r2, [r7, #4]
 800ecd4:	89fb      	ldrh	r3, [r7, #14]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	b219      	sxth	r1, r3
 800ecdc:	89fb      	ldrh	r3, [r7, #14]
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ece4:	4413      	add	r3, r2
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	3301      	adds	r3, #1
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	b21a      	sxth	r2, r3
 800ecee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ecf0:	f000 f8ee 	bl	800eed0 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800ecf4:	88fa      	ldrh	r2, [r7, #6]
 800ecf6:	89fb      	ldrh	r3, [r7, #14]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	b218      	sxth	r0, r3
 800ecfe:	88ba      	ldrh	r2, [r7, #4]
 800ed00:	8a3b      	ldrh	r3, [r7, #16]
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	b219      	sxth	r1, r3
 800ed08:	8a3b      	ldrh	r3, [r7, #16]
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed10:	4413      	add	r3, r2
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	3301      	adds	r3, #1
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	b21a      	sxth	r2, r3
 800ed1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed1c:	f000 f8d8 	bl	800eed0 <ILI9341_drawFastVLine>
  while (x<y) {
 800ed20:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ed24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	f6ff af75 	blt.w	800ec18 <fillCircleHelper+0x44>
    }
  }
}
 800ed2e:	bf00      	nop
 800ed30:	371c      	adds	r7, #28
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd90      	pop	{r4, r7, pc}

0800ed36 <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800ed36:	b590      	push	{r4, r7, lr}
 800ed38:	b085      	sub	sp, #20
 800ed3a:	af02      	add	r7, sp, #8
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	4608      	mov	r0, r1
 800ed40:	4611      	mov	r1, r2
 800ed42:	461a      	mov	r2, r3
 800ed44:	4623      	mov	r3, r4
 800ed46:	80fb      	strh	r3, [r7, #6]
 800ed48:	4603      	mov	r3, r0
 800ed4a:	80bb      	strh	r3, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	807b      	strh	r3, [r7, #2]
 800ed50:	4613      	mov	r3, r2
 800ed52:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 800ed54:	88ba      	ldrh	r2, [r7, #4]
 800ed56:	887b      	ldrh	r3, [r7, #2]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	b219      	sxth	r1, r3
 800ed5e:	887b      	ldrh	r3, [r7, #2]
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	3301      	adds	r3, #1
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	b21a      	sxth	r2, r3
 800ed6a:	883b      	ldrh	r3, [r7, #0]
 800ed6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ed70:	f000 f8ae 	bl	800eed0 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 800ed74:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ed78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ed7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ed80:	883b      	ldrh	r3, [r7, #0]
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	2300      	movs	r3, #0
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	2303      	movs	r3, #3
 800ed8a:	f7ff ff23 	bl	800ebd4 <fillCircleHelper>
}
 800ed8e:	bf00      	nop
 800ed90:	370c      	adds	r7, #12
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd90      	pop	{r4, r7, pc}

0800ed96 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800ed96:	b590      	push	{r4, r7, lr}
 800ed98:	b089      	sub	sp, #36	; 0x24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	4608      	mov	r0, r1
 800eda0:	4611      	mov	r1, r2
 800eda2:	461a      	mov	r2, r3
 800eda4:	4623      	mov	r3, r4
 800eda6:	80fb      	strh	r3, [r7, #6]
 800eda8:	4603      	mov	r3, r0
 800edaa:	80bb      	strh	r3, [r7, #4]
 800edac:	460b      	mov	r3, r1
 800edae:	807b      	strh	r3, [r7, #2]
 800edb0:	4613      	mov	r3, r2
 800edb2:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800edb4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800edb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800edc2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800edc6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800edca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800edce:	1acb      	subs	r3, r1, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	bfb8      	it	lt
 800edd4:	425b      	neglt	r3, r3
 800edd6:	429a      	cmp	r2, r3
 800edd8:	bfcc      	ite	gt
 800edda:	2301      	movgt	r3, #1
 800eddc:	2300      	movle	r3, #0
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	837b      	strh	r3, [r7, #26]
  if (steep) {
 800ede2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00b      	beq.n	800ee02 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800edea:	88fb      	ldrh	r3, [r7, #6]
 800edec:	833b      	strh	r3, [r7, #24]
 800edee:	88bb      	ldrh	r3, [r7, #4]
 800edf0:	80fb      	strh	r3, [r7, #6]
 800edf2:	8b3b      	ldrh	r3, [r7, #24]
 800edf4:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800edf6:	887b      	ldrh	r3, [r7, #2]
 800edf8:	82fb      	strh	r3, [r7, #22]
 800edfa:	883b      	ldrh	r3, [r7, #0]
 800edfc:	807b      	strh	r3, [r7, #2]
 800edfe:	8afb      	ldrh	r3, [r7, #22]
 800ee00:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 800ee02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ee06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	dd0b      	ble.n	800ee26 <ILI9341_drawLine+0x90>
    swap(x0, x1);
 800ee0e:	88fb      	ldrh	r3, [r7, #6]
 800ee10:	82bb      	strh	r3, [r7, #20]
 800ee12:	887b      	ldrh	r3, [r7, #2]
 800ee14:	80fb      	strh	r3, [r7, #6]
 800ee16:	8abb      	ldrh	r3, [r7, #20]
 800ee18:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 800ee1a:	88bb      	ldrh	r3, [r7, #4]
 800ee1c:	827b      	strh	r3, [r7, #18]
 800ee1e:	883b      	ldrh	r3, [r7, #0]
 800ee20:	80bb      	strh	r3, [r7, #4]
 800ee22:	8a7b      	ldrh	r3, [r7, #18]
 800ee24:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800ee26:	887a      	ldrh	r2, [r7, #2]
 800ee28:	88fb      	ldrh	r3, [r7, #6]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800ee30:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ee34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	bfb8      	it	lt
 800ee3e:	425b      	neglt	r3, r3
 800ee40:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 800ee42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ee46:	0fda      	lsrs	r2, r3, #31
 800ee48:	4413      	add	r3, r2
 800ee4a:	105b      	asrs	r3, r3, #1
 800ee4c:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 800ee4e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ee52:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	da02      	bge.n	800ee60 <ILI9341_drawLine+0xca>
    ystep = 1;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	83bb      	strh	r3, [r7, #28]
 800ee5e:	e02d      	b.n	800eebc <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 800ee60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee64:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 800ee66:	e029      	b.n	800eebc <ILI9341_drawLine+0x126>
    if (steep) {
 800ee68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d006      	beq.n	800ee7e <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 800ee70:	88bb      	ldrh	r3, [r7, #4]
 800ee72:	88f9      	ldrh	r1, [r7, #6]
 800ee74:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7ff fd34 	bl	800e8e4 <ILI9341_DrawPixel>
 800ee7c:	e005      	b.n	800ee8a <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 800ee7e:	88fb      	ldrh	r3, [r7, #6]
 800ee80:	88b9      	ldrh	r1, [r7, #4]
 800ee82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff fd2d 	bl	800e8e4 <ILI9341_DrawPixel>
    }
    err -= dy;
 800ee8a:	8bfa      	ldrh	r2, [r7, #30]
 800ee8c:	89fb      	ldrh	r3, [r7, #14]
 800ee8e:	1ad3      	subs	r3, r2, r3
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 800ee94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	da09      	bge.n	800eeb0 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 800ee9c:	88ba      	ldrh	r2, [r7, #4]
 800ee9e:	8bbb      	ldrh	r3, [r7, #28]
 800eea0:	4413      	add	r3, r2
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800eea6:	8bfa      	ldrh	r2, [r7, #30]
 800eea8:	8a3b      	ldrh	r3, [r7, #16]
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 800eeb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	80fb      	strh	r3, [r7, #6]
 800eebc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	ddcf      	ble.n	800ee68 <ILI9341_drawLine+0xd2>
    }
  }
}	
 800eec8:	bf00      	nop
 800eeca:	3724      	adds	r7, #36	; 0x24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd90      	pop	{r4, r7, pc}

0800eed0 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800eed0:	b590      	push	{r4, r7, lr}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af02      	add	r7, sp, #8
 800eed6:	4604      	mov	r4, r0
 800eed8:	4608      	mov	r0, r1
 800eeda:	4611      	mov	r1, r2
 800eedc:	461a      	mov	r2, r3
 800eede:	4623      	mov	r3, r4
 800eee0:	80fb      	strh	r3, [r7, #6]
 800eee2:	4603      	mov	r3, r0
 800eee4:	80bb      	strh	r3, [r7, #4]
 800eee6:	460b      	mov	r3, r1
 800eee8:	807b      	strh	r3, [r7, #2]
 800eeea:	4613      	mov	r3, r2
 800eeec:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 800eeee:	88ba      	ldrh	r2, [r7, #4]
 800eef0:	887b      	ldrh	r3, [r7, #2]
 800eef2:	4413      	add	r3, r2
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	3b01      	subs	r3, #1
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	b21c      	sxth	r4, r3
 800eefc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ef00:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ef04:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ef08:	883b      	ldrh	r3, [r7, #0]
 800ef0a:	9300      	str	r3, [sp, #0]
 800ef0c:	4623      	mov	r3, r4
 800ef0e:	f7ff ff42 	bl	800ed96 <ILI9341_drawLine>
}
 800ef12:	bf00      	nop
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd90      	pop	{r4, r7, pc}
	...

0800ef1c <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800ef1c:	b5b0      	push	{r4, r5, r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	4604      	mov	r4, r0
 800ef24:	4608      	mov	r0, r1
 800ef26:	4611      	mov	r1, r2
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4623      	mov	r3, r4
 800ef2c:	80fb      	strh	r3, [r7, #6]
 800ef2e:	4603      	mov	r3, r0
 800ef30:	80bb      	strh	r3, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	70fb      	strb	r3, [r7, #3]
 800ef36:	4613      	mov	r3, r2
 800ef38:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800ef3a:	4b9a      	ldr	r3, [pc, #616]	; (800f1a4 <ILI9341_drawChar+0x288>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d003      	beq.n	800ef4a <ILI9341_drawChar+0x2e>
 800ef42:	4b98      	ldr	r3, [pc, #608]	; (800f1a4 <ILI9341_drawChar+0x288>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d121      	bne.n	800ef8e <ILI9341_drawChar+0x72>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800ef4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef4e:	2bef      	cmp	r3, #239	; 0xef
 800ef50:	f300 8121 	bgt.w	800f196 <ILI9341_drawChar+0x27a>
 800ef54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ef58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ef5c:	f280 811b 	bge.w	800f196 <ILI9341_drawChar+0x27a>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 800ef60:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800ef64:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800ef68:	4613      	mov	r3, r2
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	440b      	add	r3, r1
 800ef72:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f2c0 810e 	blt.w	800f196 <ILI9341_drawChar+0x27a>
     ((y + 8 * size - 1) < 0))   // Clip top
 800ef7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ef7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	4413      	add	r3, r2
 800ef86:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	da23      	bge.n	800efd4 <ILI9341_drawChar+0xb8>
    return;
 800ef8c:	e103      	b.n	800f196 <ILI9341_drawChar+0x27a>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 800ef8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ef92:	2bef      	cmp	r3, #239	; 0xef
 800ef94:	f300 8101 	bgt.w	800f19a <ILI9341_drawChar+0x27e>
 800ef98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800efa0:	f280 80fb 	bge.w	800f19a <ILI9341_drawChar+0x27e>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 800efa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800efa8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800efac:	4613      	mov	r3, r2
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	4413      	add	r3, r2
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	440b      	add	r3, r1
 800efb6:	3b01      	subs	r3, #1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f2c0 80ee 	blt.w	800f19a <ILI9341_drawChar+0x27e>
     ((x + 8 * size - 1) < 0))   // Clip top
 800efbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	4413      	add	r3, r2
 800efca:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f2c0 80e4 	blt.w	800f19a <ILI9341_drawChar+0x27e>
 800efd2:	e000      	b.n	800efd6 <ILI9341_drawChar+0xba>
		if((x >= ILI9341_WIDTH)            || // Clip right
 800efd4:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800efd6:	4b74      	ldr	r3, [pc, #464]	; (800f1a8 <ILI9341_drawChar+0x28c>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f083 0301 	eor.w	r3, r3, #1
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d005      	beq.n	800eff0 <ILI9341_drawChar+0xd4>
 800efe4:	78fb      	ldrb	r3, [r7, #3]
 800efe6:	2baf      	cmp	r3, #175	; 0xaf
 800efe8:	d902      	bls.n	800eff0 <ILI9341_drawChar+0xd4>
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	3301      	adds	r3, #1
 800efee:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800eff0:	2300      	movs	r3, #0
 800eff2:	73fb      	strb	r3, [r7, #15]
 800eff4:	e0c9      	b.n	800f18a <ILI9341_drawChar+0x26e>
    uint8_t line;
    if (i == 5) 
 800eff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800effa:	2b05      	cmp	r3, #5
 800effc:	d102      	bne.n	800f004 <ILI9341_drawChar+0xe8>
      line = 0x0;
 800effe:	2300      	movs	r3, #0
 800f000:	73bb      	strb	r3, [r7, #14]
 800f002:	e00b      	b.n	800f01c <ILI9341_drawChar+0x100>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 800f004:	78fa      	ldrb	r2, [r7, #3]
 800f006:	4613      	mov	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	4413      	add	r3, r2
 800f00c:	461a      	mov	r2, r3
 800f00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f012:	4413      	add	r3, r2
 800f014:	4a65      	ldr	r2, [pc, #404]	; (800f1ac <ILI9341_drawChar+0x290>)
 800f016:	4413      	add	r3, r2
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800f01c:	2300      	movs	r3, #0
 800f01e:	737b      	strb	r3, [r7, #13]
 800f020:	e0a8      	b.n	800f174 <ILI9341_drawChar+0x258>
      if (line & 0x1) {
 800f022:	7bbb      	ldrb	r3, [r7, #14]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d04b      	beq.n	800f0c4 <ILI9341_drawChar+0x1a8>
        if (size == 1) // default size
 800f02c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f030:	2b01      	cmp	r3, #1
 800f032:	d110      	bne.n	800f056 <ILI9341_drawChar+0x13a>
          ILI9341_DrawPixel(x+i, y+j, color);
 800f034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f038:	b29a      	uxth	r2, r3
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	4413      	add	r3, r2
 800f03e:	b298      	uxth	r0, r3
 800f040:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f044:	b29a      	uxth	r2, r3
 800f046:	88bb      	ldrh	r3, [r7, #4]
 800f048:	4413      	add	r3, r2
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	883a      	ldrh	r2, [r7, #0]
 800f04e:	4619      	mov	r1, r3
 800f050:	f7ff fc48 	bl	800e8e4 <ILI9341_DrawPixel>
 800f054:	e085      	b.n	800f162 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 800f056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f05e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f062:	fb01 f303 	mul.w	r3, r1, r3
 800f066:	4413      	add	r3, r2
 800f068:	4618      	mov	r0, r3
 800f06a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f06e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f072:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f076:	fb01 f303 	mul.w	r3, r1, r3
 800f07a:	4413      	add	r3, r2
 800f07c:	461c      	mov	r4, r3
 800f07e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f086:	441a      	add	r2, r3
 800f088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f08c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f090:	fb01 f303 	mul.w	r3, r1, r3
 800f094:	4413      	add	r3, r2
 800f096:	461d      	mov	r5, r3
 800f098:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f0a2:	441a      	add	r2, r3
 800f0a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f0a8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f0ac:	fb01 f303 	mul.w	r3, r1, r3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	883b      	ldrh	r3, [r7, #0]
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	462a      	mov	r2, r5
 800f0bc:	4621      	mov	r1, r4
 800f0be:	f7ff fd4f 	bl	800eb60 <ILI9341_Fill_Rect>
 800f0c2:	e04e      	b.n	800f162 <ILI9341_drawChar+0x246>
        } 
      } else if (bg != color) {
 800f0c4:	8c3a      	ldrh	r2, [r7, #32]
 800f0c6:	883b      	ldrh	r3, [r7, #0]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d04a      	beq.n	800f162 <ILI9341_drawChar+0x246>
        if (size == 1) // default size
 800f0cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d110      	bne.n	800f0f6 <ILI9341_drawChar+0x1da>
          ILI9341_DrawPixel(x+i, y+j, bg);
 800f0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	4413      	add	r3, r2
 800f0de:	b298      	uxth	r0, r3
 800f0e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	88bb      	ldrh	r3, [r7, #4]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	8c3a      	ldrh	r2, [r7, #32]
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	f7ff fbf8 	bl	800e8e4 <ILI9341_DrawPixel>
 800f0f4:	e035      	b.n	800f162 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800f0f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0fe:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f102:	fb01 f303 	mul.w	r3, r1, r3
 800f106:	4413      	add	r3, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f10e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f112:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f116:	fb01 f303 	mul.w	r3, r1, r3
 800f11a:	4413      	add	r3, r2
 800f11c:	461c      	mov	r4, r3
 800f11e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f126:	441a      	add	r2, r3
 800f128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f12c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f130:	fb01 f303 	mul.w	r3, r1, r3
 800f134:	4413      	add	r3, r2
 800f136:	461d      	mov	r5, r3
 800f138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f142:	441a      	add	r2, r3
 800f144:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f148:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800f14c:	fb01 f303 	mul.w	r3, r1, r3
 800f150:	4413      	add	r3, r2
 800f152:	461a      	mov	r2, r3
 800f154:	8c3b      	ldrh	r3, [r7, #32]
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	4613      	mov	r3, r2
 800f15a:	462a      	mov	r2, r5
 800f15c:	4621      	mov	r1, r4
 800f15e:	f7ff fcff 	bl	800eb60 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 800f162:	7bbb      	ldrb	r3, [r7, #14]
 800f164:	085b      	lsrs	r3, r3, #1
 800f166:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 800f168:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	3301      	adds	r3, #1
 800f170:	b2db      	uxtb	r3, r3
 800f172:	737b      	strb	r3, [r7, #13]
 800f174:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f178:	2b07      	cmp	r3, #7
 800f17a:	f77f af52 	ble.w	800f022 <ILI9341_drawChar+0x106>
  for (int8_t i=0; i<6; i++ ) {
 800f17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f182:	b2db      	uxtb	r3, r3
 800f184:	3301      	adds	r3, #1
 800f186:	b2db      	uxtb	r3, r3
 800f188:	73fb      	strb	r3, [r7, #15]
 800f18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f18e:	2b05      	cmp	r3, #5
 800f190:	f77f af31 	ble.w	800eff6 <ILI9341_drawChar+0xda>
 800f194:	e002      	b.n	800f19c <ILI9341_drawChar+0x280>
    return;
 800f196:	bf00      	nop
 800f198:	e000      	b.n	800f19c <ILI9341_drawChar+0x280>
    return;
 800f19a:	bf00      	nop
    }
  }
}
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	20000034 	.word	0x20000034
 800f1a8:	20001399 	.word	0x20001399
 800f1ac:	0800f6bc 	.word	0x0800f6bc

0800f1b0 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 800f1b0:	b590      	push	{r4, r7, lr}
 800f1b2:	b089      	sub	sp, #36	; 0x24
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4603      	mov	r3, r0
 800f1c0:	817b      	strh	r3, [r7, #10]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	813b      	strh	r3, [r7, #8]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 800f1ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	0052      	lsls	r2, r2, #1
 800f1d4:	4413      	add	r3, r2
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800f1dc:	2300      	movs	r3, #0
 800f1de:	82fb      	strh	r3, [r7, #22]
 800f1e0:	e01a      	b.n	800f218 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 800f1e2:	8abb      	ldrh	r3, [r7, #20]
 800f1e4:	8afa      	ldrh	r2, [r7, #22]
 800f1e6:	fb12 f303 	smulbb	r3, r2, r3
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	897b      	ldrh	r3, [r7, #10]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	b218      	sxth	r0, r3
 800f1f4:	8afb      	ldrh	r3, [r7, #22]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	781a      	ldrb	r2, [r3, #0]
 800f1fc:	88fc      	ldrh	r4, [r7, #6]
 800f1fe:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800f202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f206:	9301      	str	r3, [sp, #4]
 800f208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	4623      	mov	r3, r4
 800f20e:	f7ff fe85 	bl	800ef1c <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800f212:	8afb      	ldrh	r3, [r7, #22]
 800f214:	3301      	adds	r3, #1
 800f216:	82fb      	strh	r3, [r7, #22]
 800f218:	8afb      	ldrh	r3, [r7, #22]
 800f21a:	2b27      	cmp	r3, #39	; 0x27
 800f21c:	d805      	bhi.n	800f22a <ILI9341_printText+0x7a>
 800f21e:	8afb      	ldrh	r3, [r7, #22]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	4413      	add	r3, r2
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1db      	bne.n	800f1e2 <ILI9341_printText+0x32>
	}
}
 800f22a:	bf00      	nop
 800f22c:	371c      	adds	r7, #28
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd90      	pop	{r4, r7, pc}
	...

0800f234 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	4603      	mov	r3, r0
 800f23c:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 800f23e:	79fb      	ldrb	r3, [r7, #7]
 800f240:	3b01      	subs	r3, #1
 800f242:	2b03      	cmp	r3, #3
 800f244:	d832      	bhi.n	800f2ac <ILI9341_setRotation+0x78>
 800f246:	a201      	add	r2, pc, #4	; (adr r2, 800f24c <ILI9341_setRotation+0x18>)
 800f248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24c:	0800f25d 	.word	0x0800f25d
 800f250:	0800f271 	.word	0x0800f271
 800f254:	0800f285 	.word	0x0800f285
 800f258:	0800f299 	.word	0x0800f299
	{
		case 1:
			rotationNum = 1;
 800f25c:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <ILI9341_setRotation+0x94>)
 800f25e:	2201      	movs	r2, #1
 800f260:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800f262:	2036      	movs	r0, #54	; 0x36
 800f264:	f7ff f9ca 	bl	800e5fc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800f268:	2088      	movs	r0, #136	; 0x88
 800f26a:	f7ff f9fb 	bl	800e664 <ILI9341_SendData>
			break;
 800f26e:	e027      	b.n	800f2c0 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 800f270:	4b15      	ldr	r3, [pc, #84]	; (800f2c8 <ILI9341_setRotation+0x94>)
 800f272:	2202      	movs	r2, #2
 800f274:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800f276:	2036      	movs	r0, #54	; 0x36
 800f278:	f7ff f9c0 	bl	800e5fc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800f27c:	2028      	movs	r0, #40	; 0x28
 800f27e:	f7ff f9f1 	bl	800e664 <ILI9341_SendData>
			break;
 800f282:	e01d      	b.n	800f2c0 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 800f284:	4b10      	ldr	r3, [pc, #64]	; (800f2c8 <ILI9341_setRotation+0x94>)
 800f286:	2203      	movs	r2, #3
 800f288:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800f28a:	2036      	movs	r0, #54	; 0x36
 800f28c:	f7ff f9b6 	bl	800e5fc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 800f290:	2048      	movs	r0, #72	; 0x48
 800f292:	f7ff f9e7 	bl	800e664 <ILI9341_SendData>
			break;
 800f296:	e013      	b.n	800f2c0 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 800f298:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <ILI9341_setRotation+0x94>)
 800f29a:	2204      	movs	r2, #4
 800f29c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800f29e:	2036      	movs	r0, #54	; 0x36
 800f2a0:	f7ff f9ac 	bl	800e5fc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800f2a4:	20e8      	movs	r0, #232	; 0xe8
 800f2a6:	f7ff f9dd 	bl	800e664 <ILI9341_SendData>
			break;
 800f2aa:	e009      	b.n	800f2c0 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 800f2ac:	4b06      	ldr	r3, [pc, #24]	; (800f2c8 <ILI9341_setRotation+0x94>)
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800f2b2:	2036      	movs	r0, #54	; 0x36
 800f2b4:	f7ff f9a2 	bl	800e5fc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800f2b8:	2088      	movs	r0, #136	; 0x88
 800f2ba:	f7ff f9d3 	bl	800e664 <ILI9341_SendData>
			break;
 800f2be:	bf00      	nop
	}
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20000034 	.word	0x20000034

0800f2cc <__errno>:
 800f2cc:	4b01      	ldr	r3, [pc, #4]	; (800f2d4 <__errno+0x8>)
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	4770      	bx	lr
 800f2d2:	bf00      	nop
 800f2d4:	20000038 	.word	0x20000038

0800f2d8 <__libc_init_array>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	4e0d      	ldr	r6, [pc, #52]	; (800f310 <__libc_init_array+0x38>)
 800f2dc:	4c0d      	ldr	r4, [pc, #52]	; (800f314 <__libc_init_array+0x3c>)
 800f2de:	1ba4      	subs	r4, r4, r6
 800f2e0:	10a4      	asrs	r4, r4, #2
 800f2e2:	2500      	movs	r5, #0
 800f2e4:	42a5      	cmp	r5, r4
 800f2e6:	d109      	bne.n	800f2fc <__libc_init_array+0x24>
 800f2e8:	4e0b      	ldr	r6, [pc, #44]	; (800f318 <__libc_init_array+0x40>)
 800f2ea:	4c0c      	ldr	r4, [pc, #48]	; (800f31c <__libc_init_array+0x44>)
 800f2ec:	f000 f8f6 	bl	800f4dc <_init>
 800f2f0:	1ba4      	subs	r4, r4, r6
 800f2f2:	10a4      	asrs	r4, r4, #2
 800f2f4:	2500      	movs	r5, #0
 800f2f6:	42a5      	cmp	r5, r4
 800f2f8:	d105      	bne.n	800f306 <__libc_init_array+0x2e>
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f300:	4798      	blx	r3
 800f302:	3501      	adds	r5, #1
 800f304:	e7ee      	b.n	800f2e4 <__libc_init_array+0xc>
 800f306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f30a:	4798      	blx	r3
 800f30c:	3501      	adds	r5, #1
 800f30e:	e7f2      	b.n	800f2f6 <__libc_init_array+0x1e>
 800f310:	0800fc24 	.word	0x0800fc24
 800f314:	0800fc24 	.word	0x0800fc24
 800f318:	0800fc24 	.word	0x0800fc24
 800f31c:	0800fc28 	.word	0x0800fc28

0800f320 <malloc>:
 800f320:	4b02      	ldr	r3, [pc, #8]	; (800f32c <malloc+0xc>)
 800f322:	4601      	mov	r1, r0
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	f000 b86d 	b.w	800f404 <_malloc_r>
 800f32a:	bf00      	nop
 800f32c:	20000038 	.word	0x20000038

0800f330 <free>:
 800f330:	4b02      	ldr	r3, [pc, #8]	; (800f33c <free+0xc>)
 800f332:	4601      	mov	r1, r0
 800f334:	6818      	ldr	r0, [r3, #0]
 800f336:	f000 b817 	b.w	800f368 <_free_r>
 800f33a:	bf00      	nop
 800f33c:	20000038 	.word	0x20000038

0800f340 <memcpy>:
 800f340:	b510      	push	{r4, lr}
 800f342:	1e43      	subs	r3, r0, #1
 800f344:	440a      	add	r2, r1
 800f346:	4291      	cmp	r1, r2
 800f348:	d100      	bne.n	800f34c <memcpy+0xc>
 800f34a:	bd10      	pop	{r4, pc}
 800f34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f354:	e7f7      	b.n	800f346 <memcpy+0x6>

0800f356 <memset>:
 800f356:	4402      	add	r2, r0
 800f358:	4603      	mov	r3, r0
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d100      	bne.n	800f360 <memset+0xa>
 800f35e:	4770      	bx	lr
 800f360:	f803 1b01 	strb.w	r1, [r3], #1
 800f364:	e7f9      	b.n	800f35a <memset+0x4>
	...

0800f368 <_free_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4605      	mov	r5, r0
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d045      	beq.n	800f3fc <_free_r+0x94>
 800f370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f374:	1f0c      	subs	r4, r1, #4
 800f376:	2b00      	cmp	r3, #0
 800f378:	bfb8      	it	lt
 800f37a:	18e4      	addlt	r4, r4, r3
 800f37c:	f000 f8ac 	bl	800f4d8 <__malloc_lock>
 800f380:	4a1f      	ldr	r2, [pc, #124]	; (800f400 <_free_r+0x98>)
 800f382:	6813      	ldr	r3, [r2, #0]
 800f384:	4610      	mov	r0, r2
 800f386:	b933      	cbnz	r3, 800f396 <_free_r+0x2e>
 800f388:	6063      	str	r3, [r4, #4]
 800f38a:	6014      	str	r4, [r2, #0]
 800f38c:	4628      	mov	r0, r5
 800f38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f392:	f000 b8a2 	b.w	800f4da <__malloc_unlock>
 800f396:	42a3      	cmp	r3, r4
 800f398:	d90c      	bls.n	800f3b4 <_free_r+0x4c>
 800f39a:	6821      	ldr	r1, [r4, #0]
 800f39c:	1862      	adds	r2, r4, r1
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	bf04      	itt	eq
 800f3a2:	681a      	ldreq	r2, [r3, #0]
 800f3a4:	685b      	ldreq	r3, [r3, #4]
 800f3a6:	6063      	str	r3, [r4, #4]
 800f3a8:	bf04      	itt	eq
 800f3aa:	1852      	addeq	r2, r2, r1
 800f3ac:	6022      	streq	r2, [r4, #0]
 800f3ae:	6004      	str	r4, [r0, #0]
 800f3b0:	e7ec      	b.n	800f38c <_free_r+0x24>
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	685a      	ldr	r2, [r3, #4]
 800f3b6:	b10a      	cbz	r2, 800f3bc <_free_r+0x54>
 800f3b8:	42a2      	cmp	r2, r4
 800f3ba:	d9fa      	bls.n	800f3b2 <_free_r+0x4a>
 800f3bc:	6819      	ldr	r1, [r3, #0]
 800f3be:	1858      	adds	r0, r3, r1
 800f3c0:	42a0      	cmp	r0, r4
 800f3c2:	d10b      	bne.n	800f3dc <_free_r+0x74>
 800f3c4:	6820      	ldr	r0, [r4, #0]
 800f3c6:	4401      	add	r1, r0
 800f3c8:	1858      	adds	r0, r3, r1
 800f3ca:	4282      	cmp	r2, r0
 800f3cc:	6019      	str	r1, [r3, #0]
 800f3ce:	d1dd      	bne.n	800f38c <_free_r+0x24>
 800f3d0:	6810      	ldr	r0, [r2, #0]
 800f3d2:	6852      	ldr	r2, [r2, #4]
 800f3d4:	605a      	str	r2, [r3, #4]
 800f3d6:	4401      	add	r1, r0
 800f3d8:	6019      	str	r1, [r3, #0]
 800f3da:	e7d7      	b.n	800f38c <_free_r+0x24>
 800f3dc:	d902      	bls.n	800f3e4 <_free_r+0x7c>
 800f3de:	230c      	movs	r3, #12
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	e7d3      	b.n	800f38c <_free_r+0x24>
 800f3e4:	6820      	ldr	r0, [r4, #0]
 800f3e6:	1821      	adds	r1, r4, r0
 800f3e8:	428a      	cmp	r2, r1
 800f3ea:	bf04      	itt	eq
 800f3ec:	6811      	ldreq	r1, [r2, #0]
 800f3ee:	6852      	ldreq	r2, [r2, #4]
 800f3f0:	6062      	str	r2, [r4, #4]
 800f3f2:	bf04      	itt	eq
 800f3f4:	1809      	addeq	r1, r1, r0
 800f3f6:	6021      	streq	r1, [r4, #0]
 800f3f8:	605c      	str	r4, [r3, #4]
 800f3fa:	e7c7      	b.n	800f38c <_free_r+0x24>
 800f3fc:	bd38      	pop	{r3, r4, r5, pc}
 800f3fe:	bf00      	nop
 800f400:	2000140c 	.word	0x2000140c

0800f404 <_malloc_r>:
 800f404:	b570      	push	{r4, r5, r6, lr}
 800f406:	1ccd      	adds	r5, r1, #3
 800f408:	f025 0503 	bic.w	r5, r5, #3
 800f40c:	3508      	adds	r5, #8
 800f40e:	2d0c      	cmp	r5, #12
 800f410:	bf38      	it	cc
 800f412:	250c      	movcc	r5, #12
 800f414:	2d00      	cmp	r5, #0
 800f416:	4606      	mov	r6, r0
 800f418:	db01      	blt.n	800f41e <_malloc_r+0x1a>
 800f41a:	42a9      	cmp	r1, r5
 800f41c:	d903      	bls.n	800f426 <_malloc_r+0x22>
 800f41e:	230c      	movs	r3, #12
 800f420:	6033      	str	r3, [r6, #0]
 800f422:	2000      	movs	r0, #0
 800f424:	bd70      	pop	{r4, r5, r6, pc}
 800f426:	f000 f857 	bl	800f4d8 <__malloc_lock>
 800f42a:	4a21      	ldr	r2, [pc, #132]	; (800f4b0 <_malloc_r+0xac>)
 800f42c:	6814      	ldr	r4, [r2, #0]
 800f42e:	4621      	mov	r1, r4
 800f430:	b991      	cbnz	r1, 800f458 <_malloc_r+0x54>
 800f432:	4c20      	ldr	r4, [pc, #128]	; (800f4b4 <_malloc_r+0xb0>)
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	b91b      	cbnz	r3, 800f440 <_malloc_r+0x3c>
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 f83d 	bl	800f4b8 <_sbrk_r>
 800f43e:	6020      	str	r0, [r4, #0]
 800f440:	4629      	mov	r1, r5
 800f442:	4630      	mov	r0, r6
 800f444:	f000 f838 	bl	800f4b8 <_sbrk_r>
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	d124      	bne.n	800f496 <_malloc_r+0x92>
 800f44c:	230c      	movs	r3, #12
 800f44e:	6033      	str	r3, [r6, #0]
 800f450:	4630      	mov	r0, r6
 800f452:	f000 f842 	bl	800f4da <__malloc_unlock>
 800f456:	e7e4      	b.n	800f422 <_malloc_r+0x1e>
 800f458:	680b      	ldr	r3, [r1, #0]
 800f45a:	1b5b      	subs	r3, r3, r5
 800f45c:	d418      	bmi.n	800f490 <_malloc_r+0x8c>
 800f45e:	2b0b      	cmp	r3, #11
 800f460:	d90f      	bls.n	800f482 <_malloc_r+0x7e>
 800f462:	600b      	str	r3, [r1, #0]
 800f464:	50cd      	str	r5, [r1, r3]
 800f466:	18cc      	adds	r4, r1, r3
 800f468:	4630      	mov	r0, r6
 800f46a:	f000 f836 	bl	800f4da <__malloc_unlock>
 800f46e:	f104 000b 	add.w	r0, r4, #11
 800f472:	1d23      	adds	r3, r4, #4
 800f474:	f020 0007 	bic.w	r0, r0, #7
 800f478:	1ac3      	subs	r3, r0, r3
 800f47a:	d0d3      	beq.n	800f424 <_malloc_r+0x20>
 800f47c:	425a      	negs	r2, r3
 800f47e:	50e2      	str	r2, [r4, r3]
 800f480:	e7d0      	b.n	800f424 <_malloc_r+0x20>
 800f482:	428c      	cmp	r4, r1
 800f484:	684b      	ldr	r3, [r1, #4]
 800f486:	bf16      	itet	ne
 800f488:	6063      	strne	r3, [r4, #4]
 800f48a:	6013      	streq	r3, [r2, #0]
 800f48c:	460c      	movne	r4, r1
 800f48e:	e7eb      	b.n	800f468 <_malloc_r+0x64>
 800f490:	460c      	mov	r4, r1
 800f492:	6849      	ldr	r1, [r1, #4]
 800f494:	e7cc      	b.n	800f430 <_malloc_r+0x2c>
 800f496:	1cc4      	adds	r4, r0, #3
 800f498:	f024 0403 	bic.w	r4, r4, #3
 800f49c:	42a0      	cmp	r0, r4
 800f49e:	d005      	beq.n	800f4ac <_malloc_r+0xa8>
 800f4a0:	1a21      	subs	r1, r4, r0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 f808 	bl	800f4b8 <_sbrk_r>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	d0cf      	beq.n	800f44c <_malloc_r+0x48>
 800f4ac:	6025      	str	r5, [r4, #0]
 800f4ae:	e7db      	b.n	800f468 <_malloc_r+0x64>
 800f4b0:	2000140c 	.word	0x2000140c
 800f4b4:	20001410 	.word	0x20001410

0800f4b8 <_sbrk_r>:
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4c06      	ldr	r4, [pc, #24]	; (800f4d4 <_sbrk_r+0x1c>)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4605      	mov	r5, r0
 800f4c0:	4608      	mov	r0, r1
 800f4c2:	6023      	str	r3, [r4, #0]
 800f4c4:	f7f2 fabc 	bl	8001a40 <_sbrk>
 800f4c8:	1c43      	adds	r3, r0, #1
 800f4ca:	d102      	bne.n	800f4d2 <_sbrk_r+0x1a>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	b103      	cbz	r3, 800f4d2 <_sbrk_r+0x1a>
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	20002290 	.word	0x20002290

0800f4d8 <__malloc_lock>:
 800f4d8:	4770      	bx	lr

0800f4da <__malloc_unlock>:
 800f4da:	4770      	bx	lr

0800f4dc <_init>:
 800f4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4de:	bf00      	nop
 800f4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4e2:	bc08      	pop	{r3}
 800f4e4:	469e      	mov	lr, r3
 800f4e6:	4770      	bx	lr

0800f4e8 <_fini>:
 800f4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ea:	bf00      	nop
 800f4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ee:	bc08      	pop	{r3}
 800f4f0:	469e      	mov	lr, r3
 800f4f2:	4770      	bx	lr
